{
    "flows/ablations/abl_noattn.py": {
        "tensorflow": {
            "reshape_27": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, height, width, ch, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, height, width, ch, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_28": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, height, width, ch, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "make_template_71": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_20": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_31": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_max(c, axis=4)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_58": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_nin(x, name='attn', pos_emb=pos_emb, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_61": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "make_template_105": {
                "variable": {
                    "value": "self.context_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "context_proc",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "shallow_processor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_41": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_nin(x, name='attn', pos_emb=pos_emb, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_42": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_nin(x, name='attn', pos_emb=pos_emb, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "random_normal_initializer_47": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_51": {
                "name_or_scope": {
                    "value": "f'block{i_block}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "concat_100": {
                "values": {
                    "value": "[this, that]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_43": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_nin(x, name='attn', pos_emb=pos_emb, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_43": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_43": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_nin(x, name='attn', pos_emb=pos_emb, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_43": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_nin(x, name='attn', pos_emb=pos_emb, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_68": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                }
            }
        }
    },
    "flows/ablations/abl_nodequant.py": {
        "tensorflow": {
            "zeros_25": {
                "shape": {
                    "value": "[int(x.shape[0])]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "flows/ablations/abl_nomixlog.py": {
        "tensorflow": {
            "make_template_52": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "make_template_85": {
                "variable": {
                    "value": "self.context_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "context_proc",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "shallow_processor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_29": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_30": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_48": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "random_normal_initializer_35": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "f'block{i_block}'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "exp_50": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "concat_80": {
                "values": {
                    "value": "[this, that]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "shape_31": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_31": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_31": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_31": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x / 256.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "conv2d(tf.concat([this, that], 3), name='proj', num_units=32, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name=f'c{i}', vcfg=vcfg, dropout_p=dropout_p, use_nin=False, a=None)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flows/flow_training.py": {
        "tensorflow": {
            "placeholder_121": {
                "variable": {
                    "value": "x_init_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[init_bs] + img_shp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_128": {
                "variable": {
                    "value": "x_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[local_bs] + img_shp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_135": {
                "variable": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_140": {
                "variable": {
                    "value": "ema",
                    "type": "Name",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "group_141": {
                "variable": {
                    "value": "maintain_averages_op",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema.apply(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_144": {
                "variable": {
                    "value": "copy_params_to_ema",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[name2var[p.name.replace(':0', '') + '/ExponentialMovingAverage:0'].assign(p) for p in params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_max_155": {
                "variable": {
                    "value": "val_inverr_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(val_dequant_x_sym - flow.inverse(val_y_sym, **val_flow_kwargs)[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "lr_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_212": {
                "variable": {
                    "value": "opt_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "optimizer.apply_gradients(grads_and_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "maintain_averages_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.group(ema.apply(params))",
                            "Call"
                        ],
                        [
                            "tf.group(ema.apply(params))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_289": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_336": {
                "variable": {
                    "value": "x_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ],
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[local_bs] + img_shp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_345": {
                "variable": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_347": {
                "variable": {
                    "value": "ema",
                    "type": "Name",
                    "possible_values": []
                },
                "decay": {
                    "value": "0.9999999999999",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_348": {
                "variable": {
                    "value": "maintain_averages_op",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema.apply(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_max_359": {
                "variable": {
                    "value": "val_inverr_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(val_dequant_x_sym - flow.inverse(val_y_sym, **val_flow_kwargs)[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_425": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_data_27": {
                "variable": {
                    "value": "((data_train, _), (data_val, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_by_global_norm_208": {
                "variable": {
                    "value": "(clipped_grads, grad_norm_sym)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[g for (g, _) in grads_and_vars]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_211": {
                "variable": {
                    "value": "grad_norm_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Normal_18": {
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_21": {
                "input_tensor": {
                    "value": "total_logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dequant_logd + main_logd + logp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "load_data_30": {
                "variable": {
                    "value": "((data_train, _), (data_val, _))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "abs_155": {
                "x": {
                    "value": "val_dequant_x_sym - flow.inverse(val_y_sym, **val_flow_kwargs)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_159": {
                "x": {
                    "value": "samples_sym",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "AdamOptimizer_194": {
                "learning_rate": {
                    "value": "lr_sym",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, [], 'lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_293": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_359": {
                "x": {
                    "value": "val_dequant_x_sym - flow.inverse(val_y_sym, **val_flow_kwargs)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_363": {
                "x": {
                    "value": "samples_sym",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Session_428": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_434": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_222": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_364": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_430": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "flows/flows.py": {
        "tensorflow": {
            "get_variable_18": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Name",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (x.shape.ndims - 1) + [int(x.shape[-1])]",
                            "BinOp"
                        ],
                        [
                            "[bs, 8, 8, ch]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "vcfg.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initializer.astype(vcfg.dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "(np.eye(img_c) + noisy_identity_init * np.random.randn(img_c, img_c)).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.linalg.qr(np.random.randn(img_c, img_c))[0].astype(np.float32)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                },
                "use_resource": {
                    "value": "vcfg.use_resource",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_89": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_100": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_172": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_91": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [num_units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_96": {
                "features": {
                    "value": "tf.concat([x, -x], axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_110": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(x, u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_143": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, 3, heads, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_144": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_145": {
                "variable": {
                    "value": "(q_bhtd, k_bhtd, v_bhtd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": []
                },
                "logits": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q_bhtd, k_bhtd, transpose_b=True) / np.sqrt(float(dim))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w_bhtt)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_151": {
                "variable": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q_bhtd, k_bhtd, transpose_b=True) / np.sqrt(float(dim))",
                            "BinOp"
                        ],
                        [
                            "tf.nn.softmax(w_bhtt)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_bhtd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_153": {
                "variable": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(w_bhtt, v_bhtd)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_155": {
                "variable": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(a_bhtd, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_157": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a_bthd, [bs, timesteps, ch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, height, width, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_167": {
                "input_tensor": {
                    "value": "tf.reshape(x, [x.shape[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Assert_179": {
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(tf.reduce_min(x), min), tf.less_equal(tf.reduce_max(x), max))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_244": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_298": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W // 2, 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_299": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_308": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "make_template_359": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._maybe_tqdm(self.flows, desc='forward {}'.format(kwargs.get('vcfg')), verbose=kwargs.get('verbose'))",
                            "Call"
                        ],
                        [
                            "self._maybe_tqdm(self.flows[::-1], desc='inverse {}'.format(kwargs.get('vcfg')), verbose=kwargs.get('verbose'))",
                            "Call"
                        ]
                    ]
                }
            },
            "make_template_403": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._maybe_tqdm(self.flows, desc='forward {}'.format(kwargs.get('vcfg')), verbose=kwargs.get('verbose'))",
                            "Call"
                        ],
                        [
                            "self._maybe_tqdm(self.flows[::-1], desc='inverse {}'.format(kwargs.get('vcfg')), verbose=kwargs.get('verbose'))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_409": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_410": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_463": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=x, **logistic_kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "make_template_513": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._maybe_tqdm(self.flows, desc='forward {}'.format(kwargs.get('vcfg')), verbose=kwargs.get('verbose'))",
                            "Call"
                        ],
                        [
                            "self._maybe_tqdm(self.flows[::-1], desc='inverse {}'.format(kwargs.get('vcfg')), verbose=kwargs.get('verbose'))",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_541": {
                "variable": {
                    "value": "x_in_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float64",
                            "MethodArgument"
                        ],
                        [
                            "tf.float64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (x.shape.ndims - 1) + [int(x.shape[-1])]",
                            "BinOp"
                        ],
                        [
                            "[bs, 8, 8, ch]",
                            "List"
                        ]
                    ]
                }
            },
            "variable_scope_27": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_33": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W{}'.format(i), shape=None, initializer=initializer, vcfg=vcfg)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_34": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / self.max_val)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_44": {
                "value": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=shape, initializer=tf.constant_initializer(0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W{}'.format(i), shape=None, initializer=initializer, vcfg=vcfg)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_56": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / self.max_val)",
                            "BinOp"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_66": {
                "value": {
                    "value": "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=shape, initializer=tf.constant_initializer(0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_70": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_75": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_96": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "len(x.get_shape()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_101": {
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=shape, initializer=tf.constant_initializer(0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_124": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, vcfg=vcfg)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_131": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_159": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, vcfg=vcfg)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_167": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logical_and_179": {
                "x": {
                    "value": "tf.greater_equal(tf.reduce_min(x), min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(tf.reduce_max(x), max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_186": {
                "x": {
                    "value": "tf.reciprocal(x) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_347": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "fill_396": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[input_[0].shape[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n(logds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_414": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [out_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_500": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_503": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Graph_540": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_547": {
                "graph": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Graph_581": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_583": {
                "variable": {
                    "value": "x_in_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float64",
                            "MethodArgument"
                        ],
                        [
                            "tf.float64",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "input_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(5, 8, 8, 3)",
                            "Tuple"
                        ],
                        [
                            "(2, 4, 4, 3)",
                            "Tuple"
                        ],
                        [
                            "(5",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Session_588": {
                "graph": {
                    "value": "graph",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_44": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W{}'.format(i), shape=None, initializer=initializer, vcfg=vcfg)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_66": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W{}'.format(i), shape=None, initializer=initializer, vcfg=vcfg)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "identity_n_82": {
                "variable": {
                    "value": "(g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "[g, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squared_difference_111": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=-1, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_148": {
                "a": {
                    "value": "q_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "k_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "greater_equal_180": {
                "x": {
                    "value": "tf.reduce_min(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "min",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "less_equal_181": {
                "x": {
                    "value": "tf.reduce_max(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "max",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "softplus_245": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_250": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / self.max_val)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "space_to_depth_288": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depth_to_space_291": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / self.max_val)",
                            "BinOp"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_310": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W_half * 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_322": {
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_343": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('g', shape=shape, initializer=tf.constant_initializer(1), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_430": {
                "x": {
                    "value": "self.scales",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "moments_483": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.shape)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_484": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_582": {
                "name_or_scope": {
                    "value": "test_scope",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variables_initializer_590": {
                "var_list": {
                    "value": "tf.global_variables(scope.name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_29": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_30": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_35": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_38": {
                "control_inputs": {
                    "value": "[W.assign(new_W), b.assign(new_b)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_42": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_51": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_52": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_57": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_60": {
                "control_inputs": {
                    "value": "[W.assign(new_W), b.assign(new_b)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_64": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_71": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_72": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_76": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_78": {
                "control_inputs": {
                    "value": "[g.assign(scale_init), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_initializer_108": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_109": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_180": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_181": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "reciprocal_186": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_227": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_227": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_239": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_239": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_317": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_347": {
                "inputs": {
                    "value": "[tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "add_n_396": {
                "inputs": {
                    "value": "logds",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "maximum_458": {
                "x": {
                    "value": "self.logscales",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.min_logscale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_value_469": {
                "t": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / self.max_val)",
                            "BinOp"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_502": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "global_variables_590": {
                "scope": {
                    "value": "scope.name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "bias_add_40": {
                "value": {
                    "value": "tf.matmul(x, new_W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "new_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-m_init * scale_init",
                            "BinOp"
                        ],
                        [
                            "-m_init * scale_init",
                            "BinOp"
                        ]
                    ]
                }
            },
            "bias_add_62": {
                "value": {
                    "value": "tf.nn.conv2d(x, new_W, [1, *stride, 1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "new_b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-m_init * scale_init",
                            "BinOp"
                        ],
                        [
                            "-m_init * scale_init",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rsqrt_112": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "random_normal_initializer_489": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_493": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_40": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "new_W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W * scale_init[None, :]",
                            "BinOp"
                        ],
                        [
                            "W * scale_init[None, None, None, :]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "conv2d_62": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "new_W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "W * scale_init[None, :]",
                            "BinOp"
                        ],
                        [
                            "W * scale_init[None, None, None, :]",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_sum_347": {
                "input_tensor": {
                    "value": "tf.log(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_float_394": {
                "x": {
                    "value": "tf.log(tf.abs(tf.matrix_determinant(tf.to_double(W))))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_485": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_485": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_485": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_485": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "np.random.randn(*shape)",
                            "Call"
                        ],
                        [
                            "np.random.uniform(input_bounds[0], input_bounds[1], input_shape).astype(dtype.as_numpy_dtype)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / self.max_val) + 0.05",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x)], message='{} (shape/mean/std/min/max) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_in', num_units=filters, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='proj_out', num_units=C * (2 + 3 * components), init_scale=init_scale, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_conv(x, name='conv', a=context, use_nin=True, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln1', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "gated_attn(x, name='attn', pos_emb=pos_emb, heads=heads, dropout_p=dropout_p, vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "layernorm(x, name='ln2', vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ]
                    ]
                }
            },
            "log_347": {
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('g', shape=shape, initializer=tf.constant_initializer(1), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_394": {
                "x": {
                    "value": "tf.abs(tf.matrix_determinant(tf.to_double(W)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_510": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=-1, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_394": {
                "x": {
                    "value": "tf.matrix_determinant(tf.to_double(W))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "to_double_394": {
                "x": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), vcfg=vcfg)",
                            "Call"
                        ],
                        [
                            "get_var('W{}'.format(i), shape=None, initializer=initializer, vcfg=vcfg)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flows/logistic.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "in_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "in_means",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "in_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_77": {
                "variable": {
                    "value": "in_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "variable": {
                    "value": "in_prior_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "in_means",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "in_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_112": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_logits - tf.log(-tf.log(tf.random_uniform(tf.shape(prior_logits), minval=1e-05, maxval=1.0 - 1e-05)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_116": {
                "variable": {
                    "value": "sampled_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "sampled_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(prior_logits - tf.log(-tf.log(tf.random_uniform(tf.shape(prior_logits), minval=1e-05, maxval=1.0 - 1e-05))), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(prior_logits)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "variable": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "means * sampled_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_119": {
                "variable": {
                    "value": "logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logscales * sampled_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_152": {
                "variable": {
                    "value": "init_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_153": {
                "variable": {
                    "value": "maxscales",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.exp(logscales)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_154": {
                "variable": {
                    "value": "init_lb",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "means - init_bounds_scale * maxscales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_155": {
                "variable": {
                    "value": "init_ub",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "means + init_bounds_scale * maxscales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_156": {
                "variable": {
                    "value": "init_diff",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "while_loop_158": {
                "variable": {
                    "value": "(out_x, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda _x, _lb, _ub, last_diff: last_diff > tol",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(init_x, init_lb, init_ub, init_diff)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "max_bisection_iters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "200",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_176": {
                "variable": {
                    "value": "in_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_177": {
                "variable": {
                    "value": "in_prior_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "in_means",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "in_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_184": {
                "variable": {
                    "value": "err",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(out_inv_cdf - in_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_sigmoid_20": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - mean) * tf.exp(-logscale)",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.exp(-logscale)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reset_default_graph_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_logsumexp_56": {
                "input_tensor": {
                    "value": "tf.nn.log_softmax(prior_logits, axis=-1) + logistic_logpdf(x=tf.expand_dims(x, -1), mean=means, logscale=logscales)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_66": {
                "input_tensor": {
                    "value": "tf.nn.log_softmax(prior_logits, axis=-1) + logistic_logcdf(x=tf.expand_dims(x, -1), mean=means, logscale=logscales)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Assert_128": {
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(tf.reduce_min(x), min), tf.less_equal(tf.reduce_max(x), max))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_140": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_143": {
                "variable": {
                    "value": "cur_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=x, prior_logits=prior_logits, means=means, logscales=logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_144": {
                "variable": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(cur_y, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_max_149": {
                "variable": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(new_x - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_10": {
                "x": {
                    "value": "-logscale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_19": {
                "x": {
                    "value": "-logscale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Session_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_90": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_121": {
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-1.0, 0.0, 1]",
                            "List"
                        ],
                        [
                            "tf.reduce_sum(means * sampled_onehot, axis=-1)",
                            "Call"
                        ],
                        [
                            "[-1.0, 0.0, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "logical_and_128": {
                "x": {
                    "value": "tf.greater_equal(tf.reduce_min(x), min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(tf.reduce_max(x), max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_139": {
                "control_inputs": {
                    "value": "[assert_in_range(y, min=0.0, max=1.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_153": {
                "x": {
                    "value": "logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-5.0, 0.0, 0.2]",
                            "List"
                        ],
                        [
                            "tf.reduce_sum(logscales * sampled_onehot, axis=-1)",
                            "Call"
                        ],
                        [
                            "[-5.0, 0.0, 0.2]",
                            "List"
                        ]
                    ]
                }
            },
            "abs_184": {
                "x": {
                    "value": "out_inv_cdf - in_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_11": {
                "features": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - mean) * tf.exp(-logscale)",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.exp(-logscale)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_57": {
                "logits": {
                    "value": "prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ],
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_67": {
                "logits": {
                    "value": "prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ],
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_113": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(prior_logits), minval=1e-05, maxval=1.0 - 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_116": {
                "input": {
                    "value": "prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ],
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_122": {
                "x": {
                    "value": "logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-5.0, 0.0, 0.2]",
                            "List"
                        ],
                        [
                            "tf.reduce_sum(logscales * sampled_onehot, axis=-1)",
                            "Call"
                        ],
                        [
                            "[-5.0, 0.0, 0.2]",
                            "List"
                        ]
                    ]
                }
            },
            "greater_equal_129": {
                "x": {
                    "value": "tf.reduce_min(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "min",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "less_equal_130": {
                "x": {
                    "value": "tf.reduce_max(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "max",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "greater_144": {
                "x": {
                    "value": "cur_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(mixlogistic_logcdf(x=x, prior_logits=prior_logits, means=means, logscales=logscales))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_149": {
                "x": {
                    "value": "new_x - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_182": {
                "x": {
                    "value": "out_logcdf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic_logcdf(x=in_x, mean=in_means, logscale=in_logscales)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logcdf(x=in_x, prior_logits=in_prior_logits, means=in_means, logscales=in_logscales)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logcdf(x=in_x, **logistic_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_122": {
                "x": {
                    "value": "1.0 - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_129": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(logscales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_130": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(logscales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_58": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(logscales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_68": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(logscales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_113": {
                "input": {
                    "value": "prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ],
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "flows/run_cifar.py": {
        "tensorflow": {
            "make_template_33": {
                "variable": {
                    "value": "self.context_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "context_proc",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "shallow_processor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "concat_28": {
                "values": {
                    "value": "[this, that]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "flows/utils.py": {
        "tensorflow": {
            "Summary_44": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[summary_val(k, v) for (k, v) in kvs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Event_45": {
                "variable": {
                    "value": "event",
                    "type": "Name",
                    "possible_values": []
                },
                "wall_time": {
                    "value": "time.time()",
                    "type": "Call",
                    "possible_values": []
                },
                "summary": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Summary(value=[summary_val(k, v) for (k, v) in kvs])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_74": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "as_bytes_19": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flows_celeba/flow_training_celeba.py": {
        "tensorflow": {
            "placeholder_132": {
                "variable": {
                    "value": "x_init_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[init_bs] + img_shp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "x_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[local_bs] + img_shp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_146": {
                "variable": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_149": {
                "variable": {
                    "value": "ema",
                    "type": "Name",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "group_150": {
                "variable": {
                    "value": "maintain_averages_op",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema.apply(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_153": {
                "variable": {
                    "value": "copy_params_to_ema",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[name2var[p.name.replace(':0', '') + '/ExponentialMovingAverage:0'].assign(p) for p in params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "placeholder_187": {
                "variable": {
                    "value": "lr_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_200": {
                "variable": {
                    "value": "opt_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "optimizer.apply_gradients(grads_and_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "maintain_averages_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.group(ema.apply(params))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_282": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_21": {
                "x": {
                    "value": "tf.reduce_sum(Normal(0.0, 1.0).log_prob(y)) / int(y.shape[0]) + tf.reduce_mean(logd)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "orig_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_196": {
                "variable": {
                    "value": "(clipped_grads, grad_norm_sym)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[g for (g, _) in grads_and_vars]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_199": {
                "variable": {
                    "value": "grad_norm_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "to_float_160": {
                "x": {
                    "value": "samples_sym",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "AdamOptimizer_188": {
                "learning_rate": {
                    "value": "lr_sym",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, [], 'lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_285": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_22": {
                "input_tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "global_variables_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_162": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_212": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "Normal(0.0, 1.0).log_prob(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_229": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_22": {
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "flows_celeba/launchers/celeba128_5bit_official.py": {
        "tensorflow": {
            "get_variable_32": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "STORAGE_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initializer.astype(STORAGE_FLOATX.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(x, u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_135": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_580": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_582": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logp)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DEFAULT_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.reshape(x, [x.shape[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [num_units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [out_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_132": {
                "features": {
                    "value": "tf.concat([x, -x], axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, 3, heads, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_167": {
                "variable": {
                    "value": "(q_bhtd, k_bhtd, v_bhtd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(at_least_float32(w_bhtt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q_bhtd, k_bhtd, transpose_b=True) / np.sqrt(float(dim))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.nn.softmax(at_least_float32(w_bhtt)), dtype=x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_bhtd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_175": {
                "variable": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(w_bhtt, v_bhtd)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(a_bhtd, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a_bthd, [bs, timesteps, ch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, height, width, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_237": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_241": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_245": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W // 2, 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_274": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_283": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_300": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "make_template_339": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "make_template_404": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_414": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_426": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_446": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_521": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_531": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_543": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_563": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_611": {
                "variable": {
                    "value": "self.context_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "context_proc",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "deep_processor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_24": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_41": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=axis, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_42": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_62": {
                "x": {
                    "value": "tf.reciprocal(x) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_70": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_88": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_96": {
                "value": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_107": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_115": {
                "value": {
                    "value": "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_132": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_136": {
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_147": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_327": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_392": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_397": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_398": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_509": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_514": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_515": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_582": {
                "structure": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_583": {
                "x": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "identity_n_77": {
                "variable": {
                    "value": "(g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "[g, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_94": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_113": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_115": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_170": {
                "a": {
                    "value": "q_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "k_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "logits": {
                    "value": "at_least_float32(w_bhtt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_235": {
                "x": {
                    "value": "1.0 / x - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_236": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_242": {
                "x": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "space_to_depth_264": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depth_to_space_267": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W_half * 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_296": {
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_301": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_305": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_323": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_426": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_453": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_543": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_570": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_587": {
                "shape": {
                    "value": "x.shape.as_list()[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_initializer_49": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_50": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "bcast_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (x.shape.ndims - 1) + [dim]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_62": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_67": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_71": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_73": {
                "control_inputs": {
                    "value": "[g.assign(scale_init), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_83": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_89": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_90": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_102": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_108": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, None, None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_218": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_218": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_230": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_230": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_291": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_327": {
                "inputs": {
                    "value": "[tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "moments_364": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_365": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_396": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_444": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_453": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "moments_475": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_476": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_513": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_561": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_570": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "concat_600": {
                "values": {
                    "value": "[this, that]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_381": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_420": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_474": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_492": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_537": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "tf.log(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_377": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_488": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_327": {
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_368": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_368": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_369": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_479": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_479": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_479": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_479": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_480": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_480": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_480": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flows_celeba/launchers/celeba64_3bit_official.py": {
        "tensorflow": {
            "get_variable_32": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "STORAGE_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initializer.astype(STORAGE_FLOATX.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(x, u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_135": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_580": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_582": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logp)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DEFAULT_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.reshape(x, [x.shape[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [num_units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [out_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_132": {
                "features": {
                    "value": "tf.concat([x, -x], axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, 3, heads, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_167": {
                "variable": {
                    "value": "(q_bhtd, k_bhtd, v_bhtd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(at_least_float32(w_bhtt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q_bhtd, k_bhtd, transpose_b=True) / np.sqrt(float(dim))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.nn.softmax(at_least_float32(w_bhtt)), dtype=x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_bhtd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_175": {
                "variable": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(w_bhtt, v_bhtd)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(a_bhtd, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a_bthd, [bs, timesteps, ch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, height, width, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_237": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_241": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 8)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_245": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W // 2, 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_274": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_283": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_300": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "make_template_339": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "make_template_404": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_414": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_426": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_446": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_521": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_531": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_543": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_563": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_604": {
                "variable": {
                    "value": "self.context_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "context_proc",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "deep_processor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_24": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_41": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=axis, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_42": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_62": {
                "x": {
                    "value": "tf.reciprocal(x) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_70": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_88": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 8)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_96": {
                "value": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_107": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 8)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_115": {
                "value": {
                    "value": "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_132": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_136": {
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_147": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_327": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_392": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_397": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_398": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_509": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_514": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_515": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_582": {
                "structure": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_583": {
                "x": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "identity_n_77": {
                "variable": {
                    "value": "(g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "[g, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_94": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_113": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_115": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_170": {
                "a": {
                    "value": "q_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "k_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "logits": {
                    "value": "at_least_float32(w_bhtt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_235": {
                "x": {
                    "value": "1.0 / x - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_236": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 8) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_242": {
                "x": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 8) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "space_to_depth_264": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depth_to_space_267": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 8)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W_half * 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_296": {
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_301": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_305": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 8)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_323": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_426": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 8) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_453": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_543": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 8) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_570": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_49": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_50": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "bcast_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (x.shape.ndims - 1) + [dim]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_62": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_67": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_71": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_73": {
                "control_inputs": {
                    "value": "[g.assign(scale_init), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_83": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_89": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_90": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_102": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_108": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, None, None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_218": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_218": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_230": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_230": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_291": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_327": {
                "inputs": {
                    "value": "[tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "moments_364": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_365": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_396": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_444": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_453": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 8) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "moments_475": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_476": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_513": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_561": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_570": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 8) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "concat_593": {
                "values": {
                    "value": "[this, that]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_381": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_420": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_474": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_492": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_537": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "tf.log(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_377": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_488": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_327": {
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_368": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_368": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_369": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_479": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_479": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_479": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_479": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_480": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_480": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_480": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 8) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flows_celeba/launchers/celeba64_5bit_official.py": {
        "tensorflow": {
            "get_variable_32": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "STORAGE_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initializer.astype(STORAGE_FLOATX.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(x, u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_135": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_580": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_582": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logp)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DEFAULT_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.reshape(x, [x.shape[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [num_units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [out_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_132": {
                "features": {
                    "value": "tf.concat([x, -x], axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, 3, heads, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_167": {
                "variable": {
                    "value": "(q_bhtd, k_bhtd, v_bhtd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(at_least_float32(w_bhtt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q_bhtd, k_bhtd, transpose_b=True) / np.sqrt(float(dim))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.nn.softmax(at_least_float32(w_bhtt)), dtype=x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_bhtd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_175": {
                "variable": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(w_bhtt, v_bhtd)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(a_bhtd, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a_bthd, [bs, timesteps, ch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, height, width, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_237": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_241": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_245": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W // 2, 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_274": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_283": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_300": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "make_template_339": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "make_template_404": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_414": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_426": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_446": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_521": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_531": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_543": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_563": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_604": {
                "variable": {
                    "value": "self.context_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "context_proc",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "deep_processor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_24": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_41": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=axis, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_42": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_62": {
                "x": {
                    "value": "tf.reciprocal(x) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_70": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_88": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_96": {
                "value": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_107": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_115": {
                "value": {
                    "value": "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_132": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_136": {
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_147": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_327": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_392": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_397": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_398": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_509": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_514": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_515": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_582": {
                "structure": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_583": {
                "x": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "identity_n_77": {
                "variable": {
                    "value": "(g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "[g, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_94": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_113": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_115": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_170": {
                "a": {
                    "value": "q_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "k_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "logits": {
                    "value": "at_least_float32(w_bhtt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_235": {
                "x": {
                    "value": "1.0 / x - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_236": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_242": {
                "x": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "space_to_depth_264": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depth_to_space_267": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W_half * 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_296": {
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_301": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_305": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_323": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_426": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_453": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_543": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_570": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_49": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_50": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "bcast_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (x.shape.ndims - 1) + [dim]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_62": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_67": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_71": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_73": {
                "control_inputs": {
                    "value": "[g.assign(scale_init), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_83": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_89": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_90": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_102": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_108": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, None, None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_218": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_218": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_230": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_230": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_291": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_327": {
                "inputs": {
                    "value": "[tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "moments_364": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_365": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_396": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_444": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_453": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "moments_475": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_476": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_513": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_561": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_570": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "concat_593": {
                "values": {
                    "value": "[this, that]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_381": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_420": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_474": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_492": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_537": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "tf.log(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_377": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_488": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_327": {
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_368": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_368": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_369": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_479": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_479": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_479": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_479": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_480": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_480": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_480": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flows_imagenet/flow_training_imagenet.py": {
        "tensorflow": {
            "placeholder_166": {
                "variable": {
                    "value": "x_init_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[init_bs] + img_shp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_173": {
                "variable": {
                    "value": "x_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[local_bs] + img_shp",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "trainable_variables_180": {
                "variable": {
                    "value": "params",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ExponentialMovingAverage_183": {
                "variable": {
                    "value": "ema",
                    "type": "Name",
                    "possible_values": []
                },
                "decay": {
                    "value": "ema_decay",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "group_184": {
                "variable": {
                    "value": "maintain_averages_op",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "ema.apply(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "group_187": {
                "variable": {
                    "value": "copy_params_to_ema",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "[name2var[p.name.replace(':0', '') + '/ExponentialMovingAverage:0'].assign(p) for p in params]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_max_198": {
                "variable": {
                    "value": "val_inverr_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(val_dequant_x_sym - flow.inverse(val_y_sym, dropout_p=0, ema=ema, verbose=is_root)[0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_249": {
                "variable": {
                    "value": "lr_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "MethodArgument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "lr",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "group_262": {
                "variable": {
                    "value": "opt_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "optimizer.apply_gradients(grads_and_vars)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "maintain_averages_op",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.group(ema.apply(params))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_355": {
                "variable": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cast_21": {
                "x": {
                    "value": "tf.reduce_sum(Normal(0.0, 1.0).log_prob(y)) / int(y.shape[0]) + tf.reduce_mean(logd)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "orig_dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_258": {
                "variable": {
                    "value": "(clipped_grads, grad_norm_sym)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "[g for (g, _) in grads_and_vars]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "max_grad_norm",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "constant_261": {
                "variable": {
                    "value": "grad_norm_sym",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "abs_198": {
                "x": {
                    "value": "val_dequant_x_sym - flow.inverse(val_y_sym, dropout_p=0, ema=ema, verbose=is_root)[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_205": {
                "x": {
                    "value": "samples_sym",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "AdamOptimizer_250": {
                "learning_rate": {
                    "value": "lr_sym",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.placeholder(dtype, [], 'lr')",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_358": {
                "config": {
                    "value": "config",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_22": {
                "input_tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "global_variables_186": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "trainable_variables_207": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_268": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_274": {
                "variable": {
                    "value": "saver",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_22": {
                "input_tensor": {
                    "value": "Normal(0.0, 1.0).log_prob(y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Saver_291": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Normal_22": {
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "flows_imagenet/launchers/imagenet32_official.py": {
        "tensorflow": {
            "get_variable_34": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "STORAGE_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initializer.astype(STORAGE_FLOATX.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_42": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_43": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(x, u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_141": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_148": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_149": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_156": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_604": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_606": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logp)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_21": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DEFAULT_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_61": {
                "input_tensor": {
                    "value": "tf.reshape(x, [x.shape[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_90": {
                "variable": {
                    "value": "_vinvnorm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(tf.square(_V), [0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_93": {
                "variable": {
                    "value": "x0",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "V",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "l2_normalize_116": {
                "variable": {
                    "value": "_vnorm",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "_V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('V', shape=[int(x.shape[1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('V', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_123": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_143": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [num_units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_150": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [out_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_153": {
                "features": {
                    "value": "tf.concat([x, -x], axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_186": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, 3, heads, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_187": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_188": {
                "variable": {
                    "value": "(q_bhtd, k_bhtd, v_bhtd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_192": {
                "variable": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(at_least_float32(w_bhtt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_194": {
                "variable": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q_bhtd, k_bhtd, transpose_b=True) / np.sqrt(float(dim))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.nn.softmax(at_least_float32(w_bhtt)), dtype=x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_bhtd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_196": {
                "variable": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(w_bhtt, v_bhtd)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_198": {
                "variable": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(a_bhtd, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_200": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a_bthd, [bs, timesteps, ch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, height, width, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_258": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_262": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 256)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_266": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_294": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W // 2, 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_295": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_304": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_321": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "make_template_360": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "make_template_425": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_435": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_447": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_467": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_542": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_555": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_567": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_587": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_637": {
                "variable": {
                    "value": "self.context_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "context_proc",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "deep_processor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_26": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_43": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=axis, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_44": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_64": {
                "x": {
                    "value": "tf.reciprocal(x) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_72": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_84": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_97": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_110": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_126": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_153": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_157": {
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_160": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_168": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_174": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_202": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_348": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_413": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_418": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_419": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_530": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_535": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_536": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_606": {
                "structure": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_607": {
                "x": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "identity_n_79": {
                "variable": {
                    "value": "(g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "[g, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_90": {
                "input_tensor": {
                    "value": "tf.square(_V)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_123": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g[None, None, None, :] * vnorm",
                            "BinOp"
                        ],
                        [
                            "g[None, None, None, :] * vnorm",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "bias_add_134": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.nn.conv2d(input_x, W, [1, *stride, 1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_191": {
                "a": {
                    "value": "q_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "k_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_192": {
                "logits": {
                    "value": "at_least_float32(w_bhtt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_256": {
                "x": {
                    "value": "1.0 / x - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_257": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_258": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_263": {
                "x": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_266": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "space_to_depth_285": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depth_to_space_288": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 256)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W_half * 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_317": {
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_322": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_326": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 256)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_344": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_447": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_474": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_567": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_594": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_51": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_52": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_55": {
                "tensor": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "bcast_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (x.shape.ndims - 1) + [dim]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_64": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_68": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_69": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_73": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_75": {
                "control_inputs": {
                    "value": "[g.assign(scale_init), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_86": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_88": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_89": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "square_90": {
                "x": {
                    "value": "_V",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('V', shape=[int(x.shape[1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('V', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_98": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_99": {
                "control_inputs": {
                    "value": "[_g.assign(tf.cast(g * scale_init, dtype=_g.dtype)), _b.assign_add(tf.cast(-m_init * scale_init, dtype=_b.dtype))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_113": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_114": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_115": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_127": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_128": {
                "control_inputs": {
                    "value": "[_g.assign(tf.cast(g * scale_init, dtype=_g.dtype)), _b.assign_add(tf.cast(-m_init * scale_init, dtype=_b.dtype))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_239": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_239": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_251": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_251": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_312": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_348": {
                "inputs": {
                    "value": "[tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "moments_385": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_386": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_417": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_465": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_474": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "moments_496": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_497": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_534": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_552": {
                "x": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_585": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_594": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "concat_618": {
                "values": {
                    "value": "[this, that]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "conv2d_134": {
                "input": {
                    "value": "input_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x",
                            "Name"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "g[None, None, None, :] * vnorm",
                            "BinOp"
                        ],
                        [
                            "g[None, None, None, :] * vnorm",
                            "BinOp"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "variable_scope_384": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_402": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_441": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_495": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_513": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_561": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_348": {
                "input_tensor": {
                    "value": "tf.log(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_398": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_509": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_622": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_100": {
                "x": {
                    "value": "g * scale_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_g.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_101": {
                "x": {
                    "value": "-m_init * scale_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_b.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_129": {
                "x": {
                    "value": "g * scale_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_g.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_130": {
                "x": {
                    "value": "-m_init * scale_init",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "_b.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_348": {
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_389": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_389": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_389": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_389": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_390": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_500": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_500": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_500": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_500": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_501": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_390": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_390": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_501": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_501": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "(g * vinvnorm)[None, :] * x0 + b[None, :]",
                            "BinOp"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(tf.nn.conv2d(input_x, W, [1, *stride, 1], pad), b)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flows_imagenet/launchers/imagenet64_5bit_official.py": {
        "tensorflow": {
            "get_variable_32": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "STORAGE_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initializer.astype(STORAGE_FLOATX.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(x, u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_135": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_580": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_582": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logp)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DEFAULT_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.reshape(x, [x.shape[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [num_units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [out_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_132": {
                "features": {
                    "value": "tf.concat([x, -x], axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, 3, heads, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_167": {
                "variable": {
                    "value": "(q_bhtd, k_bhtd, v_bhtd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(at_least_float32(w_bhtt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q_bhtd, k_bhtd, transpose_b=True) / np.sqrt(float(dim))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.nn.softmax(at_least_float32(w_bhtt)), dtype=x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_bhtd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_175": {
                "variable": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(w_bhtt, v_bhtd)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(a_bhtd, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a_bthd, [bs, timesteps, ch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, height, width, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_237": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_241": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_245": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W // 2, 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_274": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_283": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_300": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "make_template_339": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "make_template_404": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_414": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_426": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_446": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_521": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_531": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_543": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_563": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_604": {
                "variable": {
                    "value": "self.context_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "context_proc",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "deep_processor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_24": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_41": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=axis, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_42": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_62": {
                "x": {
                    "value": "tf.reciprocal(x) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_70": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_88": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_96": {
                "value": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_107": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_115": {
                "value": {
                    "value": "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_132": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_136": {
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_147": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_327": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_392": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_397": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_398": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_509": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_514": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_515": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_582": {
                "structure": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_583": {
                "x": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "identity_n_77": {
                "variable": {
                    "value": "(g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "[g, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_94": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_113": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_115": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_170": {
                "a": {
                    "value": "q_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "k_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "logits": {
                    "value": "at_least_float32(w_bhtt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_235": {
                "x": {
                    "value": "1.0 / x - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_236": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_242": {
                "x": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "space_to_depth_264": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depth_to_space_267": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W_half * 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_296": {
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_301": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_305": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 32)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_323": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_426": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_453": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_543": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_570": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_49": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_50": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "bcast_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (x.shape.ndims - 1) + [dim]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_62": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_67": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_71": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_73": {
                "control_inputs": {
                    "value": "[g.assign(scale_init), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_83": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_89": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_90": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_102": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_108": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, None, None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_218": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_218": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_230": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_230": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_291": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_327": {
                "inputs": {
                    "value": "[tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "moments_364": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_365": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_396": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_444": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_453": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "moments_475": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_476": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_513": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_561": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_570": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 32) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "concat_593": {
                "values": {
                    "value": "[this, that]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_381": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_420": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_474": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_492": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_537": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "tf.log(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_377": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_488": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_327": {
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_368": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_368": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_369": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_479": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_479": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_479": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_479": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_480": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_480": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_480": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 32) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flows_imagenet/launchers/imagenet64_official.py": {
        "tensorflow": {
            "get_variable_32": {
                "variable": {
                    "value": "v",
                    "type": "Name",
                    "possible_values": []
                },
                "name": {
                    "value": "var_name",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "STORAGE_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "initializer.astype(STORAGE_FLOATX.as_numpy_dtype)",
                            "Call"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reduce_mean_40": {
                "variable": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_mean_41": {
                "variable": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.squared_difference(x, u)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_120": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_127": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[np.prod(s[:-1]), s[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_128": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "split_135": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Normal_584": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "loc": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "scale": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_sum_586": {
                "variable": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logp)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_19": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "DEFAULT_FLOATX",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ],
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_sum_59": {
                "input_tensor": {
                    "value": "tf.reshape(x, [x.shape[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [num_units]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_129": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "s[:-1] + [out_dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "elu_132": {
                "features": {
                    "value": "tf.concat([x, -x], axis=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, 3, heads, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_166": {
                "variable": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[2, 0, 3, 1, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_167": {
                "variable": {
                    "value": "(q_bhtd, k_bhtd, v_bhtd)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "c",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + pos_emb[None, :, :, :]",
                            "BinOp"
                        ],
                        [
                            "nin(c, name='proj1', num_units=3 * ch, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.reshape(c, [bs, timesteps, 3, heads, dim])",
                            "Call"
                        ],
                        [
                            "tf.transpose(c, [2, 0, 3, 1, 4])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cast_171": {
                "variable": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.softmax(at_least_float32(w_bhtt))",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "x.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_173": {
                "variable": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "w_bhtt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(q_bhtd, k_bhtd, transpose_b=True) / np.sqrt(float(dim))",
                            "BinOp"
                        ],
                        [
                            "tf.cast(tf.nn.softmax(at_least_float32(w_bhtt)), dtype=x.dtype)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v_bhtd",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "transpose_175": {
                "variable": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "a_bhtd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(w_bhtt, v_bhtd)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_177": {
                "variable": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_bthd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.transpose(a_bhtd, [0, 2, 1, 3])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, timesteps, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_179": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "a_btc",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reshape(a_bthd, [bs, timesteps, ch])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, height, width, ch]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_237": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_241": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 256)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_245": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(logd, [int_shape(logd)[0], -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_273": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W // 2, 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unstack_274": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_283": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_300": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "make_template_339": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "make_template_404": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_416": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_428": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_448": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_523": {
                "variable": {
                    "value": "self.template",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "self.__class__.__name__",
                    "type": "Attribute",
                    "possible_values": []
                },
                "func_": {
                    "value": "f",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "exp_535": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_547": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_by_value_567": {
                "variable": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": []
                },
                "t": {
                    "value": "out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[x * g[None] + b[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "[(x - b[None]) / g[None] for (x, (g, b)) in zip(input_, g_and_b)]",
                            "ListComp"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.exp(mixlogistic_logcdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales))",
                            "Call"
                        ],
                        [
                            "tf.exp(s) * out + t",
                            "BinOp"
                        ],
                        [
                            "float_ef",
                            "Name"
                        ],
                        [
                            "tf.exp(-s) * (out - t)",
                            "BinOp"
                        ],
                        [
                            "tf.clip_by_value(out, 1e-05, 1.0 - 1e-05)",
                            "Call"
                        ],
                        [
                            "mixlogistic_invcdf(y=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-05",
                    "type": "Constant",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 - 1e-05",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "make_template_608": {
                "variable": {
                    "value": "self.context_proc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name_": {
                    "value": "context_proc",
                    "type": "Constant",
                    "possible_values": []
                },
                "func_": {
                    "value": "deep_processor",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "cast_24": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "squared_difference_41": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "u",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(x, axis=axis, keepdims=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_42": {
                "x": {
                    "value": "s + e",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[x.shape[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_62": {
                "x": {
                    "value": "tf.reciprocal(x) - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "moments_70": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "moments_88": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 256)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_96": {
                "value": {
                    "value": "tf.matmul(x, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_99": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "moments_107": {
                "variable": {
                    "value": "(m_init, v_init)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 256)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[0, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "bias_add_115": {
                "value": {
                    "value": "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_132": {
                "values": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "axis",
                    "type": "Name",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_136": {
                "x": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_139": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_147": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_153": {
                "name_or_scope": {
                    "value": "name",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "dropout_181": {
                "variable": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "c1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "conv(nonlinearity(x), name='c1', num_units=num_filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "c1 + nin(nonlinearity(a), name='a_proj', num_units=num_filters, init=init, ema=ema)",
                            "BinOp"
                        ],
                        [
                            "nonlinearity(c1)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(a_btc, [bs, height, width, ch])",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(c1, keep_prob=1.0 - dropout_p)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "1.0 - dropout_p",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "fill_327": {
                "variable": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": []
                },
                "dims": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_392": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_397": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_398": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_511": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W, C, 2 + 3 * components]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_516": {
                "variable": {
                    "value": "(ml_logits, ml_means, ml_logscales)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "x[:, :, :, :, 2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_or_size_splits": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "maximum_517": {
                "variable": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "ml_logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ],
                        [
                            "tf.maximum(ml_logscales, -7.0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_586": {
                "structure": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_587": {
                "x": {
                    "value": "logp",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Normal(0.0, 1.0).log_prob(eps)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logp), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "identity_n_77": {
                "variable": {
                    "value": "(g, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "[g, b]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_94": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_96": {
                "a": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_113": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_115": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('W', shape=[in_dim, num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('W', shape=[*filter_size, int(x.shape[-1]), num_units], initializer=tf.random_normal_initializer(0, 0.05), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, *stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "pad",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'SAME'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "matmul_170": {
                "a": {
                    "value": "q_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "b": {
                    "value": "k_bhtd",
                    "type": "Name",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_171": {
                "logits": {
                    "value": "at_least_float32(w_bhtt)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_235": {
                "x": {
                    "value": "1.0 / x - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_236": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_237": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_242": {
                "x": {
                    "value": "1.0 - y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_245": {
                "tensor": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[int_shape(logd)[0], -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "space_to_depth_264": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "depth_to_space_267": {
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 256)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                },
                "block_size": {
                    "value": "self.block_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_285": {
                "tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[B, H, W_half * 2, C]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_296": {
                "values": {
                    "value": "[a, b]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softplus_301": {
                "features": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_305": {
                "x": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.matmul(x, W)",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(x, W, [1, *stride, 1], pad)",
                            "Call"
                        ],
                        [
                            "tf.sigmoid(y)",
                            "Call"
                        ],
                        [
                            "(y - 0.05) / (0.9 / 256)",
                            "BinOp"
                        ],
                        [
                            "tf.sigmoid(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_323": {
                "variable": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "1e-10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_428": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_455": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "flatten_547": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "reduce_sum_574": {
                "input_tensor": {
                    "value": "tf.layers.flatten(logd)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_49": {
                "value": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_50": {
                "value": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reshape_53": {
                "tensor": {
                    "value": "b",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('b', shape=x.shape[1:], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "get_var('b', shape=[num_units], initializer=tf.constant_initializer(0.0), ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "bcast_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[1] * (x.shape.ndims - 1) + [dim]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reciprocal_62": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_66": {
                "value": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_67": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_71": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_73": {
                "control_inputs": {
                    "value": "[g.assign(scale_init), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_83": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_84": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_89": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_90": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "random_normal_initializer_102": {
                "mean": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "constant_initializer_103": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_108": {
                "x": {
                    "value": "v_init + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "control_dependencies_109": {
                "control_inputs": {
                    "value": "[W.assign(W * scale_init[None, None, None, :]), b.assign(-m_init * scale_init)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_218": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_218": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_230": {
                "inputs": {
                    "value": "logd_terms",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "constant_230": {
                "value": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "split_291": {
                "value": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_n_327": {
                "inputs": {
                    "value": "[tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "moments_364": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_365": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_396": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_413": {
                "x": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_446": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_455": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "moments_477": {
                "variable": {
                    "value": "(xmean, xvar)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(len(x.get_shape())))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Print_478": {
                "variable": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": []
                },
                "input_": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "[tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))]",
                    "type": "List",
                    "possible_values": []
                },
                "message": {
                    "value": "'{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name)",
                    "type": "Call",
                    "possible_values": []
                },
                "summarize": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tanh_515": {
                "x": {
                    "value": "x[:, :, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_532": {
                "x": {
                    "value": "m",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_565": {
                "x": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "flatten_574": {
                "structure": {
                    "value": "logd",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.log(0.9 / 256) + tf.nn.softplus(x) + tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "tf.log(y) + tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "logd + invscale_logd",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_sum(tf.reshape(logd, [int_shape(logd)[0], -1]), 1)",
                            "Call"
                        ],
                        [
                            "-tf.nn.softplus(x) - tf.nn.softplus(-x)",
                            "BinOp"
                        ],
                        [
                            "-tf.log(y) - tf.log(1.0 - y)",
                            "BinOp"
                        ],
                        [
                            "tf.fill([bs], tf.add_n([tf.reduce_sum(tf.log(g)) for (g, _) in g_and_b]))",
                            "Call"
                        ],
                        [
                            "-logd",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ],
                        [
                            "mixlogistic_logpdf(x=float_ef, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logpdf(x=out, prior_logits=ml_logits, means=ml_means, logscales=ml_logscales)",
                            "Call"
                        ],
                        [
                            "-tf.reduce_sum(tf.layers.flatten(logd), axis=1)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "concat_597": {
                "values": {
                    "value": "[this, that]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_363": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_381": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_422": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_476": {
                "name_or_scope": {
                    "value": "debug",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "variable_scope_494": {
                "name_or_scope": {
                    "value": "'block{}'.format(i_block)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_541": {
                "x": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.reduce_mean(tf.squared_difference(x, u), axis=axis, keepdims=True)",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ],
                        [
                            "x.shape.as_list()",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_327": {
                "input_tensor": {
                    "value": "tf.log(g)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "random_normal_initializer_377": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "random_normal_initializer_490": {
                "stddev": {
                    "value": "0.01",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_327": {
                "x": {
                    "value": "g",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_var('g', shape=x.shape[1:], initializer=tf.constant_initializer(1.0), ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.maximum(g, 1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_368": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_368": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_368": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_369": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_481": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_481": {
                "x": {
                    "value": "xvar",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "reduce_min_481": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_481": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_any_482": {
                "input_tensor": {
                    "value": "tf.is_inf(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_nan_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_369": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_nan_482": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_inf_482": {
                "x": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - u) * tf.rsqrt(s + e)",
                            "BinOp"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.identity(x)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "dense(x, num_units=num_units, **kwargs)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [np.prod(s[:-1]), s[-1]])",
                            "Call"
                        ],
                        [
                            "tf.matmul(x, w)",
                            "Call"
                        ],
                        [
                            "x * (0.9 / 256) + 0.05",
                            "BinOp"
                        ],
                        [
                            "-tf.log(1.0 / x - 1.0)",
                            "UnaryOp"
                        ],
                        [
                            "tf.reshape(x, [B, H, W // 2, 2, C])",
                            "Call"
                        ],
                        [
                            "tf.stack([a, b], axis=3)",
                            "Call"
                        ],
                        [
                            "inverse_sigmoid(y)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "conv2d(x, name='c1', num_units=filters, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "tf.Print(x, [tf.shape(x), xmean, tf.sqrt(xvar), tf.reduce_min(x), tf.reduce_max(x), tf.reduce_any(tf.is_nan(x)), tf.reduce_any(tf.is_inf(x))], message='{} (shape/mean/std/min/max/nan/inf) '.format(self.template.variable_scope.name), summarize=10)",
                            "Call"
                        ],
                        [
                            "nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "(nin if use_final_nin else conv2d)(x, name='c2', num_units=C * (2 + 3 * components), init_scale=init_scale, init=init, ema=ema)",
                            "Call"
                        ],
                        [
                            "gated_resnet(x, name='conv', a=context, use_nin=use_nin, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "tf.reshape(x, [B, H, W, C, 2 + 3 * components])",
                            "Call"
                        ],
                        [
                            "at_least_float32(x)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln1', ema=ema)",
                            "Call"
                        ],
                        [
                            "attn(x, name='attn', pos_emb=pos_emb, heads=attn_heads, init=init, ema=ema, dropout_p=dropout_p)",
                            "Call"
                        ],
                        [
                            "norm(x, name='ln2', ema=ema)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "flows_imagenet/logistic.py": {
        "tensorflow": {
            "placeholder_28": {
                "variable": {
                    "value": "in_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "in_means",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_30": {
                "variable": {
                    "value": "in_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_79": {
                "variable": {
                    "value": "in_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_80": {
                "variable": {
                    "value": "in_prior_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "in_means",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_82": {
                "variable": {
                    "value": "in_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "argmax_114": {
                "variable": {
                    "value": "sampled_inds",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "prior_logits - tf.log(-tf.log(tf.random_uniform(tf.shape(prior_logits), minval=1e-05, maxval=1.0 - 1e-05)))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "one_hot_118": {
                "variable": {
                    "value": "sampled_onehot",
                    "type": "Name",
                    "possible_values": []
                },
                "indices": {
                    "value": "sampled_inds",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.argmax(prior_logits - tf.log(-tf.log(tf.random_uniform(tf.shape(prior_logits), minval=1e-05, maxval=1.0 - 1e-05))), axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "tf.shape(prior_logits)[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_120": {
                "variable": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "means * sampled_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "variable": {
                    "value": "logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logscales * sampled_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_153": {
                "variable": {
                    "value": "init_x",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_154": {
                "variable": {
                    "value": "maxscales",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.exp(logscales)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "reduce_min_155": {
                "variable": {
                    "value": "init_lb",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "means - 50 * maxscales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_max_156": {
                "variable": {
                    "value": "init_ub",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "means + 50 * maxscales",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_157": {
                "variable": {
                    "value": "init_diff",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "while_loop_159": {
                "variable": {
                    "value": "(out_x, _, _, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cond": {
                    "value": "lambda _x, _lb, _ub, last_diff: last_diff > tol",
                    "type": "Lambda",
                    "possible_values": []
                },
                "body": {
                    "value": "body",
                    "type": "Name",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "(init_x, init_lb, init_ub, init_diff)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "maximum_iterations": {
                    "value": "max_bisection_iters",
                    "type": "Name",
                    "possible_values": [
                        [
                            "500",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "placeholder_177": {
                "variable": {
                    "value": "in_x",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_178": {
                "variable": {
                    "value": "in_prior_logits",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_179": {
                "variable": {
                    "value": "in_means",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_180": {
                "variable": {
                    "value": "in_logscales",
                    "type": "Name",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                },
                "shape": {
                    "value": "[n, d]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_185": {
                "variable": {
                    "value": "err",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(out_inv_cdf - in_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_sigmoid_20": {
                "x": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - mean) * tf.exp(-logscale)",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.exp(-logscale)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reset_default_graph_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_logsumexp_57": {
                "input_tensor": {
                    "value": "tf.nn.log_softmax(prior_logits, axis=-1) + logistic_logpdf(x=tf.expand_dims(x, -1), mean=means, logscale=logscales)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reduce_logsumexp_68": {
                "input_tensor": {
                    "value": "tf.nn.log_softmax(prior_logits, axis=-1) + logistic_logcdf(x=tf.expand_dims(x, -1), mean=means, logscale=logscales)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reset_default_graph_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Assert_130": {
                "condition": {
                    "value": "tf.logical_and(tf.greater_equal(tf.reduce_min(x), min), tf.less_equal(tf.reduce_max(x), max))",
                    "type": "Call",
                    "possible_values": []
                },
                "data": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "identity_141": {
                "variable": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_144": {
                "variable": {
                    "value": "cur_y",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "mixlogistic_logcdf(x=x, prior_logits=prior_logits, means=means, logscales=logscales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_145": {
                "variable": {
                    "value": "gt",
                    "type": "Name",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.greater(cur_y, y)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "Name",
                    "possible_values": [
                        [
                            "y.dtype",
                            "Attribute"
                        ],
                        [
                            "tf.float64",
                            "Attribute"
                        ]
                    ]
                }
            },
            "reduce_max_150": {
                "variable": {
                    "value": "diff",
                    "type": "Name",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.abs(new_x - x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reset_default_graph_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_10": {
                "x": {
                    "value": "-logscale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_19": {
                "x": {
                    "value": "-logscale",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Session_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_123": {
                "input": {
                    "value": "means",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-1.0, 0.0, 1]",
                            "List"
                        ],
                        [
                            "tf.reduce_sum(means * sampled_onehot, axis=-1)",
                            "Call"
                        ],
                        [
                            "[-1.0, 0.0, 1]",
                            "List"
                        ]
                    ]
                }
            },
            "logical_and_130": {
                "x": {
                    "value": "tf.greater_equal(tf.reduce_min(x), min)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.less_equal(tf.reduce_max(x), max)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "control_dependencies_140": {
                "control_inputs": {
                    "value": "[assert_in_range(y, min=0.0, max=1.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_154": {
                "x": {
                    "value": "logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-5.0, 0.0, 0.2]",
                            "List"
                        ],
                        [
                            "tf.reduce_sum(logscales * sampled_onehot, axis=-1)",
                            "Call"
                        ],
                        [
                            "[-5.0, 0.0, 0.2]",
                            "List"
                        ]
                    ]
                }
            },
            "abs_185": {
                "x": {
                    "value": "out_inv_cdf - in_x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_11": {
                "features": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(x - mean) * tf.exp(-logscale)",
                            "BinOp"
                        ],
                        [
                            "(x - mean) * tf.exp(-logscale)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_softmax_58": {
                "logits": {
                    "value": "prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ],
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_69": {
                "logits": {
                    "value": "prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ],
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_115": {
                "x": {
                    "value": "tf.random_uniform(tf.shape(prior_logits), minval=1e-05, maxval=1.0 - 1e-05)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_118": {
                "input": {
                    "value": "prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ],
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_124": {
                "x": {
                    "value": "logscales",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[-5.0, 0.0, 0.2]",
                            "List"
                        ],
                        [
                            "tf.reduce_sum(logscales * sampled_onehot, axis=-1)",
                            "Call"
                        ],
                        [
                            "[-5.0, 0.0, 0.2]",
                            "List"
                        ]
                    ]
                }
            },
            "greater_equal_131": {
                "x": {
                    "value": "tf.reduce_min(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "min",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "less_equal_132": {
                "x": {
                    "value": "tf.reduce_max(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "max",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "greater_145": {
                "x": {
                    "value": "cur_y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.exp(mixlogistic_logcdf(x=x, prior_logits=prior_logits, means=means, logscales=logscales))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "y",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.identity(y)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_150": {
                "x": {
                    "value": "new_x - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_183": {
                "x": {
                    "value": "out_logcdf",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logistic_logcdf(x=in_x, mean=in_means, logscale=in_logscales)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logcdf(x=in_x, prior_logits=in_prior_logits, means=in_means, logscales=in_logscales)",
                            "Call"
                        ],
                        [
                            "mixlogistic_logcdf(x=in_x, **logistic_args)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_124": {
                "x": {
                    "value": "1.0 - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_min_131": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(logscales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_max_132": {
                "input_tensor": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(logscales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "expand_dims_59": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(logscales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_70": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "means + tf.exp(logscales) * (tf.log(u) - tf.log(1.0 - u))",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_115": {
                "input": {
                    "value": "prior_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ],
                        [
                            "[0.1, 0.2, 4]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "flows_imagenet/utils.py": {
        "tensorflow": {
            "Summary_43": {
                "variable": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": []
                },
                "value": {
                    "value": "[summary_val(k, v) for (k, v) in kvs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Event_44": {
                "variable": {
                    "value": "event",
                    "type": "Name",
                    "possible_values": []
                },
                "wall_time": {
                    "value": "time.time()",
                    "type": "Call",
                    "possible_values": []
                },
                "summary": {
                    "value": "summary",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tf.Summary(value=[summary_val(k, v) for (k, v) in kvs])",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_71": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "as_bytes_18": {
                "bytes_or_text": {
                    "value": "path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "osp.join(osp.abspath(dir), prefix)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}