{
    "adv_train/cifar10/spade.py": {
        "sklearn": {}
    },
    "Robustness_Eval/CLEVER/collect_gradients.py": {
        "tensorflow": {
            "ConfigProto_96": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_95": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args['seed']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Session_98": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/CLEVER/defense.py": {
        "tensorflow": {
            "placeholder_161": {
                "variable": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "quilt_db_reshaped.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "query_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(TILE_SIZE * TILE_SIZE * 3, None)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "top_k_165": {
                "variable": {
                    "value": "(_, topk_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "-tf.transpose(norms)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "k": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "sorted": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "to_float_314": {
                "variable": {
                    "value": "x_size",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_323": {
                "values": {
                    "value": "[randomizing_crop(x) for _ in range(ensemble_size)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "crop_and_resize_320": {
                "image": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                },
                "boxes": {
                    "value": "[[start_y, start_x, start_y + frac, start_x + frac]]",
                    "type": "List",
                    "possible_values": []
                },
                "box_ind": {
                    "value": "[0]",
                    "type": "List",
                    "possible_values": []
                },
                "crop_size": {
                    "value": "[crop_size, crop_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_163": {
                "input_tensor": {
                    "value": "tf.square(db_tensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_164": {
                "a": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, quilt_db_reshaped.shape)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "query_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, (TILE_SIZE * TILE_SIZE * 3, None))",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_165": {
                "a": {
                    "value": "norms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.square(db_tensor), axis=1)[:, tf.newaxis] - 2 * tf.matmul(db_tensor, query_imgs)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "square_163": {
                "x": {
                    "value": "db_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, quilt_db_reshaped.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/CLEVER/estimate_gradient_norm.py": {
        "tensorflow": {
            "placeholder_155": {
                "variable": {
                    "value": "self.img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.image_size, model.image_size, model.num_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "self.true_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_161": {
                "variable": {
                    "value": "self.target_label",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_169": {
                "variable": {
                    "value": "grad_op_rs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.grad_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(self.grad_op)[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_170": {
                "variable": {
                    "value": "self.grad_2_norm_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad_op_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.grad_op, (tf.shape(self.grad_op)[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_171": {
                "variable": {
                    "value": "self.grad_1_norm_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad_op_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.grad_op, (tf.shape(self.grad_op)[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_172": {
                "variable": {
                    "value": "self.grad_inf_norm_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "grad_op_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.grad_op, (tf.shape(self.grad_op)[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "ord": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_181": {
                "variable": {
                    "value": "self.randv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, model.image_size, model.image_size, model.num_channels]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_185": {
                "variable": {
                    "value": "hv_op_rs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hv_op_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [self.randv])[0]",
                            "Subscript"
                        ],
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [randv])[0] - tf.multiply(tfconst, randv)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(hv_op_tmp)[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_187": {
                "variable": {
                    "value": "self.hv_norm_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hv_op_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hv_op_tmp, (tf.shape(hv_op_tmp)[0], -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(hv_op_tmp, (tf.shape(hv_op_tmp)[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_191": {
                "variable": {
                    "value": "self.hv_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hv_op_rs_normalize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hv_op_rs / self.hv_norm_op",
                            "BinOp"
                        ],
                        [
                            "hv_op_rs / hv_norm_op",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(hv_op_tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_195": {
                "variable": {
                    "value": "randv_rs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.randv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(tf.shape(self.randv)[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_197": {
                "variable": {
                    "value": "self.randv_norm_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "randv_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.randv, (tf.shape(self.randv)[0], -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(randv, (tf.shape(randv)[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_200": {
                "variable": {
                    "value": "self.vhv_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(randv_rs, hv_op_rs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_229": {
                "variable": {
                    "value": "it",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "while_loop_231": {
                "variable": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "cond_element.all()",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[it, self.randv, self.vhv_op, self.eig_est, tf.constant(0.0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_233": {
                "variable": {
                    "value": "self.shiftconst",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "()",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "while_loop_234": {
                "variable": {
                    "value": "result_1",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Constant"
                        ],
                        [
                            "cond_element.all()",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "body",
                    "type": "variable",
                    "possible_values": []
                },
                "loop_vars": {
                    "value": "[it, self.randv, self.vhv_op, self.eig_est, self.shiftconst]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_244": {
                "variable": {
                    "value": "self.while_eig_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "result_1[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "result_1[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gradients_167": {
                "ys": {
                    "value": "self.objective",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.img",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_208": {
                "variable": {
                    "value": "norm_diff",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "eig_est - eig_est_prev",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_216": {
                "variable": {
                    "value": "hv_op_rs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hv_op_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [self.randv])[0]",
                            "Subscript"
                        ],
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [randv])[0] - tf.multiply(tfconst, randv)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(hv_op_tmp)[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_217": {
                "variable": {
                    "value": "hv_norm_op",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hv_op_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hv_op_tmp, (tf.shape(hv_op_tmp)[0], -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(hv_op_tmp, (tf.shape(hv_op_tmp)[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_219": {
                "variable": {
                    "value": "hv_op",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "hv_op_rs_normalize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hv_op_rs / self.hv_norm_op",
                            "BinOp"
                        ],
                        [
                            "hv_op_rs / hv_norm_op",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(hv_op_tmp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_221": {
                "variable": {
                    "value": "randv_rs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "randv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*input_image.shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(tf.shape(randv)[0], -1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "norm_222": {
                "variable": {
                    "value": "randv_norm_op",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "randv_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.randv, (tf.shape(self.randv)[0], -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(randv, (tf.shape(randv)[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_223": {
                "variable": {
                    "value": "vhv_op",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.multiply(randv_rs, hv_op_rs)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_191": {
                "input": {
                    "value": "hv_op_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [self.randv])[0]",
                            "Subscript"
                        ],
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [randv])[0] - tf.multiply(tfconst, randv)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_200": {
                "x": {
                    "value": "randv_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.randv, (tf.shape(self.randv)[0], -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(randv, (tf.shape(randv)[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hv_op_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hv_op_tmp, (tf.shape(hv_op_tmp)[0], -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(hv_op_tmp, (tf.shape(hv_op_tmp)[0], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_203": {
                "x": {
                    "value": "self.randv_norm_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logical_and_209": {
                "x": {
                    "value": "it < 500",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "norm_diff > 0.001",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "shape_169": {
                "input": {
                    "value": "self.grad_op",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "multiply_215": {
                "x": {
                    "value": "tfconst",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "randv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*input_image.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_219": {
                "input": {
                    "value": "hv_op_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [self.randv])[0]",
                            "Subscript"
                        ],
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [randv])[0] - tf.multiply(tfconst, randv)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "multiply_223": {
                "x": {
                    "value": "randv_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(self.randv, (tf.shape(self.randv)[0], -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(randv, (tf.shape(randv)[0], -1))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "hv_op_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(hv_op_tmp, (tf.shape(hv_op_tmp)[0], -1))",
                            "Call"
                        ],
                        [
                            "tf.reshape(hv_op_tmp, (tf.shape(hv_op_tmp)[0], -1))",
                            "Call"
                        ]
                    ]
                }
            },
            "square_225": {
                "x": {
                    "value": "randv_norm_op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.norm(randv_rs, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_231": {
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "shape_185": {
                "input": {
                    "value": "hv_op_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [self.randv])[0]",
                            "Subscript"
                        ],
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [randv])[0] - tf.multiply(tfconst, randv)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_195": {
                "input": {
                    "value": "self.randv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_216": {
                "input": {
                    "value": "hv_op_tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [self.randv])[0]",
                            "Subscript"
                        ],
                        [
                            "gradients_impl._hessian_vector_product(self.objective, [self.img], [randv])[0] - tf.multiply(tfconst, randv)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_221": {
                "input": {
                    "value": "randv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.randn(*input_image.shape)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/CLEVER/nlayer_model.py": {
        "tensorflow": {
            "Sequential_30": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_40": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Session_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Flatten_31": {
                "input_shape": {
                    "value": "(image_size, image_size, image_channel)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_36": {
                "units": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Name"
                        ]
                    ]
                }
            },
            "Activation_39": {
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_44": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/CLEVER/setup_cifar.py": {
        "tensorflow": {
            "Sequential_108": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_96": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_110": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_112": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "activation",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_113": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_114": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "activation",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_115": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_117": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_118": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "activation",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_119": {
                "filters": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_120": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "activation",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_121": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_124": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_125": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "activation",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_126": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_127": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "activation",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_128": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_153": {
                "input_shape": {
                    "value": "(32, 32, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_154": {
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_155": {
                "activation": {
                    "value": "softplus",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_156": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_130": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_159": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/CLEVER/setup_imagenet.py": {
        "tensorflow": {
            "GFile_177": {
                "variable": {
                    "value": "proto_as_ascii",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'labels.txt')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "GraphDef_201": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_219": {
                "variable": {
                    "value": "self.img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.image_size, self.image_size, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DEFINE_string_480": {
                "name": {
                    "value": "model_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "tmp/imagenet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to classify_image_graph_def.pb, imagenet_synset_to_human_label_map.txt, and imagenet_2012_challenge_label_map_proto.pbtxt.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_485": {
                "name": {
                    "value": "image_file",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Absolute path to image file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_487": {
                "name": {
                    "value": "model_name",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "resnet_v2_101",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Absolute path to image file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_489": {
                "name": {
                    "value": "num_top_predictions",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "Display this many predictions.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "run_491": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FastGFile_198": {
                "name": {
                    "value": "os.path.join(FLAGS.model_dir, model_param['model_filename'])",
                    "type": "Call",
                    "possible_values": []
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "import_graph_def_222": {
                "variable": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "LOADED_GRAPH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "graph_def",
                            "Name"
                        ]
                    ]
                },
                "input_map": {
                    "value": "{self.input_name: self.img}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[self.output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "import_graph_def_325": {
                "variable": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "LOADED_GRAPH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "graph_def",
                            "Name"
                        ]
                    ]
                },
                "input_map": {
                    "value": "{self.input_name: img, self.shape_name: shape}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[self.output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "import_graph_def_335": {
                "variable": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "LOADED_GRAPH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "graph_def",
                            "Name"
                        ]
                    ]
                },
                "input_map": {
                    "value": "{self.input_name: img}",
                    "type": "Dict",
                    "possible_values": []
                },
                "return_elements": {
                    "value": "[self.output_name]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Session_377": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_172": {
                "filename": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'labels.txt')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "fatal_173": {
                "msg": {
                    "value": "File does not exist %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "label_lookup_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(FLAGS.model_dir, 'labels.txt')",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "softmax_229": {
                "variable": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reverse_309": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "img.resize((img_size, size_1), PIL.Image.ANTIALIAS)",
                            "Call"
                        ],
                        [
                            "img.resize((size_0, img_size), PIL.Image.ANTIALIAS)",
                            "Call"
                        ],
                        [
                            "Image.open(f)",
                            "Call"
                        ],
                        [
                            "np.array(transformed_img) / 255.0 - 0.5",
                            "BinOp"
                        ],
                        [
                            "np.repeat(np.expand_dims(img, axis=2), 3, axis=2)",
                            "Call"
                        ],
                        [
                            "(0.5 + img) * 255.0",
                            "BinOp"
                        ],
                        [
                            "img - imagenet_mean",
                            "BinOp"
                        ],
                        [
                            "tf.reverse(img, axis=[-1])",
                            "Call"
                        ],
                        [
                            "(0.5 + img) * 255.0",
                            "BinOp"
                        ],
                        [
                            "(0.5 + img) * 255.0",
                            "BinOp"
                        ],
                        [
                            "img * 0.017",
                            "BinOp"
                        ],
                        [
                            "img * 2.0",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softmax_332": {
                "variable": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_342": {
                "variable": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.softmax_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/CLEVER/setup_mnist.py": {
        "tensorflow": {
            "Sequential_79": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_123": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_162": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_166": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_169": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_174": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_176": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_208": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_209": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_211": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_212": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_215": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_220": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_222": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_69": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2D_81": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_83": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_84": {
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_85": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_86": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2D_88": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_89": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2D_90": {
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Activation_91": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "MaxPooling2D_92": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Flatten_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dense_95": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_96": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_97": {
                "units": {
                    "value": "200",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Activation_98": {
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "bounded_relu",
                            "Name"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ],
                        [
                            "'relu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dense_99": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Flatten_124": {
                "input_shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Dense_125": {
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Lambda_126": {
                "function": {
                    "value": "lambda x: x * 10",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Activation_127": {
                "activation": {
                    "value": "softplus",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Lambda_128": {
                "function": {
                    "value": "lambda x: x * 0.1",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "Dense_129": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_152": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPooling2D_168": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_171": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_198": {
                "features": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "max_value": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPooling2D_214": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_217": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Activation_102": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_132": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/examples/eval_tf1.py": {
        "tensorflow": {
            "Sequential_86": {
                "variable": {
                    "value": "clf_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GPUOptions_118": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_119": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.compat.v1.ConfigProto(gpu_options=gpu_options)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Model_139": {
                "variable": {
                    "value": "atk_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf_model.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "tf_model.get_layer(index=-2).output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "y_input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "load_data_32": {
                "variable": {
                    "value": "((trainX, trainY), (testX, testY))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_38": {
                "variable": {
                    "value": "trainY",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.to_categorical(trainY, self.n_class)",
                            "Call"
                        ],
                        [
                            "trainY[:training_size, :]",
                            "Subscript"
                        ],
                        [
                            "trainY",
                            "Name"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_categorical_39": {
                "variable": {
                    "value": "testY",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "testY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(testY, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(testY, self.n_class)",
                            "Call"
                        ],
                        [
                            "testY",
                            "Name"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clear_session_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_session_120": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(gpu_options=gpu_options))",
                            "Call"
                        ]
                    ]
                }
            },
            "Input_72": {
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "model/input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_73": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/c1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_74": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/c2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_75": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/p1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_76": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/c3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_77": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/c4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_78": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/p2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_79": {
                "name": {
                    "value": "clf/f1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_80": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/d1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_81": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/d2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_82": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ConfigProto_119": {
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(allow_growth=True)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_130": {
                "variable": {
                    "value": "torch_testX",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(testX, (0, 3, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_131": {
                "variable": {
                    "value": "torch_testY",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "testY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(testY, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(testY, self.n_class)",
                            "Call"
                        ],
                        [
                            "testY",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/examples/eval_tf2.py": {
        "tensorflow": {
            "Sequential_86": {
                "variable": {
                    "value": "clf_model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_physical_devices_117": {
                "variable": {
                    "value": "gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "device_type": {
                    "value": "GPU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Model_137": {
                "variable": {
                    "value": "atk_model",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf_model.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "outputs": {
                    "value": "tf_model.get_layer(index=-2).output",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_data_32": {
                "variable": {
                    "value": "((trainX, trainY), (testX, testY))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_categorical_38": {
                "variable": {
                    "value": "trainY",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "trainY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.utils.to_categorical(trainY, self.n_class)",
                            "Call"
                        ],
                        [
                            "trainY[:training_size, :]",
                            "Subscript"
                        ],
                        [
                            "trainY",
                            "Name"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_categorical_39": {
                "variable": {
                    "value": "testY",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "testY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(testY, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(testY, self.n_class)",
                            "Call"
                        ],
                        [
                            "testY",
                            "Name"
                        ]
                    ]
                },
                "num_classes": {
                    "value": "self.n_class",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Input_72": {
                "shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "model/input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_73": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/c1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_74": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/c2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_75": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/p1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_76": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/c3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2D_77": {
                "filters": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/c4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_78": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/p2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_79": {
                "name": {
                    "value": "clf/f1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_80": {
                "units": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/d1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_81": {
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "he_normal",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf/d2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Activation_82": {
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "clf_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_memory_growth_119": {
                "device": {
                    "value": "gpu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gpus",
                            "Name"
                        ]
                    ]
                },
                "enable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_128": {
                "variable": {
                    "value": "torch_testX",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.transpose(testX, (0, 3, 1, 2))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "torch_testY",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "testY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.argmax(testY, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.keras.utils.to_categorical(testY, self.n_class)",
                            "Call"
                        ],
                        [
                            "testY",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/fab_tf.py": {
        "tensorflow": {},
        "torch": {
            "max_78": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_111": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_116": {
                "variable": {
                    "value": "indp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(t.shape).to(self.device) * c5 - t * (2 * c5 - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_124": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cumsum_128": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_138": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_140": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(w.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_141": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_166": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(b[c2] - sb[c2, lb]) / -s[c2, lb]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_166": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_185": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_185": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_187": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_188": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_189": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_190": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_193": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "variable": {
                    "value": "rs2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rs[:, 1:], torch.zeros(rs.shape[0], 1).to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_205": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((-w5.squeeze() * rs[:, 0]).unsqueeze(1), torch.cumsum((-rs2 + rs) * ws, dim=1) - w5 * rs[:, 0].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_217": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_219": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(w.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_220": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_235": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_263": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_264": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_265": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_266": {
                "variable": {
                    "value": "(_, indr_rev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_268": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_268": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_269": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_272": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_274": {
                "variable": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c.unsqueeze(-1), ds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_275": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((c.unsqueeze(-1), ds), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_284": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(s.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_285": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_344": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_348": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_533": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_537": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_144": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_161": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(b[c_l] - sb[c_l, -1]) / -s[c_l, -1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_161": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_223": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_288": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumsum_129": {
                "input": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ws * d[u.unsqueeze(1), indp2]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_139": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_140": {
                "input": {
                    "value": "torch.tensor(w.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_202": {
                "input": {
                    "value": "w3s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w3[u, indr]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_218": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_219": {
                "input": {
                    "value": "torch.tensor(w.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_283": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_284": {
                "input": {
                    "value": "torch.tensor(s.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_347": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_536": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_686": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_691": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_692": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_90": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_115": {
                "*size": {
                    "value": "t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_140": {
                "data": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_169": {
                "input": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max((b[c_l] - sb[c_l, -1]) / -s[c_l, -1], torch.zeros(sb[c_l, -1].shape).to(self.device)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.max((b[c2] - sb[c2, lb]) / -s[c2, lb], torch.zeros(sb[c2, lb].shape).to(self.device)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_170": {
                "input": {
                    "value": "-lmbd_opt",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_195": {
                "*size": {
                    "value": "rs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_219": {
                "data": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_243": {
                "input": {
                    "value": "ws[c2, lb] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_264": {
                "*size": {
                    "value": "r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_284": {
                "data": {
                    "value": "s.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_426": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_427": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_437": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_441": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_619": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_620": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_630": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_634": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_167": {
                "*size": {
                    "value": "sb[c2, lb].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_206": {
                "input": {
                    "value": "(-rs2 + rs) * ws",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_365": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_389": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_554": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_578": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_707": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.model.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_162": {
                "*size": {
                    "value": "sb[c_l, -1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_376": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_565": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_734": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.model.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_88": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_89": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_356": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_413": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_414": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_415": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_437": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_441": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_444": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_545": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_606": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_607": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_608": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_630": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_634": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_637": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_418": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_419": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_420": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_442": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_611": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_612": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_613": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_635": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_357": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_357": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_423": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_424": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_425": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_546": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_546": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_616": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_617": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_618": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_366": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_366": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_555": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_555": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_377": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_377": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_566": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_566": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_358": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_547": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_367": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_556": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_378": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_567": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/utils_tf.py": {
        "tensorflow": {
            "sort_91": {
                "variable": {
                    "value": "x_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_92": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.logits, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_99": {
                "variable": {
                    "value": "x_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_100": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.logits, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_101": {
                "variable": {
                    "value": "y_target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_20": {
                "variable": {
                    "value": "self.xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_29": {
                "variable": {
                    "value": "self.y_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_33": {
                "variable": {
                    "value": "self.la",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_34": {
                "variable": {
                    "value": "self.la_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "one_hot_35": {
                "variable": {
                    "value": "la_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.la",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_36": {
                "variable": {
                    "value": "la_target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "self.la_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_37": {
                "variable": {
                    "value": "la_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "la_mask * self.logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_38": {
                "variable": {
                    "value": "la_target_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "la_target_mask * self.logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_22": {
                "ys": {
                    "value": "self.xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_26": {
                "ys": {
                    "value": "self.dlr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_31": {
                "ys": {
                    "value": "self.dlr_target",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "gradients_40": {
                "ys": {
                    "value": "self.diff_logits",
                    "type": "Attribute",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_102": {
                "input_tensor": {
                    "value": "x * y_target_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_17": {
                "ys": {
                    "value": "self.logits[:, cl]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_46": {
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.logits, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grads, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "np.moveaxis(np.array(g2), 0, 1)",
                            "Call"
                        ],
                        [
                            "np.transpose(g2, (0, 1, 4, 2, 3))",
                            "Call"
                        ],
                        [
                            "np.transpose(np.array(g2), (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_63": {
                "ndarray": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.sess.run(self.grads, {self.x_input: x2})",
                            "Call"
                        ],
                        [
                            "np.moveaxis(np.array(g2), 0, 1)",
                            "Call"
                        ],
                        [
                            "np.transpose(g2, (0, 1, 4, 2, 3))",
                            "Call"
                        ],
                        [
                            "np.transpose(np.array(g2), (0, 3, 1, 2))",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_71": {
                "ndarray": {
                    "value": "grad_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_79": {
                "ndarray": {
                    "value": "grad_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_88": {
                "ndarray": {
                    "value": "grad_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ],
                        [
                            "np.moveaxis(grad_val, 3, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/utils_tf2.py": {
        "tensorflow": {
            "sort_197": {
                "variable": {
                    "value": "x_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_198": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__get_logits(x2).numpy()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sort_205": {
                "variable": {
                    "value": "x_sort",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "one_hot_206": {
                "variable": {
                    "value": "y_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__get_logits(x2).numpy()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "one_hot_207": {
                "variable": {
                    "value": "y_target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "y_target",
                    "type": "variable",
                    "possible_values": []
                },
                "depth": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sparse_softmax_cross_entropy_with_logits_56": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.tf_model(x_input, training=False)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x_input)",
                            "Call"
                        ],
                        [
                            "self.__get_logits(x)",
                            "Call"
                        ]
                    ]
                },
                "labels": {
                    "value": "y_input",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "one_hot_106": {
                "variable": {
                    "value": "la_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "la",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "one_hot_107": {
                "variable": {
                    "value": "la_target_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "la_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_target.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "depth": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_120": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_129": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_140": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_155": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_156": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y.clone().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_169": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_170": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y.clone().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_183": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_184": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y.clone().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_185": {
                "variable": {
                    "value": "y_targ",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "y_target.clone().cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_51": {
                "variable": {
                    "value": "jacobian",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "jacobian",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.batch_jacobian(logits, x_input)",
                            "Call"
                        ],
                        [
                            "tf.transpose(jacobian, perm=[0, 1, 4, 2, 3])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 4, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "variable": {
                    "value": "difflogits",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(la_target_mask - la_mask) * logits",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_122": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_131": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_142": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_149": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "g.gradient(difflogits, x)",
                            "Call"
                        ],
                        [
                            "self.__get_jacobian(x2)",
                            "Call"
                        ],
                        [
                            "tf.transpose(g2, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_158": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_163": {
                "variable": {
                    "value": "grad_val",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grad_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_172": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_177": {
                "variable": {
                    "value": "grad_val",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grad_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_187": {
                "variable": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(x.cpu().numpy(), dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.transpose(x2, perm=[0, 2, 3, 1])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 3, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_192": {
                "variable": {
                    "value": "grad_val",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "grad_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ],
                        [
                            "tf.transpose(grad_val, perm=[0, 3, 1, 2])",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 3, 1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GradientTape_44": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_62": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_78": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_94": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GradientTape_109": {
                "watch_accessed_variables": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_208": {
                "input_tensor": {
                    "value": "x * y_target_onehot",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_126": {
                "ndarray": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.__get_logits(x2).numpy()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_134": {
                "ndarray": {
                    "value": "g2.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "ndarray": {
                    "value": "g2.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_165": {
                "ndarray": {
                    "value": "grad_val.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_179": {
                "ndarray": {
                    "value": "grad_val.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "grad_val.numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/mnist/eval.py": {
        "tensorflow": {
            "get_or_create_global_step_53": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_65": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_66": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "eval_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'eval')",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_129": {
                "variable": {
                    "value": "cur_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['model_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Summary_113": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='xent adv eval', simple_value=avg_xent_adv), tf.Summary.Value(tag='xent adv', simple_value=avg_xent_adv), tf.Summary.Value(tag='xent nat', simple_value=avg_xent_nat), tf.Summary.Value(tag='accuracy adv eval', simple_value=acc_adv), tf.Summary.Value(tag='accuracy adv', simple_value=acc_adv), tf.Summary.Value(tag='accuracy nat', simple_value=acc_nat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_36": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/mnist/gbt_eval.py": {
        "tensorflow": {
            "Saver_37": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_or_create_global_step_59": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_70": {
                "variable": {
                    "value": "cur_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['model_dir']",
                            "Subscript"
                        ],
                        [
                            "config['model_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Saver_73": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_63": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_43": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/mnist/model.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "self.x_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._conv2d(self.x_image, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_45": {
                "variable": {
                    "value": "y_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.pre_softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "variable": {
                    "value": "self.xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.y_input, logits=self.pre_softmax)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_50": {
                "variable": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pre_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_52": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_54": {
                "variable": {
                    "value": "self.num_correct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_59": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_64": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_65": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_69": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_73": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_variable([1024, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_54": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.y_pred, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.y_pred, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_variable([7 * 7 * 64, 1024])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/mnist/model_converter.py": {
        "tensorflow": {
            "placeholder_38": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 10]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "logits",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2D_43": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input_shape": {
                    "value": "(28, 28, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2D_49": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(5, 5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_57": {
                "variable": {
                    "value": "fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Dense_59": {
                "variable": {
                    "value": "fc2",
                    "type": "variable",
                    "possible_values": []
                },
                "units": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "activation": {
                    "value": "softmax",
                    "type": "str",
                    "possible_values": []
                },
                "use_bias": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_65": {
                "variable": {
                    "value": "sgd",
                    "type": "variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "decay": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_data_79": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_meta_graph_22": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "meta_graph_or_file": {
                    "value": "models/mnist-0.3/checkpoint-19800.meta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "global_variables_25": {
                "variable": {
                    "value": "vars_global",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPooling2D_47": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MaxPooling2D_53": {
                "pool_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Flatten_55": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_cross_entropy_with_logits_63": {
                "labels": {
                    "value": "correct",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "global_variables_initializer_18": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/mnist/model_robustml.py": {
        "tensorflow": {
            "Saver_10": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_11": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "models/secret",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/mnist/pgd_attack.py": {
        "tensorflow": {
            "latest_checkpoint_76": {
                "variable": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "config['model_dir']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Saver_88": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "one_hot_28": {
                "variable": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "model.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "variable": {
                    "value": "correct_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_mask * model.pre_softmax",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_34": {
                "variable": {
                    "value": "wrong_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - label_mask) * model.pre_softmax - 10000.0 * label_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_41": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.xent",
                            "Attribute"
                        ],
                        [
                            "-tf.nn.relu(correct_logit - wrong_logit + 50)",
                            "UnaryOp"
                        ],
                        [
                            "model.xent",
                            "Attribute"
                        ]
                    ]
                },
                "xs": {
                    "value": "model.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_36": {
                "features": {
                    "value": "correct_logit - wrong_logit + 50",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/mnist/run_attack.py": {
        "tensorflow": {
            "Saver_26": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_79": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['model_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Session_44": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/mnist/train.py": {
        "tensorflow": {
            "get_or_create_global_step_38": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_42": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_64": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_all_70": {
                "variable": {
                    "value": "merged_summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_27": {
                "seed": {
                    "value": "config['random_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_65": {
                "name": {
                    "value": "accuracy adv train",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_66": {
                "name": {
                    "value": "accuracy adv",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_67": {
                "name": {
                    "value": "xent adv train",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.xent / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_68": {
                "name": {
                    "value": "xent adv",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.xent / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_69": {
                "name": {
                    "value": "images adv train",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.x_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_76": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['model_dir']",
                            "Subscript"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adv_train/mnist/eval.py": {
        "tensorflow": {
            "get_or_create_global_step_80": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_89": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FileWriter_90": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "eval_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, 'eval')",
                            "Call"
                        ]
                    ]
                }
            },
            "latest_checkpoint_165": {
                "variable": {
                    "value": "cur_checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['model_dir']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Summary_151": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag='xent adv eval', simple_value=avg_xent_adv), tf.Summary.Value(tag='xent adv', simple_value=avg_xent_adv), tf.Summary.Value(tag='xent nat', simple_value=avg_xent_nat), tf.Summary.Value(tag='accuracy adv eval', simple_value=acc_adv), tf.Summary.Value(tag='accuracy adv', simple_value=acc_adv), tf.Summary.Value(tag='accuracy nat', simple_value=acc_nat)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "device_65": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Session_93": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adv_train/mnist/model.py": {
        "tensorflow": {
            "placeholder_13": {
                "variable": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 784]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_14": {
                "variable": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "self.x_image",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.x_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_22": {
                "variable": {
                    "value": "h_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._conv2d(self.x_image, W_conv1) + b_conv1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_29": {
                "variable": {
                    "value": "h_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "self._conv2d(h_pool1, W_conv2) + b_conv2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_36": {
                "variable": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "h_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._max_pool_2x2(h_conv2)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * 64]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(h_pool2_flat, W_fc1) + b_fc1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_45": {
                "variable": {
                    "value": "y_xent",
                    "type": "variable",
                    "possible_values": []
                },
                "labels": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logits": {
                    "value": "self.pre_softmax",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "variable": {
                    "value": "self.xent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "y_xent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.sparse_softmax_cross_entropy_with_logits(labels=self.y_input, logits=self.pre_softmax)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_50": {
                "variable": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.pre_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_52": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.y_pred",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.y_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_54": {
                "variable": {
                    "value": "self.num_correct",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.int64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_55": {
                "variable": {
                    "value": "self.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_62": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_67": {
                "variable": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_68": {
                "initial_value": {
                    "value": "initial",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.truncated_normal(shape, stddev=0.1)",
                            "Call"
                        ],
                        [
                            "tf.constant(0.1, shape=shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_72": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_76": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "ksize": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, 2, 2, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_43": {
                "a": {
                    "value": "h_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_variable([1024, 10])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_54": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.y_pred, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_55": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(self.y_pred, self.y_input)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_37": {
                "a": {
                    "value": "h_pool2_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(h_pool2, [-1, 7 * 7 * 64])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W_fc1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._weight_variable([7 * 7 * 64, 1024])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adv_train/mnist/pgd_attack.py": {
        "tensorflow": {
            "one_hot_28": {
                "variable": {
                    "value": "label_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "model.y_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "depth": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "on_value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "off_value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_33": {
                "variable": {
                    "value": "correct_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "label_mask * model.pre_softmax",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_max_34": {
                "variable": {
                    "value": "wrong_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "(1 - label_mask) * model.pre_softmax - 10000.0 * label_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gradients_41": {
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.xent",
                            "Attribute"
                        ],
                        [
                            "-tf.nn.relu(correct_logit - wrong_logit + 50)",
                            "UnaryOp"
                        ],
                        [
                            "model.xent",
                            "Attribute"
                        ]
                    ]
                },
                "xs": {
                    "value": "model.x_input",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_36": {
                "features": {
                    "value": "correct_logit - wrong_logit + 50",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "adv_train/mnist/train.py": {
        "tensorflow": {
            "get_or_create_global_step_80": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdamOptimizer_84": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Saver_100": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "merge_all_106": {
                "variable": {
                    "value": "merged_summaries",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_75": {
                "seed": {
                    "value": "config['random_seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "scalar_101": {
                "name": {
                    "value": "accuracy adv train",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_102": {
                "name": {
                    "value": "accuracy adv",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.accuracy",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_103": {
                "name": {
                    "value": "xent adv train",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.xent / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "scalar_104": {
                "name": {
                    "value": "xent adv",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.xent / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "image_105": {
                "name": {
                    "value": "images adv train",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "model.x_image",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_111": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "model_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['model_dir']",
                            "Subscript"
                        ]
                    ]
                },
                "graph": {
                    "value": "sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR.py": {
        "torch": {}
    },
    "Robustness_Eval/GAIRAT/GAIRAT.py": {
        "torch": {
            "SGD_78": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_FAT.py": {
        "torch": {
            "SGD_80": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.weight_decay",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/attack_evaluation.py": {
        "torch": {
            "device_182": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemiSupervisedDataset(base_dataset=args.dataset, train=False, root='./data/cifar-10', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_203": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_210": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args.model, num_classes=num_classes, normalize_input=normalize_input)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/attack_pgd.py": {
        "torch": {
            "zeros_like_22": {
                "variable": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_29": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[perturbation]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_like_25": {
                "variable": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_42": {
                "variable": {
                    "value": "perturbation.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(perturbation.detach(), -X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "enable_grad_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_42": {
                "input": {
                    "value": "perturbation.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "input": {
                    "value": "X.data + perturbation.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/autoattack.py": {
        "torch": {
            "zeros_80": {
                "variable": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x_orig.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "x_orig.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "num_robust",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "nonzero_107": {
                "variable": {
                    "value": "robust_lin_idcs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                },
                "as_tuple": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_91": {
                "input": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_172": {
                "variable": {
                    "value": "num_non_robust_batch",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "false_batch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "~y.eq(output.max(dim=1)[1]).to(robust_flags.device)",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "sum_176": {
                "input": {
                    "value": "robust_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(x_orig.shape[0], dtype=torch.bool, device=x_orig.device)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/autopgd_pt.py": {
        "torch": {
            "zeros_65": {
                "variable": {
                    "value": "loss_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_66": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_67": {
                "variable": {
                    "value": "acc_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_282": {
                "variable": {
                    "value": "loss_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_283": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_284": {
                "variable": {
                    "value": "acc_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_290": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_70": {
                "variable": {
                    "value": "criterion_indiv",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_like_130": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_143": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "zeros_like_343": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_355": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_407": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_408": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_60": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_189": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_196": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_197": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_277": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_306": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_401": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "enable_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_93": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_106": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_115": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_116": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_150": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_221": {
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "enable_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_306": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_328": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_329": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_362": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_57": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_120": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_123": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "enable_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_274": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_333": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_336": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "enable_grad_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_84": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_115": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_116": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grad_297": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_328": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_329": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_58": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_114": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad + torch.autograd.grad(loss, [x_adv])[0].detach()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_115": {
                "input": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_116": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_137": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_275": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_327": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad + torch.autograd.grad(loss, [x_adv])[0].detach()",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_328": {
                "input": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_329": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_350": {
                "outputs": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "loss_indiv.sum()",
                            "Call"
                        ],
                        [
                            "-10000000000.0 * torch.ones_like(acc).float()",
                            "BinOp"
                        ],
                        [
                            "'ce'",
                            "MethodArgument"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_61": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_278": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_120": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_123": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_333": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_336": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_121": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_124": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_334": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_337": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/autopgd_tf.py": {
        "torch": {
            "zeros_59": {
                "variable": {
                    "value": "loss_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_60": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_61": {
                "variable": {
                    "value": "acc_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_70": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_250": {
                "variable": {
                    "value": "loss_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_251": {
                "variable": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[self.n_iter + 1, x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_252": {
                "variable": {
                    "value": "acc_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss_best_steps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ],
                        [
                            "torch.zeros([self.n_iter + 1, x.shape[0]])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_257": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "zeros_like_118": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_126": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_178": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_179": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_305": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ],
                        [
                            "x_in.clone() if len(x_in.shape) == 4 else x_in.clone().unsqueeze(0)",
                            "IfExp"
                        ]
                    ]
                }
            },
            "min_313": {
                "variable": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "manual_seed_365": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_366": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_54": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_172": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "randn_245": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "input": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_like_359": {
                "input": {
                    "value": "acc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "logits.detach().max(1)[1] == y",
                            "Compare"
                        ],
                        [
                            "torch.min(acc, pred)",
                            "Call"
                        ],
                        [
                            "self.model.predict(x).max(1)[1] == y",
                            "Compare"
                        ]
                    ]
                }
            },
            "ones_82": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_104": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_105": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_133": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_269": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_282": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_291": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_292": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_320": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_51": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_109": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_112": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_242": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_296": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_299": {
                "variable": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_104": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_105": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_291": {
                "input": {
                    "value": "torch.max(x_adv_1, x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_292": {
                "input": {
                    "value": "torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_103": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad / float(self.eot_iter)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_104": {
                "input": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_105": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_243": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_290": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "grad / float(self.eot_iter)",
                            "BinOp"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ],
                        [
                            "torch.zeros_like(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_291": {
                "input": {
                    "value": "x_adv_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size * torch.sign(grad)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv_1, x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.min(torch.max(x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a), x - self.eps), x + self.eps), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + step_size[0] * grad / ((grad ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt()), 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x + (x_adv_1 - x) / (((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12) * torch.min(self.eps * torch.ones(x.shape).to(self.device).detach(), ((x_adv_1 - x) ** 2).sum(dim=(1, 2, 3), keepdim=True).sqrt() + 1e-12), 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_292": {
                "input": {
                    "value": "x_adv + (x_adv_1 - x_adv) * a + grad2 * (1 - a)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_55": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_246": {
                "*size": {
                    "value": "[x.shape[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_109": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_112": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_296": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_299": {
                "input": {
                    "value": "self.eps * torch.ones(x.shape).to(self.device).detach()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_110": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_113": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_297": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_300": {
                "*size": {
                    "value": "x.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/examples/eval.py": {
        "torch": {
            "DataParallel_33": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "WideResNet().cuda()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_34": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_50": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "item",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(root=args.data_dir, train=False, transform=transform_chain, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "x_test",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for (x, y) in test_loader]",
                            "ListComp"
                        ],
                        [
                            "[y for (x, y) in test_loader]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "y_test",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[x for (x, y) in test_loader]",
                            "ListComp"
                        ],
                        [
                            "[y for (x, y) in test_loader]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_78": {
                "obj": {
                    "value": "{'adv_complete': adv_complete}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'{}/{}_{}_1_{}_eps_{:.5f}.pth'.format(args.save_dir, 'aa', args.version, adv_complete.shape[0], args.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_86": {
                "obj": {
                    "value": "adv_complete",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adversary.run_standard_evaluation(x_test[:args.n_ex], y_test[:args.n_ex], bs=args.batch_size)",
                            "Call"
                        ],
                        [
                            "adversary.run_standard_evaluation_individual(x_test[:args.n_ex], y_test[:args.n_ex], bs=args.batch_size)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "'{}/{}_{}_individual_1_{}_eps_{:.5f}_plus_{}_cheap.pth'.format(args.save_dir, 'aa', args.version, args.n_ex, args.epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/examples/resnet.py": {
        "torch": {
            "Conv2d_11": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_36": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_52": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_70": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_81": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_86": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_114": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/examples/wideresnet.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_92": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_34": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/examples/wrn_madry.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_32": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_95": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/fab_pt.py": {
        "torch": {
            "max_72": {
                "variable": {
                    "value": "(_, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_83": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[y.shape[-1], *imgs.size()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_84": {
                "variable": {
                    "value": "grad_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "self.predict(im)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "transpose_92": {
                "variable": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([y.shape[-1], *imgs.size()]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.transpose(g2, 0, 1).detach()",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_102": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_128": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argsort_133": {
                "variable": {
                    "value": "indp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(t.shape).to(self.device) * c5 - t * (2 * c5 - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_141": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cumsum_145": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ws.abs()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_155": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_157": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(w.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_183": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(b[c2] - sb[c2, lb]) / -s[c2, lb]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_183": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "arange_202": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_202": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_204": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "t / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_205": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_206": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_207": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_210": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_211": {
                "variable": {
                    "value": "rs2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(rs[:, 1:], torch.zeros(rs.shape[0], 1).to(self.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "((-w5.squeeze() * rs[:, 0]).unsqueeze(1), torch.cumsum((-rs2 + rs) * ws, dim=1) - w5 * rs[:, 0].unsqueeze(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_236": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(w.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_237": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_280": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / w",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_281": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_282": {
                "variable": {
                    "value": "(rs, indr)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max(t / w, (t - 1) / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(r, -1000000000000.0 * u2)",
                            "Call"
                        ],
                        [
                            "torch.max(1 / w, -1 / w)",
                            "Call"
                        ],
                        [
                            "torch.min(r, 1000000000000.0 * torch.ones(r.shape).to(self.device))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sort_283": {
                "variable": {
                    "value": "(_, indr_rev)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "indr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_285": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "unsqueeze_285": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_286": {
                "variable": {
                    "value": "u2",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_289": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-w * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(c.unsqueeze(-1), ds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cumsum_292": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "ds2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat((c.unsqueeze(-1), ds), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_299": {
                "variable": {
                    "value": "lb",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ceil_301": {
                "variable": {
                    "value": "nitermax",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log2(torch.tensor(s.shape[1]).float())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "counter2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "lb.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_360": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_364": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "arange_543": {
                "variable": {
                    "value": "u1",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ],
                        [
                            "im2.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_547": {
                "variable": {
                    "value": "res_c",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.shape[0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "floor_161": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_178": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(b[c_l] - sb[c_l, -1]) / -s[c_l, -1]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "unsqueeze_178": {
                "variable": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "floor_240": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "floor_305": {
                "variable": {
                    "value": "counter4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(lb + ub) / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "enable_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cumsum_146": {
                "input": {
                    "value": "bs2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-ws * d[u.unsqueeze(1), indp2]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_157": {
                "input": {
                    "value": "torch.tensor(w.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_219": {
                "input": {
                    "value": "w3s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w3[u, indr]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_235": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_236": {
                "input": {
                    "value": "torch.tensor(w.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_300": {
                "*size": {
                    "value": "c2.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log2_301": {
                "input": {
                    "value": "torch.tensor(s.shape[1]).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_363": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_546": {
                "*size": {
                    "value": "[bs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_691": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_696": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_697": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_97": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_132": {
                "*size": {
                    "value": "t.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_186": {
                "input": {
                    "value": "lmbd_opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.max((b[c_l] - sb[c_l, -1]) / -s[c_l, -1], torch.zeros(sb[c_l, -1].shape).to(self.device)).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "torch.max((b[c2] - sb[c2, lb]) / -s[c2, lb], torch.zeros(sb[c2, lb].shape).to(self.device)).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_187": {
                "input": {
                    "value": "-lmbd_opt",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_212": {
                "*size": {
                    "value": "rs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_236": {
                "data": {
                    "value": "w.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_260": {
                "input": {
                    "value": "ws[c2, lb] == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_281": {
                "*size": {
                    "value": "r.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_301": {
                "data": {
                    "value": "s.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_442": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_443": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_453": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_457": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_626": {
                "variable": {
                    "value": "d1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[:bs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_627": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d3[-bs:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_637": {
                "variable": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().max(dim=1, keepdim=True)[0].view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "torch.max(a0, 1e-08 * torch.ones(a0.shape).to(self.device))",
                            "Call"
                        ],
                        [
                            "(d3 ** 2).sum(dim=1, keepdim=True).sqrt().view(-1, *[1] * self.ndims)",
                            "Call"
                        ],
                        [
                            "d3.abs().sum(dim=1, keepdim=True).view(-1, *[1] * self.ndims)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_641": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(a1 / (a1 + a2), torch.zeros(a1.shape).to(self.device))[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_184": {
                "*size": {
                    "value": "sb[c2, lb].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cumsum_223": {
                "input": {
                    "value": "(-rs2 + rs) * ws",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_381": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_405": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_564": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_588": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_712": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_179": {
                "*size": {
                    "value": "sb[c_l, -1].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_392": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_575": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_737": {
                "variable": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "acc_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ],
                        [
                            "self.predict(adv_curr).max(1)[1] == y_to_fool",
                            "Compare"
                        ],
                        [
                            "torch.max(acc_curr, res > self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_95": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "arange_96": {
                "start": {
                    "value": "imgs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_372": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_429": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_430": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_431": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_453": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_457": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_460": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_555": {
                "*size": {
                    "value": "x1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_613": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_614": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_615": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_637": {
                "*size": {
                    "value": "a0.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_641": {
                "input": {
                    "value": "a1 / (a1 + a2)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_644": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_434": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_435": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_436": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_458": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_618": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_619": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_620": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_642": {
                "*size": {
                    "value": "a1.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_373": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_373": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_439": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_440": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_441": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_556": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_556": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_623": {
                "tensors": {
                    "value": "(x1.reshape([bs, -1]), x0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_624": {
                "tensors": {
                    "value": "(w, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_625": {
                "tensors": {
                    "value": "(b, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_382": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_382": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_565": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_565": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_393": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_393": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_576": {
                "input": {
                    "value": "res2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "10000000000.0 * torch.ones([bs]).to(self.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_576": {
                "input": {
                    "value": "[-1, *[1] * self.ndims]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_374": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_557": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_383": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_566": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_394": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_577": {
                "*size": {
                    "value": "res2.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/autoattack/square.py": {
        "torch": {
            "cross_entropy_72": {
                "variable": {
                    "value": "xent",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.predict(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(y_pred)",
                            "Call"
                        ],
                        [
                            "y.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "y_pred.detach().clone().long().to(self.device)",
                            "Call"
                        ],
                        [
                            "self.random_target_classes(y_pred, n_classes)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "arange_73": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_99": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ],
                        [
                            "output.max(1)[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x, y]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[s, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sign_113": {
                "input": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.random_int(0, len(l))",
                            "Call"
                        ],
                        [
                            "2 * torch.rand(shape).to(self.device) - 1",
                            "BinOp"
                        ],
                        [
                            "low + (high - low) * torch.rand(shape).to(self.device)",
                            "BinOp"
                        ],
                        [
                            "x.abs().view(x.shape[0], -1).max(1)[0]",
                            "Subscript"
                        ],
                        [
                            "(x ** 2).view(x.shape[0], -1).sum(-1).sqrt()",
                            "Call"
                        ],
                        [
                            "(x ** 2).view(x.shape[0], -1).sum(-1).sqrt()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_412": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_413": {
                "seed": {
                    "value": "self.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_155": {
                "*size": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_197": {
                "variable": {
                    "value": "x_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.eps * self.random_choice([x.shape[0], c, 1, w])",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_200": {
                "variable": {
                    "value": "n_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "rand_112": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_116": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_218": {
                "variable": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[c, h, w]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "min_223": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_new, x_curr - self.eps)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_225": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_best_curr + new_deltas",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_new, x_curr - self.eps), x_curr + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_new, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_curr + self.normalize(delta_curr) * self.eps, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_239": {
                "variable": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ],
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_265": {
                "variable": {
                    "value": "delta_init",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "clamp_278": {
                "variable": {
                    "value": "x_best",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x + self.normalize(delta_init) * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ones_281": {
                "variable": {
                    "value": "n_queries",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_303": {
                "variable": {
                    "value": "new_deltas_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ],
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_310": {
                "variable": {
                    "value": "new_deltas_mask_2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ],
                        [
                            "self.check_shape(x[idx_to_fool])",
                            "Call"
                        ]
                    ]
                }
            },
            "max_314": {
                "variable": {
                    "value": "mask_image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "new_deltas_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(x_curr)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_317": {
                "variable": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x_curr.shape[0], c, s, s]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "clamp_332": {
                "variable": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_curr + self.normalize(delta_curr) * self.eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "max_348": {
                "variable": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "idx_improved",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ],
                        [
                            "(loss < loss_min_curr).float()",
                            "Call"
                        ],
                        [
                            "torch.max(idx_improved, idx_miscl)",
                            "Call"
                        ],
                        [
                            "idx_improved.reshape([-1, *[1] * len(x.shape[:-1])])",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_392": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_397": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_223": {
                "input": {
                    "value": "x_new",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_best_curr + new_deltas",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_new, x_curr - self.eps), x_curr + self.eps)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_new, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_curr + self.normalize(delta_curr) * self.eps, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "self.check_shape(x_new)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_325": {
                "input": {
                    "value": "(self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_327": {
                "input": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([c, h, w]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([x_curr.shape[0], c, s, s]).to(self.device)",
                            "Call"
                        ],
                        [
                            "new_deltas + old_deltas",
                            "BinOp"
                        ],
                        [
                            "new_deltas / (1e-12 + (new_deltas ** 2).sum(dim=(-2, -1), keepdim=True).sqrt()) * (torch.max((self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2, torch.zeros_like(new_deltas)) / c + norms_windows ** 2).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_326": {
                "input": {
                    "value": "new_deltas",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros([c, h, w]).to(self.device)",
                            "Call"
                        ],
                        [
                            "torch.ones([x_curr.shape[0], c, s, s]).to(self.device)",
                            "Call"
                        ],
                        [
                            "new_deltas + old_deltas",
                            "BinOp"
                        ],
                        [
                            "new_deltas / (1e-12 + (new_deltas ** 2).sum(dim=(-2, -1), keepdim=True).sqrt()) * (torch.max((self.eps * torch.ones_like(new_deltas)) ** 2 - norms_image ** 2, torch.zeros_like(new_deltas)) / c + norms_windows ** 2).sqrt()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/cutout.py": {
        "torch": {
            "from_numpy_46": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.ones((h, w), np.float32)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(mask)",
                            "Call"
                        ],
                        [
                            "mask.expand_as(img)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/datasets.py": {
        "torch": {
            "randperm_193": {
                "n": {
                    "value": "len(self.sup_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_200": {
                "high": {
                    "value": "len(self.unsup_inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.batch_size - len(batch),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/losses.py": {
        "torch": {
            "softmax_18": {
                "variable": {
                    "value": "unlabeled_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unlabeled_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "target_onehot",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "target.size() + (num_classes,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_33": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-torch.clamp(real - other + confidence, min=0.0)",
                            "UnaryOp"
                        ],
                        [
                            "torch.sum(loss)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, y)",
                            "Call"
                        ],
                        [
                            "loss_natural + beta * loss_robust",
                            "BinOp"
                        ],
                        [
                            "loss + entropy_weight * loss_entropy_unlabeled",
                            "BinOp"
                        ],
                        [
                            "F.cross_entropy(logits, y)",
                            "Call"
                        ],
                        [
                            "loss_natural + beta * loss_robust",
                            "BinOp"
                        ],
                        [
                            "loss + entropy_weight * loss_entropy_unlabeled",
                            "BinOp"
                        ],
                        [
                            "F.cross_entropy(logits_noise, y, ignore_index=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "pgd_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_93": {
                "variable": {
                    "value": "criterion_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_128": {
                "variable": {
                    "value": "logits_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_131": {
                "variable": {
                    "value": "loss_natural",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_132": {
                "variable": {
                    "value": "p_natural",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_163": {
                "variable": {
                    "value": "Kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(x_natural)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "KLDivLoss_173": {
                "variable": {
                    "value": "criterion_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_219": {
                "variable": {
                    "value": "logits_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_224": {
                "variable": {
                    "value": "loss_natural",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_227": {
                "variable": {
                    "value": "p_natural",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_260": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_noise)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_44": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_65": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, data - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_66": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cross_entropy_87": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_88": {
                "variable": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_89": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_144": {
                "variable": {
                    "value": "loss_entropy_unlabeled",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_167": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ],
                        [
                            "model(x_natural)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_168": {
                "variable": {
                    "value": "inf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_169": {
                "variable": {
                    "value": "zero",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "log_softmax_221": {
                "variable": {
                    "value": "logits_cw",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(cw_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KLDivLoss_230": {
                "variable": {
                    "value": "criterion_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "reduce": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tensor_245": {
                "variable": {
                    "value": "loss_entropy_unlabeled",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_32": {
                "input": {
                    "value": "real - other + confidence",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_127": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "is_unlabeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y == -1",
                            "Compare"
                        ],
                        [
                            "y == -1",
                            "Compare"
                        ]
                    ]
                }
            },
            "clamp_218": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "sum_240": {
                "input": {
                    "value": "is_unlabeled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y == -1",
                            "Compare"
                        ],
                        [
                            "y == -1",
                            "Compare"
                        ]
                    ]
                }
            },
            "enable_grad_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "KLDivLoss_60": {
                "variable": {
                    "value": "criterion_kl",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_65": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_109": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x_natural - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_111": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_195": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(x_adv, x_natural - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_197": {
                "variable": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "randn_like_256": {
                "input": {
                    "value": "x_natural",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_43": {
                "ndarray": {
                    "value": "np.random.uniform(-epsilon, epsilon, data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_100": {
                "*size": {
                    "value": "x_natural.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_180": {
                "*size": {
                    "value": "x_natural.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_40": {
                "*size": {
                    "value": "data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_56": {
                "reduction": {
                    "value": "mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_softmax_61": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(x_adv)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_61": {
                "input": {
                    "value": "nat_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_grad_104": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_107": {
                "outputs": {
                    "value": "loss_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion_kl(F.log_softmax(model(x_adv), dim=1), F.softmax(model(x_natural), dim=1))",
                            "Call"
                        ],
                        [
                            "criterion_kl(F.log_softmax(model(x_adv), dim=1), F.softmax(model(x_natural), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_109": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_117": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "enable_grad_190": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_193": {
                "outputs": {
                    "value": "loss_kl",
                    "type": "variable",
                    "possible_values": [
                        [
                            "criterion_kl(F.log_softmax(model(x_adv), dim=1), F.softmax(model(x_natural), dim=1))",
                            "Call"
                        ],
                        [
                            "criterion_kl(F.log_softmax(model(x_adv), dim=1), F.softmax(model(x_natural), dim=1))",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "[x_adv]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "max_195": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_203": {
                "input": {
                    "value": "x_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda() if rand_init else data.detach()",
                            "IfExp"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "Variable(x_adv, requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + eta",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, data - epsilon), data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + 0.001 * torch.randn(x_natural.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "x_natural.detach() + 0.0",
                            "BinOp"
                        ],
                        [
                            "x_adv + epsilon * torch.randn_like(x_adv)",
                            "BinOp"
                        ],
                        [
                            "Variable(torch.clamp(x_adv, 0.0, 1.0), requires_grad=False)",
                            "Call"
                        ],
                        [
                            "x_adv.detach() + step_size * torch.sign(grad.detach())",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(x_adv, x_natural - epsilon), x_natural + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(x_adv, 0.0, 1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_softmax_105": {
                "input": {
                    "value": "model(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_106": {
                "input": {
                    "value": "model(x_natural)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_108": {
                "input": {
                    "value": "grad.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_191": {
                "input": {
                    "value": "model(x_adv)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_192": {
                "input": {
                    "value": "model(x_natural)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sign_194": {
                "input": {
                    "value": "grad.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_19": {
                "input": {
                    "value": "unlabeled_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/models/cifar_resnet.py": {
        "torch": {
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_26": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_62": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_63": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_111": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "AvgPool2d_115": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_132": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/models/resnet.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_91": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_96": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_120": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/models/shake_shake.py": {
        "torch": {
            "Conv2d_25": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=False)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, output_size=1)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_67": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_channels * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=False)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, output_size=1)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_71": {
                "variable": {
                    "value": "y1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=False)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, output_size=1)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_74": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x[:, :, 1:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "avg_pool2d_75": {
                "variable": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x[:, :, 1:, 1:], (0, 1, 0, 1))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(y2, kernel_size=1, stride=2, padding=0)",
                            "Call"
                        ],
                        [
                            "self.conv2(y2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_78": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[y1, y2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_93": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_138": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "base_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['base_channels']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_152": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.feature_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config['n_classes']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Sequential_158": {
                "variable": {
                    "value": "stage",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_180": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(self.conv(x))",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "adaptive_avg_pool2d_184": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)), inplace=False)",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(x))",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=False)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(self.conv(x)), inplace=True)",
                            "Call"
                        ],
                        [
                            "self.stage1(x)",
                            "Call"
                        ],
                        [
                            "self.stage2(x)",
                            "Call"
                        ],
                        [
                            "self.stage3(x)",
                            "Call"
                        ],
                        [
                            "F.adaptive_avg_pool2d(x, output_size=1)",
                            "Call"
                        ]
                    ]
                },
                "output_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_148": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "*input_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/models/shake_shake_function.py": {
        "torch": {
            "rand_37": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_44": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_39": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "rand_46": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/models/wideresnet.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_14": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_17": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_71": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_73": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_92": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_34": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_46": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/robust_self_training_GAIR.py": {
        "torch": {
            "is_available_192": {
                "variable": {
                    "value": "use_cuda",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_194": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_250": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemiSupervisedDataset(base_dataset=args.dataset, add_svhn_extra=args.svhn_extra, root=args.data_dir, train=True, download=True, transform=transform_train, aux_data_filename=args.aux_data_filename, add_aux_labels=not args.remove_pseudo_labels, aux_take_amount=args.aux_take_amount)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "train_batch_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemiSupervisedSampler(trainset.sup_indices, trainset.unsup_indices, args.batch_size, args.unsup_fraction, num_batches=int(np.ceil(50000 / args.batch_size)))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_256": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemiSupervisedDataset(base_dataset=args.dataset, root=args.data_dir, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_265": {
                "variable": {
                    "value": "eval_train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset_eval",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemiSupervisedDataset(base_dataset=args.dataset, add_svhn_extra=args.svhn_extra, root=args.data_dir, train=True, download=True, transform=transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_268": {
                "variable": {
                    "value": "eval_test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemiSupervisedDataset(base_dataset=args.dataset, root=args.data_dir, train=False, download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.test_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_450": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_193": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_449": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args.model, num_classes=num_classes, normalize_input=args.normalize_input)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_461": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_339": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_510": {
                "obj": {
                    "value": "dict(num_classes=num_classes, state_dict=model.state_dict(), normalize_input=args.normalize_input, save_epoch=epoch, opt=optimizer.state_dict())",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'lastcheckpoint.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_307": {
                "variable": {
                    "value": "entropy_loss_unlabeled",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_344": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(data)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "save_498": {
                "obj": {
                    "value": "dict(num_classes=num_classes, state_dict=model.state_dict(), normalize_input=args.normalize_input, save_epoch=epoch, opt=optimizer.state_dict())",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'checkpoint-epoch{}.pt'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_505": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(model_dir, 'opt-checkpoint_epoch{}.tar'.format(epoch))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/GAIR_RST/utils.py": {
        "torch": {
            "Sequential_46": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "NormalizeInput()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_56": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_57": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/attack_generator.py": {
        "torch": {}
    },
    "Robustness_Eval/GAIRAT/attack_pgd.py": {
        "torch": {
            "zeros_like_27": {
                "variable": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_34": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[perturbation]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "rand_like_30": {
                "variable": {
                    "value": "perturbation",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_47": {
                "variable": {
                    "value": "perturbation.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(perturbation.detach(), -X)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "enable_grad_39": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_47": {
                "input": {
                    "value": "perturbation.detach()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_49": {
                "input": {
                    "value": "X.data + perturbation.data",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/datasets.py": {
        "torch": {
            "randperm_194": {
                "n": {
                    "value": "len(self.sup_inds)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randint_201": {
                "high": {
                    "value": "len(self.unsup_inds)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.batch_size - len(batch),)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/earlystop.py": {
        "torch": {
            "zeros_18": {
                "variable": {
                    "value": "control",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(target)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_20": {
                "variable": {
                    "value": "Kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(data)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_102": {
                "variable": {
                    "value": "output_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_adv, iter_adv.reshape(-1, 3, 32, 32))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_103": {
                "variable": {
                    "value": "output_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_target, iter_target.reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_103": {
                "variable": {
                    "value": "output_target",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "output_natural",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_natural, iter_clean_data.reshape(-1, 3, 32, 32).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "variable": {
                    "value": "output_Kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_Kappa, Kappa.reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_105": {
                "variable": {
                    "value": "output_Kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_28": {
                "variable": {
                    "value": "iter_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iter_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cuda().detach()",
                            "Call"
                        ],
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iter_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iter_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "iter_adv[iter_index]",
                            "Subscript"
                        ],
                        [
                            "iter_adv.detach() + eta + omega * torch.randn(iter_adv.shape).detach().cuda()",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(iter_adv, iter_clean_data - epsilon), iter_clean_data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(iter_adv, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "clamp_31": {
                "variable": {
                    "value": "iter_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iter_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cuda().detach()",
                            "Call"
                        ],
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iter_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iter_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "iter_adv[iter_index]",
                            "Subscript"
                        ],
                        [
                            "iter_adv.detach() + eta + omega * torch.randn(iter_adv.shape).detach().cuda()",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(iter_adv, iter_clean_data - epsilon), iter_clean_data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(iter_adv, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_89": {
                "variable": {
                    "value": "iter_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.max(iter_adv, iter_clean_data - epsilon)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_90": {
                "variable": {
                    "value": "iter_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "iter_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cuda().detach()",
                            "Call"
                        ],
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iter_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iter_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "iter_adv[iter_index]",
                            "Subscript"
                        ],
                        [
                            "iter_adv.detach() + eta + omega * torch.randn(iter_adv.shape).detach().cuda()",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(iter_adv, iter_clean_data - epsilon), iter_clean_data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(iter_adv, 0, 1)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_64": {
                "variable": {
                    "value": "output_adv",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_adv, iter_adv[output_index].reshape(-1, 3, 32, 32).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "output_natural",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_natural, iter_clean_data[output_index].reshape(-1, 3, 32, 32).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_66": {
                "variable": {
                    "value": "output_target",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_target, iter_target[output_index].reshape(-1).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_67": {
                "variable": {
                    "value": "output_Kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(output_Kappa, Kappa[output_index].reshape(-1).cuda())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "enable_grad_70": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_30": {
                "ndarray": {
                    "value": "np.random.uniform(-epsilon, epsilon, data.shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_89": {
                "input": {
                    "value": "iter_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.cuda().detach()",
                            "Call"
                        ],
                        [
                            "data.detach() + 0.001 * torch.randn(data.shape).cuda().detach()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iter_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "data.detach() + torch.from_numpy(np.random.uniform(-epsilon, epsilon, data.shape)).float().cuda()",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(iter_adv, 0.0, 1.0)",
                            "Call"
                        ],
                        [
                            "iter_adv[iter_index]",
                            "Subscript"
                        ],
                        [
                            "iter_adv.detach() + eta + omega * torch.randn(iter_adv.shape).detach().cuda()",
                            "BinOp"
                        ],
                        [
                            "torch.min(torch.max(iter_adv, iter_clean_data - epsilon), iter_clean_data + epsilon)",
                            "Call"
                        ],
                        [
                            "torch.clamp(iter_adv, 0, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_27": {
                "*size": {
                    "value": "data.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_88": {
                "*size": {
                    "value": "iter_adv.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/eval_PGD_plus.py": {
        "torch": {
            "device_182": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_199": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SemiSupervisedDataset(base_dataset=args.dataset, train=False, root='./data/cifar-10', download=True, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_203": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.model_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_155": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_210": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_model(args.model, num_classes=num_classes, normalize_input=normalize_input)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/models/preact_resnet.py": {
        "torch": {
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_77": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_34": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_61": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_117": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/models/resnet.py": {
        "torch": {
            "Conv2d_21": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_24": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_37": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_47": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_50": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_51": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_62": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_91": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_96": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + self.shortcut(x)",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_28": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_120": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_57": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/models/small_cnn.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.block1_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_11": {
                "variable": {
                    "value": "self.block1_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_12": {
                "variable": {
                    "value": "self.block1_pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_13": {
                "variable": {
                    "value": "self.batchnorm1_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.batchnorm1_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.block2_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "variable": {
                    "value": "self.block2_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_18": {
                "variable": {
                    "value": "self.block2_pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "variable": {
                    "value": "self.batchnorm2_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_20": {
                "variable": {
                    "value": "self.batchnorm2_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_22": {
                "variable": {
                    "value": "self.block3_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "variable": {
                    "value": "self.block3_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_24": {
                "variable": {
                    "value": "self.block3_pool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.batchnorm3_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_26": {
                "variable": {
                    "value": "self.batchnorm3_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "196",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_28": {
                "variable": {
                    "value": "self.activ",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "196 * 4 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_31": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_71": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/models/wide_resnet.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_32": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_95": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/models/wrn_madry.py": {
        "torch": {
            "BatchNorm2d_10": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_11": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_12": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_15": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nChannels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_69": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ReLU_70": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_71": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "nChannels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "avg_pool2d_90": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dropout_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.droprate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_32": {
                "input": {
                    "value": "x if self.equalInOut else self.convShortcut(x)",
                    "type": "IfExp",
                    "possible_values": []
                },
                "other": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv1(out if self.equalInOut else x)))",
                            "Call"
                        ],
                        [
                            "F.dropout(out, p=self.droprate, training=self.training)",
                            "Call"
                        ],
                        [
                            "self.conv2(out)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.block1(out)",
                            "Call"
                        ],
                        [
                            "self.block2(out)",
                            "Call"
                        ],
                        [
                            "self.block3(out)",
                            "Call"
                        ],
                        [
                            "self.relu(self.bn1(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 8)",
                            "Call"
                        ],
                        [
                            "out.view(-1, self.nChannels)",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_44": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_95": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/utils/misc.py": {
        "torch": {
            "normal_45": {
                "mean": {
                    "value": "m.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/GAIRAT/utils_eval.py": {
        "torch": {
            "Sequential_32": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "NormalizeInput()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_42": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/augmix/allconv.py": {
        "torch": {
            "Sequential_46": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.width2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_24": {
                "input": {
                    "value": "1.702 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_35": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/augmix/cifar.py": {
        "torch": {
            "zeros_like_184": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preprocess(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_410": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data/cifar', train=True, transform=train_transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100('./data/cifar', train=True, transform=train_transform, download=True)",
                            "Call"
                        ],
                        [
                            "AugMixDataset(train_data, preprocess, args.no_jsd)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_417": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data/cifar', train=False, transform=test_transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100('./data/cifar', train=False, transform=test_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_434": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_442": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "densenet(num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net).cuda()",
                            "Call"
                        ],
                        [
                            "WideResNet(args.layers, num_classes, args.widen_factor, args.droprate)",
                            "Call"
                        ],
                        [
                            "AllConvNet(num_classes)",
                            "Call"
                        ],
                        [
                            "resnext29(num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_466": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(net.parameters(), args.learning_rate, momentum=args.momentum, weight_decay=args.decay, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda step: get_lr(step, args.epochs * len(train_loader), 1, 1e-06 / args.learning_rate)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_346": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data/cifar', train=False, transform=test_transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100('./data/cifar', train=False, transform=test_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_367": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_236": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_295": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_303": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_319": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_327": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_449": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_504": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.resume)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'dataset': args.dataset, 'model': args.model, 'state_dict': net.state_dict(), 'best_acc': best_acc, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_247": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_255": {
                "variable": {
                    "value": "images_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.cuda()",
                            "Call"
                        ],
                        [
                            "images.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_263": {
                "variable": {
                    "value": "(logits_clean, logits_aug1, logits_aug2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images_all)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "images[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_267": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_275": {
                "variable": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p_clean + p_aug1 + p_aug2) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_275": {
                "variable": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softmax_269": {
                "input": {
                    "value": "logits_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_270": {
                "input": {
                    "value": "logits_aug1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_271": {
                "input": {
                    "value": "logits_aug2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_278": {
                "input": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug2",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_276": {
                "input": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_277": {
                "input": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug1",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/augmix/imagenet.py": {
        "torch": {
            "zeros_like_215": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preprocess(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_384": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, train_transform)",
                            "Call"
                        ],
                        [
                            "AugMixDataset(train_dataset, preprocess)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_389": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, test_transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "SGD_402": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_409": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.__dict__[args.model](pretrained=True)",
                            "Call"
                        ],
                        [
                            "models.__dict__[args.model]()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "manual_seed_362": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_172": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_270": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_273": {
                "variable": {
                    "value": "images_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_276": {
                "variable": {
                    "value": "(logits_clean, logits_aug1, logits_aug2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images_all)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "images[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_280": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_288": {
                "variable": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p_clean + p_aug1 + p_aug2) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_288": {
                "variable": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_322": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_326": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_342": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, test_transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_416": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_466": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.resume)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'model': args.model, 'state_dict': net.state_dict(), 'best_acc1': best_acc1, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_282": {
                "input": {
                    "value": "logits_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_283": {
                "input": {
                    "value": "logits_aug1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_284": {
                "input": {
                    "value": "logits_aug2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_291": {
                "input": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug2",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_289": {
                "input": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_290": {
                "input": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug1",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/augmix/models/cifar/allconv.py": {
        "torch": {
            "Sequential_46": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.width2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_24": {
                "input": {
                    "value": "1.702 * x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MaxPool2d_33": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_33": {
                "p": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_35": {
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_43": {
                "variable": {
                    "value": "conv2d",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm2d_41": {
                "num_features": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "v",
                            "Name"
                        ]
                    ]
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cfg",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "Robustness_Eval/augmix/original_cifar.py": {
        "torch": {
            "zeros_like_165": {
                "variable": {
                    "value": "mix",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "preprocess(image)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_314": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data/cifar', train=True, transform=train_transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100('./data/cifar', train=True, transform=train_transform, download=True)",
                            "Call"
                        ],
                        [
                            "AugMixDataset(train_data, preprocess, args.no_jsd)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_321": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data/cifar', train=False, transform=test_transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100('./data/cifar', train=False, transform=test_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_338": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataParallel_346": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": [
                        [
                            "densenet(num_classes=num_classes)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(net).cuda()",
                            "Call"
                        ],
                        [
                            "WideResNet(args.layers, num_classes, args.widen_factor, args.droprate)",
                            "Call"
                        ],
                        [
                            "AllConvNet(num_classes)",
                            "Call"
                        ],
                        [
                            "resnext29(num_classes=num_classes)",
                            "Call"
                        ]
                    ]
                }
            },
            "LambdaLR_370": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(net.parameters(), args.learning_rate, momentum=args.momentum, weight_decay=args.decay, nesterov=True)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lambda step: get_lr(step, args.epochs * len(train_loader), 1, 1e-06 / args.learning_rate)",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DataLoader_270": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10('./data/cifar', train=False, transform=test_transform, download=True)",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100('./data/cifar', train=False, transform=test_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.num_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_286": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_212": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_214": {
                "variable": {
                    "value": "images_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "images.cuda()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_217": {
                "variable": {
                    "value": "(logits_clean, logits_aug1, logits_aug2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "logits_all",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images_all)",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "images[0].size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_221": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_229": {
                "variable": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(p_clean + p_aug1 + p_aug2) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_229": {
                "variable": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_249": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_253": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(images)",
                            "Call"
                        ],
                        [
                            "net(images)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "targets.cuda()",
                            "Call"
                        ],
                        [
                            "targets.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_353": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_408": {
                "obj": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.resume)",
                            "Call"
                        ],
                        [
                            "{'epoch': epoch, 'dataset': args.dataset, 'model': args.model, 'state_dict': net.state_dict(), 'best_acc': best_acc, 'optimizer': optimizer.state_dict()}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "save_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(args.save, 'checkpoint.pth.tar')",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_223": {
                "input": {
                    "value": "logits_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_224": {
                "input": {
                    "value": "logits_aug1",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_225": {
                "input": {
                    "value": "logits_aug2",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "kl_div_232": {
                "input": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug2",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_230": {
                "input": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_clean",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "kl_div_231": {
                "input": {
                    "value": "p_mixture",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp((p_clean + p_aug1 + p_aug2) / 3.0, 1e-07, 1).log()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "p_aug1",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/augmix/third_party/ResNeXt_DenseNet/models/densenet.py": {
        "torch": {
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growth_rate",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_18": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inter_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4 * growth_rate",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "growth_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "12",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, out)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_49": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "n_out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(math.floor(n_channels * reduction))",
                            "Call"
                        ],
                        [
                            "int(math.floor(n_channels * reduction))",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "torch.cat((x, out), 1)",
                            "Call"
                        ],
                        [
                            "self.conv1(F.relu(self.bn1(x)))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.trans1(self.dense1(out))",
                            "Call"
                        ],
                        [
                            "self.trans2(self.dense2(out))",
                            "Call"
                        ],
                        [
                            "self.dense3(out)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(F.avg_pool2d(F.relu(self.bn1(out)), 8))",
                            "Call"
                        ],
                        [
                            "self.fc(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "Linear_91": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "n_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_channels + growth_rate",
                            "BinOp"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ],
                        [
                            "n_out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_features": {
                    "value": "n_classes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "squeeze_118": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.avg_pool2d(F.relu(self.bn1(out)), 8)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_111": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_22": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_23": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_38": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_118": {
                "input": {
                    "value": "F.relu(self.bn1(out))",
                    "type": "Call",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_118": {
                "input": {
                    "value": "self.bn1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/augmix/third_party/ResNeXt_DenseNet/models/resnext.py": {
        "torch": {
            "Conv2d_23": {
                "variable": {
                    "value": "self.conv_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn_reduce",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.conv_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "groups": {
                    "value": "cardinality",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_40": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "dim * cardinality",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "variable": {
                    "value": "self.bn_expand",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes * 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_reduce(bottleneck)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "bottleneck",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(bottleneck)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.conv_1_3x3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_86": {
                "variable": {
                    "value": "self.bn_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AvgPool2d_92": {
                "variable": {
                    "value": "self.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_93": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_132": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn_1(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_68": {
                "input": {
                    "value": "residual + bottleneck",
                    "type": "BinOp",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_109": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_128": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "num_features": {
                    "value": "planes * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "Robustness_Eval/robustness/run.py": {
        "torch": {
            "device_9": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "adv_train/cifar10/eval.py": {
        "torch": {
            "manual_seed_53": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_60": {
                "f": {
                    "value": "os.path.join(args.out_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "adv_train/cifar10/preact_resnet.py": {
        "torch": {
            "BatchNorm2d_12": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_38": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_41": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "relu_50": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_68": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Linear_69": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "relu_85": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_86": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn(out))",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_45": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "relu_26": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_53": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_54": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Name"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "adv_train/cifar10/train.py": {
        "torch": {
            "cat_77": {
                "variable": {
                    "value": "epsilon_all",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "50000 * [(args.epsilon / 255.0 / std).view(1, 3, 1, 1)]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "SGD_83": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_72": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_73": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CyclicLR_92": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr_max, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "base_lr": {
                    "value": "args.lr_min",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_lr": {
                    "value": "args.lr_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size_up": {
                    "value": "lr_steps / 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "step_size_down": {
                    "value": "lr_steps / 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_118": {
                "variable": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "args.epsilon * np.ones(50000)",
                            "BinOp"
                        ],
                        [
                            "torch.from_numpy(eps).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "save_169": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.out_dir, 'model.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultiStepLR_95": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.optim.SGD(model.parameters(), lr=args.lr_max, momentum=args.momentum, weight_decay=args.weight_decay)",
                            "Call"
                        ]
                    ]
                },
                "milestones": {
                    "value": "[lr_steps / 2, lr_steps * 3 / 4]",
                    "type": "List",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "zeros_like_138": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_135": {
                "variable": {
                    "value": "clean_index",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "clean_output.max(1)[1] != y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "rand_140": {
                "*size": {
                    "value": "X.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sign_149": {
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "delta.grad.detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "adv_train/cifar10/utils.py": {
        "torch": {
            "tensor_12": {
                "variable": {
                    "value": "mu",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cifar10_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.4914, 0.4822, 0.4465)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "tensor_13": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "cifar10_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(0.2471, 0.2435, 0.2616)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "eps_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "new_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EpsDataset(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "new_train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "EpsDataset(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "num_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(dir_, train=False, transform=test_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_76": {
                "variable": {
                    "value": "max_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "y.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_77": {
                "variable": {
                    "value": "max_delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_20": {
                "input": {
                    "value": "torch.min(X, upper_limit)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "delta",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_102": {
                "variable": {
                    "value": "all_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "model(X + delta)",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_104": {
                "variable": {
                    "value": "max_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "max_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(y.shape[0]).cuda()",
                            "Call"
                        ],
                        [
                            "torch.max(max_loss, all_loss)",
                            "Call"
                        ]
                    ]
                }
            },
            "min_20": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "where_86": {
                "variable": {
                    "value": "index",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "output.max(1)[1] == y",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "cross_entropy_89": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X + delta)",
                            "Call"
                        ],
                        [
                            "model(X + pgd_delta)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "cross_entropy_120": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X + delta)",
                            "Call"
                        ],
                        [
                            "model(X + pgd_delta)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_132": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_136": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model(X + delta)",
                            "Call"
                        ],
                        [
                            "model(X + pgd_delta)",
                            "Call"
                        ],
                        [
                            "model(X)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_118": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sign_98": {
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grad[index[0], :, :, :]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    }
}