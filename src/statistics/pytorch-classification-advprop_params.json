{
    "attacker.py": {
        "torch": {
            "linspace_11": {
                "variable": {
                    "value": "vec",
                    "possible_values": []
                },
                "start": {
                    "value": "-nsig",
                    "possible_values": []
                },
                "end": {
                    "value": "nsig",
                    "possible_values": []
                },
                "steps": {
                    "value": "size",
                    "possible_values": []
                }
            },
            "exp_12": {
                "variable": {
                    "value": "vec",
                    "possible_values": []
                },
                "input": {
                    "value": "-vec * vec / 2",
                    "possible_values": []
                }
            },
            "randint_like_51": {
                "variable": {
                    "value": "label_offset",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "possible_values": []
                },
                "high": {
                    "value": "1000",
                    "possible_values": []
                }
            },
            "clamp_59": {
                "variable": {
                    "value": "lower_bound",
                    "possible_values": []
                },
                "input": {
                    "value": "image_clean - self.epsilon",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "clamp_60": {
                "variable": {
                    "value": "upper_bound",
                    "possible_values": []
                },
                "input": {
                    "value": "image_clean + self.epsilon",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "possible_values": []
                },
                "max": {
                    "value": "1.0",
                    "possible_values": []
                }
            },
            "empty_like_64": {
                "variable": {
                    "value": "init_start",
                    "possible_values": []
                },
                "input": {
                    "value": "image_clean",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "possible_values": [
                        [
                            "15",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "(kernel_size - 1) // 2",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "possible_values": []
                }
            },
            "cross_entropy_73": {
                "variable": {
                    "value": "losses",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "possible_values": [
                        [
                            "model(adv)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "target_label",
                    "possible_values": [
                        [
                            "label",
                            "Name"
                        ],
                        [
                            "self._create_random_target(label)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_82": {
                "variable": {
                    "value": "adv",
                    "possible_values": []
                },
                "condition": {
                    "value": "adv > lower_bound",
                    "possible_values": []
                },
                "x": {
                    "value": "adv",
                    "possible_values": [
                        [
                            "start_adv",
                            "Name"
                        ],
                        [
                            "adv + torch.sign(g) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "adv - torch.sign(g) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "torch.where(adv > lower_bound, adv, lower_bound)",
                            "Call"
                        ],
                        [
                            "torch.where(adv < upper_bound, adv, upper_bound).detach()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "lower_bound",
                    "possible_values": [
                        [
                            "torch.clamp(image_clean - self.epsilon, min=-1.0, max=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_83": {
                "variable": {
                    "value": "adv",
                    "possible_values": []
                },
                "condition": {
                    "value": "adv < upper_bound",
                    "possible_values": []
                },
                "x": {
                    "value": "adv",
                    "possible_values": [
                        [
                            "start_adv",
                            "Name"
                        ],
                        [
                            "adv + torch.sign(g) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "adv - torch.sign(g) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "torch.where(adv > lower_bound, adv, lower_bound)",
                            "Call"
                        ],
                        [
                            "torch.where(adv < upper_bound, adv, upper_bound).detach()",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "upper_bound",
                    "possible_values": [
                        [
                            "torch.clamp(image_clean + self.epsilon, min=-1.0, max=1.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_14": {
                "input": {
                    "value": "res",
                    "possible_values": [
                        [
                            "vec.view(-1, 1) @ vec.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "res / torch.sum(res)",
                            "BinOp"
                        ],
                        [
                            "vec.view(-1, 1) @ vec.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "res / torch.sum(res)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "abs_19": {
                "input": {
                    "value": "torch.arange(-(size + 1) / 2, (size + 1) / 2 + 1, step=1)",
                    "possible_values": []
                }
            },
            "sum_21": {
                "input": {
                    "value": "res",
                    "possible_values": [
                        [
                            "vec.view(-1, 1) @ vec.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "res / torch.sum(res)",
                            "BinOp"
                        ],
                        [
                            "vec.view(-1, 1) @ vec.view(1, -1)",
                            "BinOp"
                        ],
                        [
                            "res / torch.sum(res)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_like_30": {
                "input": {
                    "value": "label",
                    "possible_values": []
                }
            },
            "grad_74": {
                "outputs": {
                    "value": "losses",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, target_label)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "adv",
                    "possible_values": [
                        [
                            "start_adv",
                            "Name"
                        ],
                        [
                            "adv + torch.sign(g) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "adv - torch.sign(g) * self.step_size",
                            "BinOp"
                        ],
                        [
                            "torch.where(adv > lower_bound, adv, lower_bound)",
                            "Call"
                        ],
                        [
                            "torch.where(adv < upper_bound, adv, upper_bound).detach()",
                            "Call"
                        ]
                    ]
                },
                "retain_graph": {
                    "value": "False",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "randn_66": {
                "*size": {
                    "value": "[]",
                    "possible_values": []
                }
            },
            "sign_79": {
                "input": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.autograd.grad(losses, adv, retain_graph=False, create_graph=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_81": {
                "input": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.autograd.grad(losses, adv, retain_graph=False, create_graph=False)[0]",
                            "Subscript"
                        ],
                        [
                            "self.conv(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_19": {
                "start": {
                    "value": "-(size + 1) / 2",
                    "possible_values": []
                },
                "end": {
                    "value": "(size + 1) / 2 + 1",
                    "possible_values": []
                },
                "step": {
                    "value": "1",
                    "possible_values": []
                }
            }
        }
    },
    "imagenet.py": {
        "torch": {
            "is_available_131": {
                "variable": {
                    "value": "use_cuda",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "MixBatchNorm2d_533": {
                "base_class_0": {
                    "value": "torch.nn.BatchNorm2d",
                    "possible_values": []
                },
                "BatchNorm2d_551": {
                    "variable": {
                        "value": "self.aux_bn",
                        "possible_values": []
                    },
                    "num_features": {
                        "value": "num_features",
                        "possible_values": []
                    },
                    "eps": {
                        "value": "eps",
                        "possible_values": [
                            [
                                "1e-05",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "momentum": {
                        "value": "momentum",
                        "possible_values": [
                            [
                                "0.1",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "affine": {
                        "value": "affine",
                        "possible_values": [
                            [
                                "True",
                                "MethodArgument"
                            ]
                        ]
                    },
                    "track_running_stats": {
                        "value": "track_running_stats",
                        "possible_values": [
                            [
                                "True",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "manual_seed_137": {
                "seed": {
                    "value": "args.manualSeed",
                    "possible_values": []
                }
            },
            "DataLoader_192": {
                "variable": {
                    "value": "train_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "possible_values": [
                        [
                            "datasets.ImageFolder(traindir, transform_train)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "val_loader",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.ImageFolder(valdir, transforms.Compose(val_transforms))",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.test_batch",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "DataParallel_217": {
                "variable": {
                    "value": "model",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "possible_values": [
                        [
                            "net.__dict__[args.arch](num_classes=args.num_classes, norm_layer=norm_layer)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_232": {
                "variable": {
                    "value": "optimizer",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "possible_values": []
                }
            },
            "manual_seed_all_139": {
                "seed": {
                    "value": "args.manualSeed",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_224": {
                "variable": {
                    "value": "criterion",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "possible_values": []
                }
            },
            "load_241": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.resume",
                    "possible_values": []
                }
            },
            "save_479": {
                "obj": {
                    "value": "state",
                    "possible_values": [
                        [
                            "{k: v for (k, v) in args._get_kwargs()}",
                            "DictComp"
                        ]
                    ]
                },
                "f": {
                    "value": "filepath",
                    "possible_values": [
                        [
                            "os.path.join(checkpoint, filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_507": {
                "variable": {
                    "value": "true_dist",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "pred.log_softmax(dim=dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "kl_div_510": {
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "pred.log_softmax(dim=dim)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "true_dist",
                    "possible_values": [
                        [
                            "torch.zeros_like(pred)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "possible_values": [
                        [
                            "'batchmean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_251": {
                "variable": {
                    "value": "checkpoint",
                    "possible_values": []
                },
                "f": {
                    "value": "args.load",
                    "possible_values": []
                }
            },
            "no_grad_506": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "no_grad_446": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "cat_567": {
                "variable": {
                    "value": "input",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(input0, input1)",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "no_grad_376": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "net.py": {
        "torch": {
            "BasicBlock_46": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_61": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(conv1x1(self.inplanes, planes * block.expansion, stride), norm_layer(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Bottleneck_86": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "ReLU_108": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "self.downsample": {
                    "value": "downsample",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "nn.Sequential(conv1x1(self.inplanes, planes * block.expansion, stride), norm_layer(planes * block.expansion))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ResNet_135": {
                "base_class_0": {
                    "value": "torch.nn.Module",
                    "possible_values": []
                },
                "self._norm_layer": {
                    "value": "norm_layer",
                    "possible_values": [
                        [
                            "nn.BatchNorm2d",
                            "Attribute"
                        ],
                        [
                            "nn.BatchNorm2d",
                            "Attribute"
                        ],
                        [
                            "nn.BatchNorm2d",
                            "Attribute"
                        ],
                        [
                            "self._norm_layer",
                            "Attribute"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "self.base_width": {
                    "value": "width_per_group",
                    "possible_values": [
                        [
                            "64",
                            "MethodArgument"
                        ],
                        [
                            "64",
                            "MethodArgument"
                        ]
                    ]
                },
                "Conv2d_156": {
                    "variable": {
                        "value": "self.conv1",
                        "possible_values": []
                    },
                    "in_channels": {
                        "value": "3",
                        "possible_values": []
                    },
                    "out_channels": {
                        "value": "self.inplanes",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "7",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "3",
                        "possible_values": []
                    },
                    "bias": {
                        "value": "False",
                        "possible_values": []
                    }
                },
                "ReLU_159": {
                    "variable": {
                        "value": "self.relu",
                        "possible_values": []
                    },
                    "inplace": {
                        "value": "True",
                        "possible_values": []
                    }
                },
                "MaxPool2d_160": {
                    "variable": {
                        "value": "self.maxpool",
                        "possible_values": []
                    },
                    "kernel_size": {
                        "value": "3",
                        "possible_values": []
                    },
                    "stride": {
                        "value": "2",
                        "possible_values": []
                    },
                    "padding": {
                        "value": "1",
                        "possible_values": []
                    }
                },
                "AdaptiveAvgPool2d_168": {
                    "variable": {
                        "value": "self.avgpool",
                        "possible_values": []
                    },
                    "output_size": {
                        "value": "(1, 1)",
                        "possible_values": []
                    }
                },
                "Linear_169": {
                    "variable": {
                        "value": "self.fc",
                        "possible_values": []
                    },
                    "in_features": {
                        "value": "512 * block.expansion",
                        "possible_values": []
                    },
                    "out_features": {
                        "value": "num_classes",
                        "possible_values": [
                            [
                                "1000",
                                "MethodArgument"
                            ],
                            [
                                "1000",
                                "MethodArgument"
                            ]
                        ]
                    }
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "flatten_225": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.conv1(x)",
                            "Call"
                        ],
                        [
                            "self.bn1(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.avgpool(x)",
                            "Call"
                        ],
                        [
                            "torch.flatten(x, 1)",
                            "Call"
                        ],
                        [
                            "self.fc(x)",
                            "Call"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_196": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "cat_268": {
                "variable": {
                    "value": "images",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x, aux_images]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "cat_269": {
                "variable": {
                    "value": "targets",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[labels, labels]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            }
        }
    },
    "utils/fastaug/augmentations.py": {
        "torch": {
            "Tensor_202": {
                "variable": {
                    "value": "self.eigval",
                    "possible_values": []
                }
            },
            "Tensor_203": {
                "variable": {
                    "value": "self.eigvec",
                    "possible_values": []
                }
            }
        }
    },
    "utils/misc.py": {
        "torch": {
            "normal_45": {
                "mean": {
                    "value": "m.weight",
                    "possible_values": []
                },
                "std": {
                    "value": "0.001",
                    "possible_values": []
                }
            }
        }
    },
    "utils/mix_dataloader.py": {
        "torch": {
            "cat_37": {
                "tensors": {
                    "value": "[target_main, target_aux]",
                    "possible_values": []
                }
            }
        }
    },
    "utils/visualize.py": {
        "torch": {
            "exp_19": {
                "input": {
                    "value": "-torch.pow(torch.add(x, -b), 2).div(2 * c * c)",
                    "possible_values": []
                }
            },
            "mul_19": {
                "input": {
                    "value": "a",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "cl",
                    "possible_values": []
                },
                "*size": {
                    "value": "[3, x.size(1), x.size(2)]",
                    "possible_values": []
                }
            },
            "unsqueeze_24": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "x",
                    "possible_values": []
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "cl",
                    "possible_values": []
                },
                "*size": {
                    "value": "[x.size(0), 3, x.size(2), x.size(3)]",
                    "possible_values": []
                }
            },
            "pow_19": {
                "input": {
                    "value": "torch.add(x, -b)",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "possible_values": []
                }
            },
            "div_19": {
                "input": {
                    "value": "2 * c * c",
                    "possible_values": []
                }
            },
            "add_19": {
                "input": {
                    "value": "x",
                    "possible_values": []
                },
                "other": {
                    "value": "-b",
                    "possible_values": []
                }
            }
        }
    }
}