{
    "tests/metrics/kid/test_kid.py": {
        "sklearn": {
            "polynomial_kernel_33": {
                "variable": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.codes_g",
                            "Attribute"
                        ]
                    ]
                }
            },
            "polynomial_kernel_34": {
                "variable": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.codes_r",
                            "Attribute"
                        ]
                    ]
                }
            },
            "polynomial_kernel_35": {
                "variable": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.codes_g",
                            "Attribute"
                        ]
                    ]
                },
                "Y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.codes_r",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "torch_mimicry/metrics/kid/kid_utils.py": {
        "sklearn": {
            "polynomial_kernel_29": {
                "variable": {
                    "value": "K_XX",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codes_g",
                            "variable"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "coef0": {
                    "value": "coef0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "polynomial_kernel_30": {
                "variable": {
                    "value": "K_YY",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codes_r",
                            "variable"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "coef0": {
                    "value": "coef0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "polynomial_kernel_31": {
                "variable": {
                    "value": "K_XY",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codes_g",
                            "variable"
                        ]
                    ]
                },
                "Y": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "codes_r",
                            "variable"
                        ]
                    ]
                },
                "degree": {
                    "value": "degree",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "gamma": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "coef0": {
                    "value": "coef0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "tests/metrics/fid/test_fid.py": {
        "tensorflow": {
            "Session_12": {
                "variable": {
                    "value": "self.sess",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/metrics/inception_model/test_inception_utils.py": {
        "tensorflow": {
            "Session_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/metrics/test_compute_fid.py": {
        "tensorflow": {
            "GPUOptions_79": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "str(self.device.index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_83": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=0.15, visible_device_list=str(self.device.index))",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=0.15, visible_device_list=str(self.device.index))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_86": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GPUOptions_106": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "str(self.device.index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_110": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=0.15, visible_device_list=str(self.device.index))",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=0.15, visible_device_list=str(self.device.index))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_113": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_88": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_115": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ones_30": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_56": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_41": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/metrics/test_compute_kid.py": {
        "tensorflow": {
            "GPUOptions_77": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "str(self.device.index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_81": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=0.15, visible_device_list=str(self.device.index))",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=0.15, visible_device_list=str(self.device.index))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_84": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "GPUOptions_103": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_growth": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.15",
                    "type": "float",
                    "possible_values": []
                },
                "visible_device_list": {
                    "value": "str(self.device.index)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_107": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=0.15, visible_device_list=str(self.device.index))",
                            "Call"
                        ],
                        [
                            "tf.GPUOptions(allow_growth=True, per_process_gpu_memory_fraction=0.15, visible_device_list=str(self.device.index))",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_110": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_86": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_112": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(gpu_options=gpu_options)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_113": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "ones_30": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_54": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_39": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_41": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/metrics/compute_fid.py": {
        "tensorflow": {
            "ConfigProto_257": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_261": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_157": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset_images(dataset, split=split, num_samples=num_samples)",
                            "Call"
                        ],
                        [
                            "images.mul_(255).add_(0.5).clamp_(0, 255).permute(0, 2, 3, 1).to('cpu', torch.uint8).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(images, 0)",
                            "Call"
                        ],
                        [
                            "_normalize_images(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_203": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_236": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/metrics/compute_kid.py": {
        "tensorflow": {
            "ConfigProto_257": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_261": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "cat_157": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_dataset_images(dataset, split=split, num_samples=num_samples)",
                            "Call"
                        ],
                        [
                            "images.mul_(255).add_(0.5).clamp_(0, 255).permute(0, 2, 3, 1).to('cpu', torch.uint8).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(images, 0)",
                            "Call"
                        ],
                        [
                            "_normalize_images(images)",
                            "Call"
                        ],
                        [
                            "images",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_203": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_236": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "seed",
                            "Method Argument"
                        ],
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_203": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/metrics/inception_model/inception_utils.py": {
        "tensorflow": {
            "GraphDef_146": {
                "variable": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "import_graph_def_148": {
                "variable": {
                    "value": "_",
                    "type": "variable",
                    "possible_values": []
                },
                "graph_def": {
                    "value": "graph_def",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.GraphDef()",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "inception_model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_145": {
                "name": {
                    "value": "model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inception_path / 'classify_image_graph_def.pb'",
                            "BinOp"
                        ],
                        [
                            "_check_or_download_inception(inception_path)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "rb",
                    "type": "str",
                    "possible_values": []
                }
            },
            "TensorShape_77": {
                "variable": {
                    "value": "o.__dict__[_shape_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "torch_mimicry/metrics/inception_score/inception_score_utils.py": {
        "tensorflow": {
            "ConfigProto_36": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_56": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.squeeze(pool3, [1, 2])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_operation_by_name('softmax/logits/MatMul').inputs[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softmax_57": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.squeeze(pool3, [1, 2]), w)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_46": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.ConfigProto()",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_56": {
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sess.graph.get_tensor_by_name('pool_3:0')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1, 2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "examples/eval_pretrained.py": {
        "torch": {
            "device_19": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "ones_60": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/sngan_example.py": {
        "torch": {
            "device_12": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_14": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mmc.datasets.load_dataset(root='./datasets', name='cifar10')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_22": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_23": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_12": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "examples/ssgan_tutorial.py": {
        "torch": {
            "device_271": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_273": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mmc.datasets.load_dataset(root='./datasets', name='cifar10')",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_281": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_282": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_35": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_40": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_41": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_114": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_135": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ret, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "ret_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ret_labels, dim=0).to(ret.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_205": {
                "variable": {
                    "value": "err_SS",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l_y(h)",
                            "Call"
                        ],
                        [
                            "self.forward(images_rot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "class_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._rotate_batch(images=images)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_180": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._rot_tensor(images[idx], deg=degrees[rot_label])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(rot_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_184": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(rot_label))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(label, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_271": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "tests/datasets/test_data_utils.py": {
        "torch": {
            "load_34": {
                "variable": {
                    "value": "(_, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "meta_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(imagenet_dir, 'meta.bin')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/datasets/test_image_loader.py": {
        "torch": {
            "load_57": {
                "variable": {
                    "value": "(_, classes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "meta_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(imagenet_dir, 'meta.bin')",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_16": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_18": {
                "variable": {
                    "value": "self.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "tests/metrics/inception_score/test_inception_score.py": {
        "torch": {
            "device_18": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/metrics/test_compute_is.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_30": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/metrics/test_compute_metrics.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3072",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_layers.py": {
        "torch": {
            "ones_14": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_15": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "int"
                        ],
                        [
                            "10",
                            "int"
                        ]
                    ]
                },
                "size": {
                    "value": "(self.N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_19": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_30": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "16",
                            "int"
                        ]
                    ]
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_37": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_49": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_losses.py": {
        "torch": {
            "ones_8": {
                "variable": {
                    "value": "self.output_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_9": {
                "variable": {
                    "value": "self.output_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_10": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_resblocks.py": {
        "torch": {
            "ones_10": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_25": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/modules/test_spectral_norm.py": {
        "torch": {
            "spectral_norm_16": {
                "variable": {
                    "value": "conv_def",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Conv2d(self.n_in, self.n_out, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_24": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_37": {
                "variable": {
                    "value": "linear_def",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Linear(self.n_in, self.n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_42": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "spectral_norm_51": {
                "variable": {
                    "value": "embedding_def",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "nn.Embedding(self.N, self.n_out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_57": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_9": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_37": {
                "in_features": {
                    "value": "self.n_in",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_51": {
                "num_embeddings": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.n_out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_33": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(X)",
                            "Call"
                        ],
                        [
                            "linear(X)",
                            "Call"
                        ],
                        [
                            "embedding(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_47": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(X)",
                            "Call"
                        ],
                        [
                            "linear(X)",
                            "Call"
                        ],
                        [
                            "embedding(X)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_62": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv(X)",
                            "Call"
                        ],
                        [
                            "linear(X)",
                            "Call"
                        ],
                        [
                            "embedding(X)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/nets/basemodel/test_basemodel.py": {
        "torch": {
            "Linear_15": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_25": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "restored_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/cgan_pd/test_cgan_pd_128.py": {
        "torch": {
            "ones_18": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_19": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_20": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/cgan_pd/test_cgan_pd_32.py": {
        "torch": {
            "ones_18": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_19": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_20": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/dcgan/test_dcgan_128.py": {
        "torch": {
            "ones_24": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_30": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/dcgan/test_dcgan_32.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/dcgan/test_dcgan_48.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/dcgan/test_dcgan_64.py": {
        "torch": {
            "ones_24": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_30": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/dcgan/test_dcgan_cifar.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/gan/test_cgan.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "self.output_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_47": {
                "variable": {
                    "value": "self.output_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_23": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/gan/test_gan.py": {
        "torch": {
            "Linear_11": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_45": {
                "variable": {
                    "value": "self.output_fake",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_46": {
                "variable": {
                    "value": "self.output_real",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_14": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_23": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/infomax_gan/test_infomax_gan_128.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/infomax_gan/test_infomax_gan_32.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/infomax_gan/test_infomax_gan_48.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/infomax_gan/test_infomax_gan_64.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_42": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/infomax_gan/test_infomax_gan_base.py": {
        "torch": {
            "ones_27": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nrkhs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_28": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nrkhs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_40": {
                "variable": {
                    "value": "local_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_41": {
                "variable": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nrkhs",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/sagan/test_sagan_128.py": {
        "torch": {
            "ones_18": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_19": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_20": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/sagan/test_sagan_32.py": {
        "torch": {
            "ones_18": {
                "variable": {
                    "value": "self.noise",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_19": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randint_20": {
                "variable": {
                    "value": "self.Y",
                    "type": "Attribute",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self.N,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_45": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_46": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/sngan/test_sngan_128.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/sngan/test_sngan_32.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/sngan/test_sngan_48.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/sngan/test_sngan_64.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_38": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/ssgan/test_ssgan_128.py": {
        "torch": {
            "ones_24": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_30": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_41": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/ssgan/test_ssgan_32.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/ssgan/test_ssgan_48.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/ssgan/test_ssgan_64.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/ssgan/test_ssgan_base.py": {
        "torch": {
            "ones_16": {
                "*size": {
                    "value": "x.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_49": {
                "input": {
                    "value": "(images - check) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_34": {
                "input": {
                    "value": "(x - image) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/wgan_gp/test_wgan_gp_128.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/wgan_gp/test_wgan_gp_32.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/wgan_gp/test_wgan_gp_48.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/wgan_gp/test_wgan_gp_64.py": {
        "torch": {
            "ones_23": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_29": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.N",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.C",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.H",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_39": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_40": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/nets/wgan_gp/test_wgan_gp_resblocks.py": {
        "torch": {
            "ones_10": {
                "variable": {
                    "value": "self.images",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_25": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(4,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_logger.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3072",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_48": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3072",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_66": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_scheduler.py": {
        "torch": {
            "Linear_10": {
                "variable": {
                    "value": "self.netD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_11": {
                "variable": {
                    "value": "self.netG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_21": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_22": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_47": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_64": {
                "variable": {
                    "value": "optD",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_D",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_67": {
                "variable": {
                    "value": "optG",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_G",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "tests/training/test_trainer.py": {
        "torch": {
            "Linear_46": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "3072",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "3072",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_72": {
                "variable": {
                    "value": "self.dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.dataset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "50",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_82": {
                "variable": {
                    "value": "self.optD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netD.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_83": {
                "variable": {
                    "value": "self.optG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.netG.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.0002",
                    "type": "float",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.0, 0.9)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "device_141": {
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "sum_200": {
                "input": {
                    "value": "(images_1 - images_2) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_206": {
                "input": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "default_params.items()",
                            "Call"
                        ],
                        [
                            "net.parameters()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "tests/utils/test_common.py": {
        "torch": {
            "squeeze_30": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "common.load_images(n=1)",
                            "Call"
                        ],
                        [
                            "torch.squeeze(image, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/datasets/data_utils.py": {
        "torch": {
            "ConcatDataset_423": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_dataset, test_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ConcatDataset_490": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "datasets": {
                    "value": "[train_dataset, test_dataset]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/datasets/image_loader.py": {
        "torch": {
            "unsqueeze_241": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array(dataset[choice][0])",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=0)",
                            "Call"
                        ],
                        [
                            "Image.open(filenames[int(choices[i])])",
                            "Call"
                        ],
                        [
                            "transforms.CenterCrop(224)(img)",
                            "Call"
                        ],
                        [
                            "transforms.Resize(size)(img)",
                            "Call"
                        ],
                        [
                            "np.asarray(img)",
                            "Call"
                        ],
                        [
                            "np.concatenate([tmp, tmp, tmp], axis=2)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=0)",
                            "Call"
                        ],
                        [
                            "img[:, :, :3]",
                            "Subscript"
                        ],
                        [
                            "data[0]",
                            "Subscript"
                        ],
                        [
                            "data",
                            "variable"
                        ],
                        [
                            "torch.unsqueeze(img, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/datasets/imagenet/imagenet.py": {
        "torch": {
            "save_143": {
                "obj": {
                    "value": "(wnid_to_class, val_wnids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "f": {
                    "value": "self.meta_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_137": {
                "f": {
                    "value": "self.meta_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/datasets/imagenet/imagenet_utils.py": {
        "torch": {}
    },
    "torch_mimicry/metrics/compute_is.py": {
        "torch": {
            "device_68": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_68": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/metrics/compute_metrics.py": {
        "torch": {
            "device_98": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_98": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/modules/biggan_resblocks.py": {
        "torch": {
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_117": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_239": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_315": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_102": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_110": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_236": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_311": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_312": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_313": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_144": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_249": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/modules/layers.py": {
        "torch": {
            "Parameter_73": {
                "variable": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.tensor(0.0)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "max_pool2d_100": {
                "variable": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(phi, [2, 2], stride=2)",
                            "Call"
                        ],
                        [
                            "phi.view(N, C >> 3, downsampled_num)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_104": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.phi(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(phi, [2, 2], stride=2)",
                            "Call"
                        ],
                        [
                            "phi.view(N, C >> 3, downsampled_num)",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "attn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.bmm(theta.transpose(1, 2), phi)",
                            "Call"
                        ],
                        [
                            "F.softmax(attn, -1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_pool2d_110": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(g, [2, 2], stride=2)",
                            "Call"
                        ],
                        [
                            "g.view(N, C >> 1, downsampled_num)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_114": {
                "variable": {
                    "value": "attn_g",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.g(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(g, [2, 2], stride=2)",
                            "Call"
                        ],
                        [
                            "g.view(N, C >> 1, downsampled_num)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "attn.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_171": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_features",
                            "Method Argument"
                        ]
                    ]
                },
                "affine": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_172": {
                "variable": {
                    "value": "self.embed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "num_features * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_48": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_feat >> 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "variable": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_feat >> 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "variable": {
                    "value": "self.g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_feat >> 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.num_feat >> 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.num_feat",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "spectral_norm_131": {
                "module": {
                    "value": "nn.Conv2d(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_142": {
                "module": {
                    "value": "nn.Linear(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "spectral_norm_153": {
                "module": {
                    "value": "nn.Embedding(*args, **kwargs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_73": {
                "data": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Linear_142": {
                "in_features": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Embedding_153": {
                "num_embeddings": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/modules/losses.py": {
        "torch": {
            "full_27": {
                "variable": {
                    "value": "real_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output_fake.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "real_label_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "output_fake.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_55": {
                "variable": {
                    "value": "fake_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output_fake.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "fake_label_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "output_fake.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_58": {
                "variable": {
                    "value": "real_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(output_real.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "real_label_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0",
                            "Method Argument"
                        ],
                        [
                            "1.0",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "output_real.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "variable": {
                    "value": "output_fake",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(output_fake)",
                            "Call"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_12": {
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_89": {
                "input": {
                    "value": "torch.log(output_fake + 1e-08)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_134": {
                "input": {
                    "value": "1.0 - output_real",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_135": {
                "input": {
                    "value": "1.0 + output_fake",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_135": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_89": {
                "input": {
                    "value": "output_fake + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/modules/resblocks.py": {
        "torch": {
            "ReLU_82": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_200": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_273": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "avg_pool2d_287": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.b1(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self._upsample_conv(h, self.c1) if self.upsample else self.c1(h)",
                            "IfExp"
                        ],
                        [
                            "self.b2(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c2(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.b1(h, y)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self._upsample_conv(h, self.c1) if self.upsample else self.c1(h)",
                            "IfExp"
                        ],
                        [
                            "self.b2(h, y)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c2(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c1(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c2(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.c1(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c2(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_62": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_67": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_74": {
                "variable": {
                    "value": "self.b1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm2d_75": {
                "variable": {
                    "value": "self.b2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_197": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.hidden_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_224": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.b1(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self._upsample_conv(h, self.c1) if self.upsample else self.c1(h)",
                            "IfExp"
                        ],
                        [
                            "self.b2(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c2(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.b1(h, y)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self._upsample_conv(h, self.c1) if self.upsample else self.c1(h)",
                            "IfExp"
                        ],
                        [
                            "self.b2(h, y)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c2(h)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c1(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c2(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.c1(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "self.c2(h)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(h, 2)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_269": {
                "variable": {
                    "value": "self.c1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_271": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_96": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_109": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._upsample_conv(x, self.c_sc) if self.upsample else self.c_sc(x)",
                            "IfExp"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_210": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ],
                        [
                            "out_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_295": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._upsample_conv(x, self.c_sc) if self.upsample else self.c_sc(x)",
                            "IfExp"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_234": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._upsample_conv(x, self.c_sc) if self.upsample else self.c_sc(x)",
                            "IfExp"
                        ],
                        [
                            "self.c_sc(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/modules/spectral_norm.py": {
        "torch": {
            "mm_46": {
                "input": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(self.weight.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                },
                "mat2": {
                    "value": "v.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_87": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.sn_weights()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_112": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.sn_weights()",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "embedding_130": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.sn_weights()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "n_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_29": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "normalize_42": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(u, W)",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normalize_43": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(v, W.t())",
                    "type": "Call",
                    "possible_values": []
                },
                "eps": {
                    "value": "eps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-12",
                            "Method Argument"
                        ],
                        [
                            "1e-12",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_grad_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "matmul_42": {
                "input": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": [
                        [
                            "u",
                            "Call"
                        ],
                        [
                            "F.normalize(torch.matmul(v, W.t()), eps=eps)",
                            "Call"
                        ],
                        [
                            "self._power_iteration(W=W, u=self.u, num_iters=self.num_iters, eps=self.eps)",
                            "Call"
                        ],
                        [
                            "u",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight.view(self.weight.shape[0], -1)",
                            "Call"
                        ],
                        [
                            "W",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_43": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.normalize(torch.matmul(u, W), eps=eps)",
                            "Call"
                        ],
                        [
                            "self._power_iteration(W=W, u=self.u, num_iters=self.num_iters, eps=self.eps)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "W.t()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/basemodel/basemodel.py": {
        "torch": {
            "load_42": {
                "variable": {
                    "value": "ckpt_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_file",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_95": {
                "obj": {
                    "value": "ckpt_dict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(ckpt_file)",
                            "Call"
                        ],
                        [
                            "torch.load(ckpt_file, map_location=lambda storage, loc: storage)",
                            "Call"
                        ],
                        [
                            "{'model_state_dict': self.state_dict(), 'optimizer_state_dict': optimizer.state_dict() if optimizer is not None else None, 'global_step': global_step}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(directory, name)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_44": {
                "variable": {
                    "value": "ckpt_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "ckpt_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ckpt_file",
                            "Method Argument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/cgan_pd/cgan_pd_128.py": {
        "torch": {
            "Linear_37": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_58": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "variable": {
                    "value": "self.c7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_93": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_118": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_128": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_152": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h, y)",
                            "Call"
                        ],
                        [
                            "self.block3(h, y)",
                            "Call"
                        ],
                        [
                            "self.block4(h, y)",
                            "Call"
                        ],
                        [
                            "self.block5(h, y)",
                            "Call"
                        ],
                        [
                            "self.block6(h, y)",
                            "Call"
                        ],
                        [
                            "self.b7(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c7(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_79": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_157": {
                "input": {
                    "value": "w_y * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/cgan_pd/cgan_pd_32.py": {
        "torch": {
            "Linear_32": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_45": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_78": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_110": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_132": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h, y)",
                            "Call"
                        ],
                        [
                            "self.block3(h, y)",
                            "Call"
                        ],
                        [
                            "self.block4(h, y)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_66": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "w_y * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/dcgan/dcgan_128.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.c7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_96": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_97": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_122": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.b7(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c7(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/dcgan/dcgan_32.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/dcgan/dcgan_48.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_88": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/dcgan/dcgan_64.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.b6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.c6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c6(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.l6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_115": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.b6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c6(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/dcgan/dcgan_cifar.py": {
        "torch": {
            "Linear_30": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_36": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_89": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_90": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_113": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/gan/cgan.py": {
        "torch": {
            "randn_61": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_images, self.nz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_99": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_images, self.nz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_50": {
                "variable": {
                    "value": "fake_class_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_images,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_56": {
                "variable": {
                    "value": "fake_class_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "high": {
                    "value": "c + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_images,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_88": {
                "variable": {
                    "value": "fake_class_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_images,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randint_94": {
                "variable": {
                    "value": "fake_class_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "high": {
                    "value": "c + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "size": {
                    "value": "(num_images,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "torch_mimicry/nets/gan/gan.py": {
        "torch": {
            "randn_41": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_images, self.nz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.device",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_178": {
                "variable": {
                    "value": "D_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(real_images)",
                            "Call"
                        ],
                        [
                            "self.forward(real_images)",
                            "Call"
                        ],
                        [
                            "output_real",
                            "Method Argument"
                        ],
                        [
                            "output_real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_178": {
                "variable": {
                    "value": "D_x",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_179": {
                "variable": {
                    "value": "D_Gz",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(fake_images)",
                            "Call"
                        ],
                        [
                            "self.forward(fake_images)",
                            "Call"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_179": {
                "variable": {
                    "value": "D_Gz",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_279": {
                "variable": {
                    "value": "real_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(real_images)",
                            "Call"
                        ],
                        [
                            "self.forward(real_images)",
                            "Call"
                        ],
                        [
                            "output_real",
                            "Method Argument"
                        ],
                        [
                            "output_real",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_280": {
                "variable": {
                    "value": "fake_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(fake_images)",
                            "Call"
                        ],
                        [
                            "self.forward(fake_images)",
                            "Call"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ],
                        [
                            "output_fake",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_288": {
                "variable": {
                    "value": "fake_adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_output - real_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_292": {
                "variable": {
                    "value": "fake_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "fake_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(fake_output - real_value)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fake_imgs_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_images.clone()",
                            "Call"
                        ],
                        [
                            "Variable(fake_imgs_adv, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "fake_imgs_adv - fake_grad[0].clamp(-1 * t, t)",
                            "BinOp"
                        ],
                        [
                            "fake_imgs_adv.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_297": {
                "variable": {
                    "value": "real_adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_output - fake_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_298": {
                "variable": {
                    "value": "real_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(real_output - fake_value)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "real_imgs_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_images.clone()",
                            "Call"
                        ],
                        [
                            "Variable(real_imgs_adv, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "real_imgs_adv - real_grad[0].clamp(-1 * t, t)",
                            "BinOp"
                        ],
                        [
                            "real_imgs_adv.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torch_mimicry/nets/infomax_gan/infomax_gan_128.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.c7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self.local_feat_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DBlockOptimized(3, self.ndf >> 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "variable": {
                    "value": "self.global_feat_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DBlock(self.ndf, self.ndf, downsample=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_137": {
                "variable": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_feat_blocks(local_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(global_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(global_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/infomax_gan/infomax_gan_32.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.local_feat_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DBlockOptimized(3, self.ndf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.global_feat_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DBlock(self.ndf, self.ndf, downsample=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_131": {
                "variable": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_feat_blocks(local_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(global_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(global_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/infomax_gan/infomax_gan_48.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.local_feat_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DBlockOptimized(3, self.ndf >> 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_86": {
                "variable": {
                    "value": "self.global_feat_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DBlock(self.ndf >> 1, self.ndf, downsample=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_132": {
                "variable": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_feat_blocks(local_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(global_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(global_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/infomax_gan/infomax_gan_64.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.b6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.c6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c6(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_82": {
                "variable": {
                    "value": "self.local_feat_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DBlockOptimized(3, self.ndf >> 4)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "variable": {
                    "value": "self.global_feat_blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "DBlock(self.ndf >> 1, self.ndf, downsample=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_134": {
                "variable": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_feat_blocks(local_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(global_feat)",
                            "Call"
                        ],
                        [
                            "torch.sum(global_feat, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/infomax_gan/infomax_gan_base.py": {
        "torch": {
            "matmul_177": {
                "variable": {
                    "value": "u_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l_p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l.permute(0, 2, 1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "unsqueeze_177": {
                "variable": {
                    "value": "u_p",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_178": {
                "variable": {
                    "value": "u_n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "m_n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "m_p.reshape(-1, units)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "l_n.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "pred_lgt",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[u_p, u_n]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_softmax_194": {
                "variable": {
                    "value": "pred_log",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pred_lgt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([u_p, u_n], dim=2)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "flatten_221": {
                "variable": {
                    "value": "local_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.local_nrkhs_a(local_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(local_feat)",
                            "Call"
                        ],
                        [
                            "self.local_nrkhs_b(local_feat)",
                            "Call"
                        ],
                        [
                            "local_feat + local_feat_sc",
                            "BinOp"
                        ],
                        [
                            "self._project_local(local_feat)",
                            "Call"
                        ],
                        [
                            "torch.flatten(local_feat, start_dim=2, end_dim=3)",
                            "Call"
                        ],
                        [
                            "local_feat",
                            "Method Argument"
                        ],
                        [
                            "local_feat",
                            "Method Argument"
                        ],
                        [
                            "local_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "end_dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_223": {
                "variable": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "global_feat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.global_nrkhs_a(global_feat)",
                            "Call"
                        ],
                        [
                            "self.activation(global_feat)",
                            "Call"
                        ],
                        [
                            "self.global_nrkhs_b(global_feat)",
                            "Call"
                        ],
                        [
                            "global_feat + global_feat_sc",
                            "BinOp"
                        ],
                        [
                            "self._project_global(global_feat)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(global_feat, 2)",
                            "Call"
                        ],
                        [
                            "global_feat",
                            "Method Argument"
                        ],
                        [
                            "global_feat",
                            "Method Argument"
                        ],
                        [
                            "global_feat",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_351": {
                "variable": {
                    "value": "real_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(real_images)",
                            "Call"
                        ],
                        [
                            "self.forward(real_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_352": {
                "variable": {
                    "value": "fake_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "netD(fake_images)",
                            "Call"
                        ],
                        [
                            "self.forward(fake_images)",
                            "Call"
                        ],
                        [
                            "self.forward(fake_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_360": {
                "variable": {
                    "value": "fake_adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_output - real_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_364": {
                "variable": {
                    "value": "fake_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "fake_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(fake_output - real_value)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fake_imgs_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_images.clone()",
                            "Call"
                        ],
                        [
                            "Variable(fake_imgs_adv, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "fake_imgs_adv - fake_grad[0].clamp(-1 * t, t)",
                            "BinOp"
                        ],
                        [
                            "fake_imgs_adv.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_369": {
                "variable": {
                    "value": "real_adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_output - fake_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_370": {
                "variable": {
                    "value": "real_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(real_output - fake_value)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "real_imgs_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_images.clone()",
                            "Call"
                        ],
                        [
                            "Variable(real_imgs_adv, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "real_imgs_adv - real_grad[0].clamp(-1 * t, t)",
                            "BinOp"
                        ],
                        [
                            "real_imgs_adv.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_182": {
                "n": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": [
                        [
                            "l.size()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "torch_mimicry/nets/sagan/sagan_128.py": {
        "torch": {
            "BatchNorm2d_63": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_65": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_104": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_142": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h, y)",
                            "Call"
                        ],
                        [
                            "self.block3(h, y)",
                            "Call"
                        ],
                        [
                            "self.block4(h, y)",
                            "Call"
                        ],
                        [
                            "self.attn_block(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h, y)",
                            "Call"
                        ],
                        [
                            "self.block6(h, y)",
                            "Call"
                        ],
                        [
                            "self.b7(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c7(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.attn_block(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_89": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_175": {
                "input": {
                    "value": "w_y * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/sagan/sagan_32.py": {
        "torch": {
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReLU_55": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_90": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_125": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_148": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h, y)",
                            "Call"
                        ],
                        [
                            "self.block3(h, y)",
                            "Call"
                        ],
                        [
                            "self.attn_block(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h, y)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.attn_block(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randint_77": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "low": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "high": {
                    "value": "self.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_153": {
                "input": {
                    "value": "w_y * h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/sngan/sngan_128.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.c7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_59": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_83": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_108": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.b7(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c7(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/sngan/sngan_32.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_100": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/sngan/sngan_48.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/sngan/sngan_64.py": {
        "torch": {
            "Linear_26": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.b6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.c6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c6(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_104": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.b6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c6(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/ssgan/ssgan_128.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_33": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.c7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_60": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_85": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_94": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_118": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.b7(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c7(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/ssgan/ssgan_32.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ngf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_87": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/ssgan/ssgan_48.py": {
        "torch": {
            "Linear_28": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_89": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_112": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/ssgan/ssgan_64.py": {
        "torch": {
            "Linear_27": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "self.b6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.c6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c6(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_91": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_114": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.b6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c6(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.sum(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/ssgan/ssgan_base.py": {
        "torch": {
            "cat_151": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ret, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_152": {
                "variable": {
                    "value": "ret_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ret_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(ret_labels, dim=0).to(ret.device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_173": {
                "variable": {
                    "value": "err_SS",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(images_rot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "class_labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._rotate_batch(images=images)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_284": {
                "variable": {
                    "value": "real_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(real_images)",
                            "Call"
                        ],
                        [
                            "self.forward(real_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_285": {
                "variable": {
                    "value": "fake_value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_fake",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(fake_images)",
                            "Call"
                        ],
                        [
                            "self.forward(fake_images)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_293": {
                "variable": {
                    "value": "fake_adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_output - real_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_297": {
                "variable": {
                    "value": "fake_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "fake_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(fake_output - real_value)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fake_imgs_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fake_images.clone()",
                            "Call"
                        ],
                        [
                            "Variable(fake_imgs_adv, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "fake_imgs_adv - fake_grad[0].clamp(-1 * t, t)",
                            "BinOp"
                        ],
                        [
                            "fake_imgs_adv.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_302": {
                "variable": {
                    "value": "real_adv_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "real_output - fake_value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "grad_303": {
                "variable": {
                    "value": "real_grad",
                    "type": "variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_adv_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(real_output - fake_value)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "real_imgs_adv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_images.clone()",
                            "Call"
                        ],
                        [
                            "Variable(real_imgs_adv, requires_grad=True)",
                            "Call"
                        ],
                        [
                            "real_imgs_adv - real_grad[0].clamp(-1 * t, t)",
                            "BinOp"
                        ],
                        [
                            "real_imgs_adv.clamp(-1, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "unsqueeze_141": {
                "variable": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._rot_tensor(images[idx], deg=degrees[rot_label])",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(image, 0)",
                            "Call"
                        ],
                        [
                            "image",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_144": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(rot_label)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "unsqueeze_145": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(rot_label))",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(label, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/wgan_gp/wgan_gp_128.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "variable": {
                    "value": "self.b7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "variable": {
                    "value": "self.c7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_57": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c7(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "self.l7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_82": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_107": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.b7(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c7(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.block6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.mean(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/wgan_gp/wgan_gp_32.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.l5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_77": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_100": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.mean(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/wgan_gp/wgan_gp_48.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.b5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 3",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_53": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c5(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.l6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_102": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.b5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c5(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.mean(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/wgan_gp/wgan_gp_64.py": {
        "torch": {
            "Linear_25": {
                "variable": {
                    "value": "self.l1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.nz",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.bottom_width ** 2 * self.ngf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.b6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_31": {
                "variable": {
                    "value": "self.c6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.ngf >> 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tanh_55": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.c6(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "self.l6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.ndf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_79": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_103": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.l1(x)",
                            "Call"
                        ],
                        [
                            "h.view(x.shape[0], -1, self.bottom_width, self.bottom_width)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.b6(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.tanh(self.c6(h))",
                            "Call"
                        ],
                        [
                            "x",
                            "variable"
                        ],
                        [
                            "self.block1(h)",
                            "Call"
                        ],
                        [
                            "self.block2(h)",
                            "Call"
                        ],
                        [
                            "self.block3(h)",
                            "Call"
                        ],
                        [
                            "self.block4(h)",
                            "Call"
                        ],
                        [
                            "self.block5(h)",
                            "Call"
                        ],
                        [
                            "self.activation(h)",
                            "Call"
                        ],
                        [
                            "torch.mean(h, dim=(2, 3))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/wgan_gp/wgan_gp_base.py": {
        "torch": {
            "rand_178": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "N",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "grad_191": {
                "outputs": {
                    "value": "disc_interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.forward(interpolates)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "interpolates",
                    "type": "variable",
                    "possible_values": [
                        [
                            "alpha * real_images.detach() + (1 - alpha) * fake_images.detach()",
                            "BinOp"
                        ],
                        [
                            "interpolates.to(device)",
                            "Call"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(disc_interpolates.size()).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_193": {
                "*size": {
                    "value": "disc_interpolates.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/nets/wgan_gp/wgan_gp_resblocks.py": {
        "torch": {
            "Conv2d_141": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "variable": {
                    "value": "self.c_sc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "self.in_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.out_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/training/distributed_trainer.py": {
        "torch": {
            "device_122": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/training/logger.py": {
        "torch": {
            "SummaryWriter_51": {
                "variable": {
                    "value": "writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "os.path.join(self.log_dir, 'data', metric)",
                    "type": "Call",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "self.flush_secs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_153": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([i % num_classes for i in range(num_images)])",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(labels).to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_140": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'fixed_noise_nz_{}.pth'.format(nz))",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_143": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_images, nz)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_175": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_images, netG.nz)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_144": {
                "obj": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(output_file)",
                            "Call"
                        ],
                        [
                            "torch.randn((num_images, nz))",
                            "Call"
                        ],
                        [
                            "torch.randn((num_images, netG.nz), device=self.device)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(output_dir, 'fixed_noise_nz_{}.pth'.format(nz))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_173": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/training/trainer.py": {
        "torch": {
            "device_141": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_142": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/training/trainer_backup.py": {
        "torch": {
            "device_139": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "is_available_140": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "torch_mimicry/utils/common.py": {
        "torch": {
            "randn_71": {
                "variable": {
                    "value": "images",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_72": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([0 * n])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}