{
    "dall_e/__init__.py": {
        "torch": {
            "load_15": {
                "f": {
                    "value": "buf",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "load_18": {
                "f": {
                    "value": "f",
                    "type": "variable",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "dall_e/decoder.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.res_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('relu_1', nn.ReLU()), ('conv_1', make_conv(self.n_in, self.n_hid, 1)), ('relu_2', nn.ReLU()), ('conv_2', make_conv(self.n_hid, self.n_hid, 3)), ('relu_3', nn.ReLU()), ('conv_3', make_conv(self.n_hid, self.n_hid, 3)), ('relu_4', nn.ReLU()), ('conv_4', make_conv(self.n_hid, self.n_out, 3))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('input', make_conv(self.vocab_size, self.n_init, 1, use_float16=False)), ('group_1', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(self.n_init if i == 0 else 8 * self.n_hid, 8 * self.n_hid)) for i in blk_range], ('upsample', nn.Upsample(scale_factor=2, mode='nearest'))]))), ('group_2', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(8 * self.n_hid if i == 0 else 4 * self.n_hid, 4 * self.n_hid)) for i in blk_range], ('upsample', nn.Upsample(scale_factor=2, mode='nearest'))]))), ('group_3', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(4 * self.n_hid if i == 0 else 2 * self.n_hid, 2 * self.n_hid)) for i in blk_range], ('upsample', nn.Upsample(scale_factor=2, mode='nearest'))]))), ('group_4', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(2 * self.n_hid if i == 0 else 1 * self.n_hid, 1 * self.n_hid)) for i in blk_range]]))), ('output', nn.Sequential(OrderedDict([('relu', nn.ReLU()), ('conv', make_conv(1 * self.n_hid, 2 * self.output_channels, 1))])))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_50": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(self.n_init if i == 0 else 8 * self.n_hid, 8 * self.n_hid)) for i in blk_range], ('upsample', nn.Upsample(scale_factor=2, mode='nearest'))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(8 * self.n_hid if i == 0 else 4 * self.n_hid, 4 * self.n_hid)) for i in blk_range], ('upsample', nn.Upsample(scale_factor=2, mode='nearest'))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_73": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(4 * self.n_hid if i == 0 else 2 * self.n_hid, 2 * self.n_hid)) for i in blk_range], ('upsample', nn.Upsample(scale_factor=2, mode='nearest'))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_77": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(2 * self.n_hid if i == 0 else 1 * self.n_hid, 1 * self.n_hid)) for i in blk_range]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "*args": {
                    "value": "OrderedDict([('relu', nn.ReLU()), ('conv', make_conv(1 * self.n_hid, 2 * self.output_channels, 1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Upsample_67": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_71": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Upsample_75": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "mode": {
                    "value": "nearest",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dall_e/encoder.py": {
        "torch": {
            "Sequential_28": {
                "variable": {
                    "value": "self.res_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('relu_1', nn.ReLU()), ('conv_1', make_conv(self.n_in, self.n_hid, 3)), ('relu_2', nn.ReLU()), ('conv_2', make_conv(self.n_hid, self.n_hid, 3)), ('relu_3', nn.ReLU()), ('conv_3', make_conv(self.n_hid, self.n_hid, 3)), ('relu_4', nn.ReLU()), ('conv_4', make_conv(self.n_hid, self.n_out, 1))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "OrderedDict([('input', make_conv(self.input_channels, 1 * self.n_hid, 7)), ('group_1', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(1 * self.n_hid, 1 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))]))), ('group_2', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(1 * self.n_hid if i == 0 else 2 * self.n_hid, 2 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))]))), ('group_3', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(2 * self.n_hid if i == 0 else 4 * self.n_hid, 4 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))]))), ('group_4', nn.Sequential(OrderedDict([*[(f'block_{i + 1}', make_blk(4 * self.n_hid if i == 0 else 8 * self.n_hid, 8 * self.n_hid)) for i in blk_range]]))), ('output', nn.Sequential(OrderedDict([('relu', nn.ReLU()), ('conv', make_conv(8 * self.n_hid, self.vocab_size, 1, use_float16=False))])))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_49": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_33": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(1 * self.n_hid, 1 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_68": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(1 * self.n_hid if i == 0 else 2 * self.n_hid, 2 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_72": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(2 * self.n_hid if i == 0 else 4 * self.n_hid, 4 * self.n_hid)) for i in blk_range], ('pool', nn.MaxPool2d(kernel_size=2))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "OrderedDict([*[(f'block_{i + 1}', make_blk(4 * self.n_hid if i == 0 else 8 * self.n_hid, 8 * self.n_hid)) for i in blk_range]])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "*args": {
                    "value": "OrderedDict([('relu', nn.ReLU()), ('conv', make_conv(8 * self.n_hid, self.vocab_size, 1, use_float16=False))])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_66": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_70": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_74": {
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_80": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dall_e/utils.py": {
        "torch": {
            "empty_23": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.n_out, self.n_in, self.kw, self.kw)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.n_out,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "self.requires_grad",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clamp_59": {
                "input": {
                    "value": "(x - logit_laplace_eps) / (1 - 2 * logit_laplace_eps)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_43": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.half()",
                            "Call"
                        ],
                        [
                            "x.float()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty((self.n_out, self.n_in, self.kw, self.kw), dtype=torch.float32, device=self.device, requires_grad=self.requires_grad)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.n_out,), dtype=torch.float32, device=self.device, requires_grad=self.requires_grad)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "(self.kw - 1) // 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_17": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Parameter_29": {
                "data": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros((self.n_out,), dtype=torch.float32, device=self.device, requires_grad=self.requires_grad)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}