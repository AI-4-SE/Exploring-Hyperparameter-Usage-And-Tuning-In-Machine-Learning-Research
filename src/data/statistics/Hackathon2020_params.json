{
    "AB/binary_cluster.py": {
        "sklearn": {}
    },
    "Enigma/Enigma-master/Classical_Gan/gan_classical.py": {
        "tensorflow": {
            "load_model_17": {
                "variable": {
                    "value": "self.enigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "filepath": {
                    "value": "self.model_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "compile": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "normal_24": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 100]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_26": {
                "variable": {
                    "value": "kitty",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.enigma(noise, training=False)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[24, 24]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "greater_27": {
                "variable": {
                    "value": "fluff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "kitty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(cat, [24, 24])",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cast_28": {
                "variable": {
                    "value": "puff",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fluff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.greater(kitty, 0.5)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Enigma/Enigma-master/qGAN/qGAN.py": {
        "tensorflow": {
            "divide_193": {
                "variable": {
                    "value": "to_0_1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.add(gen_z_meas, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_238": {
                "variable": {
                    "value": "gen_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(size=(2 * n_qubits,))",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_239": {
                "variable": {
                    "value": "disc_weights",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "init_disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.normal(size=(3 * n_qubits - 1,))",
                            "Call"
                        ]
                    ]
                }
            },
            "SGD_244": {
                "variable": {
                    "value": "optimiser",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Checkpoint_245": {
                "variable": {
                    "value": "chkpt",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimiser",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.optimizers.SGD(lr)",
                            "Call"
                        ]
                    ]
                },
                "disc_weights": {
                    "value": "disc_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(init_disc)",
                            "Call"
                        ]
                    ]
                },
                "gen_weights": {
                    "value": "gen_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(init_gen)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_197": {
                "variable": {
                    "value": "weight_c",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather(to_0_1, indices[:, i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_198": {
                "variable": {
                    "value": "weight_r",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather(to_0_1, indices[i, :])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_199": {
                "variable": {
                    "value": "weight_diag",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.gather(to_0_1, indices[i, i])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_193": {
                "x": {
                    "value": "gen_z_meas",
                    "type": "variable",
                    "possible_values": []
                },
                "y": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_211": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientTape_218": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "gather_197": {
                "params": {
                    "value": "to_0_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.add(gen_z_meas, 1), 2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[:, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_198": {
                "params": {
                    "value": "to_0_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.add(gen_z_meas, 1), 2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[i, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "gather_199": {
                "params": {
                    "value": "to_0_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.divide(tf.add(gen_z_meas, 1), 2)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices[i, i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "abs_200": {
                "x": {
                    "value": "tf.subtract(1, weight_c)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_201": {
                "x": {
                    "value": "tf.subtract(1, weight_r)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "subtract_200": {
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_c",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.gather(to_0_1, indices[:, i]))",
                            "Call"
                        ]
                    ]
                }
            },
            "subtract_201": {
                "x": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "weight_r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.gather(to_0_1, indices[i, :]))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "QBC/quantum_aware_optims.py": {
        "torch": {
            "acos_7": {
                "variable": {
                    "value": "torch.halfpi",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ger_34": {
                "input": {
                    "value": "matrix1.view(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec2": {
                    "value": "matrix2.view(-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_34": {
                "input": {
                    "value": "matrix1.size(0) * matrix2.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "matrix1.size(1) * matrix2.size(1)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "permute_34": {
                "input": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_7": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tensor_59": {
                "variable": {
                    "value": "circuit_evals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_63": {
                "variable": {
                    "value": "circuit_evals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_67": {
                "variable": {
                    "value": "circuit_evals",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "atan2_70": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2.0 * cost0 - costplus - costminus",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "costplus - costminus",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_94": {
                "data": {
                    "value": "self.qcircuit.metric_tensor([[], params_tensor.tolist()])",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "QBC/test.py": {
        "torch": {
            "Tensor_27": {
                "variable": {
                    "value": "proportions",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Tensor_28": {
                "variable": {
                    "value": "init_params",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_87": {
                "variable": {
                    "value": "qlayer.params.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([0.5, -0.123, 0.543, 0.233])",
                            "Call"
                        ]
                    ]
                }
            },
            "mul_34": {
                "input": {
                    "value": "expvals[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "torch.tensor(0.2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tensor_34": {
                "data": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    }
}