{
    "post_processing/kmeans.py": {
        "sklearn": {
            "KMeans_18": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(label_values) + 1",
                            "BinOp"
                        ]
                    ]
                },
                "init": {
                    "value": "np.array(cluster_centers)",
                    "type": "Call",
                    "possible_values": []
                },
                "n_init": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "base/base_trainer.py": {
        "torch": {
            "device_count_76": {
                "variable": {
                    "value": "num_gpus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_181": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "checkpoint_path",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SummaryWriter_40": {
                "variable": {
                    "value": "self.writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "self.save_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_46": {
                "seed": {
                    "value": "self.config['trainer']['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_53": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DataParallel_78": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_168": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'epoch': epoch, 'global_step': self.global_step, 'state_dict': self.model.state_dict(), 'optimizer': self.optimizer.state_dict(), 'scheduler': self.scheduler.state_dict(), 'config': self.config, 'metrics': self.metrics}",
                            "Dict"
                        ],
                        [
                            "self.optimizer.state.values()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self.checkpoint_dir, file_name)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_47": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_54": {
                "seed": {
                    "value": "self.config['trainer']['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "manual_seed_all_55": {
                "seed": {
                    "value": "self.config['trainer']['seed']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_85": {
                "variable": {
                    "value": "dummy_input",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.config['data_loader']['args']['dataset']['img_channel']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.config['data_loader']['args']['dataset']['input_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.config['data_loader']['args']['dataset']['input_size']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "memory_allocated_140": {
                "device": {
                    "value": "deviceID",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(deviceID)",
                            "Call"
                        ]
                    ]
                }
            },
            "memory_cached_141": {
                "device": {
                    "value": "deviceID",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(deviceID)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "data_loader/__init__.py": {
        "torch": {
            "DataLoader_74": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset_list[0]",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "module_args['loader']['train_batch_size']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "module_args['loader']['shuffle']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "module_args['loader']['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "data_loader/dataset.py": {
        "torch": {
            "DataLoader_147": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ImageDataset(data_list=[('/data1/zj/ocr/icdar2015/train/img/img_713.jpg', '/data1/zj/ocr/icdar2015/train/gt/gt_img_713.txt')], input_size=640, img_channel=3, shrink_ratio=0.5, transform=transforms.ToTensor())",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_126": {
                "variable": {
                    "value": "balanced_batch_images",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "balanced_batch_images",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(balanced_batch_images, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_127": {
                "variable": {
                    "value": "balanced_batch_score_maps",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "balanced_batch_score_maps",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(balanced_batch_score_maps, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_128": {
                "variable": {
                    "value": "balanced_batch_training_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "balanced_batch_training_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(balanced_batch_training_masks, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_91": {
                "variable": {
                    "value": "_data_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "_batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max(round(all_batch_size * float(batch_ratio_d)), 1)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "module_args['loader']['shuffle']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "module_args['loader']['num_workers']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "eval.py": {
        "torch": {}
    },
    "models/loss.py": {
        "torch": {
            "sigmoid_49": {
                "variable": {
                    "value": "mask0",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "texts",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[:, 0, :, :]",
                            "Subscript"
                        ],
                        [
                            "texts.contiguous().reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_52": {
                "variable": {
                    "value": "selected_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "selected_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ohem_batch(texts, gt_texts, training_masks)",
                            "Call"
                        ],
                        [
                            "selected_masks.to(outputs.device)",
                            "Call"
                        ],
                        [
                            "((mask0 > 0.5) & (mask1 > 0.5)).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(selected_masks).float().to(texts.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(selected_masks, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(selected_masks).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_136": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(input)",
                            "Call"
                        ],
                        [
                            "input.contiguous().view(input.size()[0], -1)",
                            "Call"
                        ],
                        [
                            "input * mask",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_146": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "variable": {
                    "value": "selected_masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "selected_masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.ohem_batch(texts, gt_texts, training_masks)",
                            "Call"
                        ],
                        [
                            "selected_masks.to(outputs.device)",
                            "Call"
                        ],
                        [
                            "((mask0 > 0.5) & (mask1 > 0.5)).astype('float32')",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(selected_masks).float().to(texts.device)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.concatenate(selected_masks, 0)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(selected_masks).float()",
                            "Call"
                        ]
                    ]
                }
            },
            "max_110": {
                "variable": {
                    "value": "D_text_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "text_G_ki",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(text_similarity_vector - G_kernel.reshape(4, 1)).norm(2, dim=0) - self.delta_agg",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_110": {
                "variable": {
                    "value": "D_text_kernel",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_112": {
                "variable": {
                    "value": "loss_agg_single_text",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_text_kernel + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_112": {
                "variable": {
                    "value": "loss_agg_single_text",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_115": {
                "variable": {
                    "value": "loss_agg_single_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "loss_agg_single_sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(loss_agg_single_sample).mean()",
                            "Call"
                        ],
                        [
                            "torch.tensor(0, device=texts.device, dtype=torch.float)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_115": {
                "variable": {
                    "value": "loss_agg_single_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_117": {
                "variable": {
                    "value": "loss_agg_single_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "texts.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_126": {
                "variable": {
                    "value": "D_kernel_ij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel_ij",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.delta_dis - (G_kernel_i - G_kernel_j).norm(2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "pow_126": {
                "variable": {
                    "value": "D_kernel_ij",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_131": {
                "variable": {
                    "value": "loss_dis_single_sample",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "texts.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_133": {
                "tensors": {
                    "value": "loss_diss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "sum_147": {
                "input": {
                    "value": "input * input",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_148": {
                "input": {
                    "value": "target * target",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_127": {
                "input": {
                    "value": "D_kernel_ij + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tensor_110": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "text_G_ki.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_126": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_ij.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/model.py": {
        "torch": {
            "device_57": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_52": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "segmentation_head_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.segmentation_head(backbone_out)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/resnet.py": {
        "torch": {
            "zeros_296": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "640",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_23": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dilation": {
                    "value": "dilation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_29": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "int"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_47": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_88": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_136": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.inplanes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_139": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_140": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_174": {
                "variable": {
                    "value": "downsample",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv1x1(self.inplanes, planes * block.expansion, stride)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_188": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/segmentation_head.py": {
        "torch": {
            "Sequential_20": {
                "variable": {
                    "value": "self.reduce_conv_c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(backbone_out_channels[0], conv_out, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_25": {
                "variable": {
                    "value": "self.reduce_conv_c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(backbone_out_channels[1], conv_out, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.reduce_conv_c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(backbone_out_channels[2], conv_out, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_36": {
                "variable": {
                    "value": "self.reduce_conv_c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(backbone_out_channels[3], conv_out, kernel_size=1, stride=1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_42": {
                "variable": {
                    "value": "self.smooth_p4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conv_out, conv_out, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_47": {
                "variable": {
                    "value": "self.smooth_p3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conv_out, conv_out, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_52": {
                "variable": {
                    "value": "self.smooth_p2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conv_out, conv_out, kernel_size=3, stride=1, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(conv_out * 4, conv_out, kernel_size=3, padding=1, stride=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "result_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.get('result_num', 6)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_86": {
                "variable": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._upsample_add(p4, self.reduce_conv_c3(c3))",
                            "Call"
                        ],
                        [
                            "self.smooth_p3(p3)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p3, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_87": {
                "variable": {
                    "value": "p4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._upsample_add(p5, self.reduce_conv_c4(c4))",
                            "Call"
                        ],
                        [
                            "self.smooth_p4(p4)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p4, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_88": {
                "variable": {
                    "value": "p5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.reduce_conv_c5(c5)",
                            "Call"
                        ],
                        [
                            "F.interpolate(p5, size=(h, w), mode='bilinear')",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(h, w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.reduce_conv_c2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=backbone_out_channels[0], out_channels=conv_out, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_107": {
                "variable": {
                    "value": "self.reduce_conv_c3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=backbone_out_channels[1], out_channels=conv_out, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_112": {
                "variable": {
                    "value": "self.reduce_conv_c4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=backbone_out_channels[2], out_channels=conv_out, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.reduce_conv_c5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels=backbone_out_channels[3], out_channels=conv_out, kernel_size=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_122": {
                "variable": {
                    "value": "self.fpems",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_125": {
                "variable": {
                    "value": "self.out_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "conv_out * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "6",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "interpolate_150": {
                "variable": {
                    "value": "c5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c5_ffm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c5",
                            "variable"
                        ],
                        [
                            "c5_ffm + c5",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "c2_ffm.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_151": {
                "variable": {
                    "value": "c4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c4_ffm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c4",
                            "variable"
                        ],
                        [
                            "c4_ffm + c4",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "c2_ffm.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "interpolate_152": {
                "variable": {
                    "value": "c3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "c3_ffm",
                    "type": "variable",
                    "possible_values": [
                        [
                            "c3",
                            "variable"
                        ],
                        [
                            "c3_ffm + c3",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "c2_ffm.size()[-2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "cat_153": {
                "variable": {
                    "value": "Fy",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[c2_ffm, c3, c4, c5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "variable": {
                    "value": "self.depthwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_190": {
                "variable": {
                    "value": "self.pointwise_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_191": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ReLU_192": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[p2, p3, p4, p5]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_21": {
                "in_channels": {
                    "value": "backbone_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_22": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_23": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_26": {
                "in_channels": {
                    "value": "backbone_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_27": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_28": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_31": {
                "in_channels": {
                    "value": "backbone_out_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_33": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "backbone_out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_43": {
                "in_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_44": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_45": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_48": {
                "in_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_49": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_50": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "conv_out * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_60": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_61": {
                "inplace": {
                    "value": "inplace",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "bool"
                        ]
                    ]
                }
            },
            "interpolate_82": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._upsample_cat(p2, p3, p4, p5)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.out_conv(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "y.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "backbone_out_channels[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "in_channels": {
                    "value": "backbone_out_channels[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_113": {
                "in_channels": {
                    "value": "backbone_out_channels[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_114": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "backbone_out_channels[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "conv_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "int"
                        ],
                        [
                            "128",
                            "int"
                        ]
                    ]
                }
            },
            "ReLU_120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "interpolate_181": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._upsample_cat(p2, p3, p4, p5)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.out_conv(x)",
                            "Call"
                        ],
                        [
                            "self.depthwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self.pointwise_conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x)",
                            "Call"
                        ],
                        [
                            "self.relu(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "y.size()[2:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "models/modules/shufflenetv2.py": {
        "torch": {
            "transpose_30": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.view(batchsize, groups, channels_per_group, height, width)",
                            "Call"
                        ],
                        [
                            "torch.transpose(x, 1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(batchsize, -1, height, width)",
                            "Call"
                        ],
                        [
                            "self.conv1(x)",
                            "Call"
                        ]
                    ]
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.branch2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp if self.stride > 1 else branch_features, branch_features, kernel_size=1, stride=1, padding=0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_98": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, 3, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_105": {
                "variable": {
                    "value": "self.maxpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_117": {
                "variable": {
                    "value": "self.conv5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_channels, output_channels, 1, 1, 0, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self.branch1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.depthwise_conv(inp, inp, kernel_size=3, stride=self.stride, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(repeats - 1)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "o",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                },
                "groups": {
                    "value": "i",
                    "type": "variable",
                    "possible_values": [
                        [
                            "range(repeats - 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_77": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, self.branch2(x2))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.branch1(x), self.branch2(x))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_59": {
                "in_channels": {
                    "value": "inp if self.stride > 1 else branch_features",
                    "type": "IfExp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_61": {
                "num_features": {
                    "value": "branch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_62": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_64": {
                "num_features": {
                    "value": "branch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Conv2d_65": {
                "in_channels": {
                    "value": "branch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "branch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_66": {
                "num_features": {
                    "value": "branch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_67": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_99": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "output_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_101": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_118": {
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "output_channels",
                            "variable"
                        ],
                        [
                            "output_channels",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_119": {
                "num_features": {
                    "value": "output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._stage_out_channels[0]",
                            "Subscript"
                        ],
                        [
                            "self._stage_out_channels[-1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_120": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_52": {
                "num_features": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_53": {
                "in_channels": {
                    "value": "inp",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "branch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_54": {
                "num_features": {
                    "value": "branch_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "oup // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ReLU_55": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "*args": {
                    "value": "*seq",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "post_processing/__init__.py": {
        "torch": {
            "sigmoid_29": {
                "variable": {
                    "value": "preds[:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_70": {
                "variable": {
                    "value": "preds[:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "predict.py": {
        "torch": {
            "sigmoid_18": {
                "variable": {
                    "value": "preds[:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[:2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "load_61": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'output/PAN_shufflenetv2_FPEM_FFM.pth'",
                            "str"
                        ]
                    ]
                },
                "map_location": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "device_57": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "'cuda:%s' % self.gpu_id",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_59": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "is_available_56": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_91": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_93": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_97": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/trainer.py": {
        "torch": {
            "cat_105": {
                "variable": {
                    "value": "show_label",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[gt_texts, gt_kernels, training_masks.float()]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_111": {
                "variable": {
                    "value": "preds[:, :2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "preds[:, :2, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_112": {
                "variable": {
                    "value": "show_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[preds[:, 0, :, :], preds[:, 1, :, :]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_150": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "synchronize_152": {
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "utils/schedulers.py": {
        "torch": {
            "SGD_55": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "utils/util.py": {
        "torch": {
            "sigmoid_100": {
                "input": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "sigmoid_87": {
                "input": {
                    "value": "texts",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    }
}