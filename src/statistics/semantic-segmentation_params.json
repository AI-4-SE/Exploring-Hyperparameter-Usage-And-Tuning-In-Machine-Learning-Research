{
    "mit_semseg/dataset.py": {
        "torch": {
            "zeros_146": {
                "variable": {
                    "value": "batch_images",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_per_gpu",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch_height",
                    "possible_values": [
                        [
                            "np.max(batch_heights)",
                            "Call"
                        ],
                        [
                            "int(self.round2nearest_multiple(batch_height, self.padding_constant))",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "batch_width",
                    "possible_values": [
                        [
                            "np.max(batch_widths)",
                            "Call"
                        ],
                        [
                            "int(self.round2nearest_multiple(batch_width, self.padding_constant))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_148": {
                "variable": {
                    "value": "batch_segms",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.batch_per_gpu",
                    "possible_values": []
                },
                "out": {
                    "value": "batch_height // self.segm_downsampling_rate",
                    "possible_values": []
                },
                "dtype": {
                    "value": "batch_width // self.segm_downsampling_rate",
                    "possible_values": []
                }
            },
            "unsqueeze_245": {
                "variable": {
                    "value": "batch_segms",
                    "possible_values": []
                },
                "input": {
                    "value": "segm",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array(segm)).long() - 1",
                            "BinOp"
                        ],
                        [
                            "Image.open(segm_path)",
                            "Call"
                        ],
                        [
                            "segm.transpose(Image.FLIP_LEFT_RIGHT)",
                            "Call"
                        ],
                        [
                            "imresize(segm, (batch_widths[i], batch_heights[i]), interp='nearest')",
                            "Call"
                        ],
                        [
                            "imresize(segm_rounded, (segm_rounded.size[0] // self.segm_downsampling_rate, segm_rounded.size[1] // self.segm_downsampling_rate), interp='nearest')",
                            "Call"
                        ],
                        [
                            "self.segm_transform(segm)",
                            "Call"
                        ],
                        [
                            "Image.open(segm_path)",
                            "Call"
                        ],
                        [
                            "self.segm_transform(segm)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_240": {
                "variable": {
                    "value": "img_resized",
                    "possible_values": []
                },
                "input": {
                    "value": "img_resized",
                    "possible_values": [
                        [
                            "imresize(img, (target_width, target_height), interp='bilinear')",
                            "Call"
                        ],
                        [
                            "self.img_transform(img_resized)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_resized, 0)",
                            "Call"
                        ],
                        [
                            "imresize(img, (target_width, target_height), interp='bilinear')",
                            "Call"
                        ],
                        [
                            "self.img_transform(img_resized)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_resized, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "unsqueeze_286": {
                "variable": {
                    "value": "img_resized",
                    "possible_values": []
                },
                "input": {
                    "value": "img_resized",
                    "possible_values": [
                        [
                            "imresize(img, (target_width, target_height), interp='bilinear')",
                            "Call"
                        ],
                        [
                            "self.img_transform(img_resized)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_resized, 0)",
                            "Call"
                        ],
                        [
                            "imresize(img, (target_width, target_height), interp='bilinear')",
                            "Call"
                        ],
                        [
                            "self.img_transform(img_resized)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_resized, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "img.copy()",
                    "possible_values": []
                }
            },
            "from_numpy_62": {
                "ndarray": {
                    "value": "np.array(segm)",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/lib/nn/modules/batchnorm.py": {
        "torch": {
            "zeros_50": {
                "*size": {
                    "value": "self.num_features",
                    "possible_values": []
                }
            },
            "ones_51": {
                "*size": {
                    "value": "self.num_features",
                    "possible_values": []
                }
            },
            "ones_52": {
                "*size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "batch_norm_59": {
                "input": {
                    "value": "input",
                    "possible_values": [
                        [
                            "input.view(input.size(0), self.num_features, -1)",
                            "Call"
                        ]
                    ]
                },
                "running_mean": {
                    "value": "self.running_mean",
                    "possible_values": []
                },
                "running_var": {
                    "value": "self.running_var",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "possible_values": []
                },
                "momentum": {
                    "value": "self.momentum",
                    "possible_values": []
                },
                "eps": {
                    "value": "self.eps",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/lib/nn/modules/replicate.py": {
        "torch": {}
    },
    "mit_semseg/lib/nn/modules/tests/test_numeric_batchnorm.py": {
        "torch": {
            "rand_31": {
                "variable": {
                    "value": "a",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "BatchNorm2d_32": {
                "variable": {
                    "value": "bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "possible_values": []
                },
                "momentum": {
                    "value": "1",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "sqrt_42": {
                "variable": {
                    "value": "a_std2",
                    "possible_values": []
                },
                "input": {
                    "value": "handy_var(a_var2, unbias=False).clamp(min=1e-05)",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/lib/nn/modules/tests/test_sync_batchnorm.py": {
        "torch": {
            "BatchNorm1d_68": {
                "variable": {
                    "value": "bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "BatchNorm1d_74": {
                "variable": {
                    "value": "bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "BatchNorm1d_80": {
                "variable": {
                    "value": "bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm1d_90": {
                "variable": {
                    "value": "bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-05",
                    "possible_values": []
                },
                "affine": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "BatchNorm2d_100": {
                "variable": {
                    "value": "bn",
                    "possible_values": []
                },
                "num_features": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "rand_71": {
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "rand_77": {
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "rand_87": {
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "rand_97": {
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                }
            },
            "rand_107": {
                "*size": {
                    "value": "16",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "possible_values": []
                },
                "dtype": {
                    "value": "16",
                    "possible_values": []
                },
                "layout": {
                    "value": "16",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/lib/nn/modules/unittest.py": {
        "torch": {}
    },
    "mit_semseg/lib/nn/parallel/data_parallel.py": {
        "torch": {
            "is_tensor_14": {
                "obj": {
                    "value": "obj",
                    "possible_values": []
                }
            },
            "Stream_111": {
                "variable": {
                    "value": "_streams[device]",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "possible_values": []
                }
            },
            "is_tensor_34": {
                "obj": {
                    "value": "out",
                    "possible_values": [
                        [
                            "outputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "current_stream_91": {
                "variable": {
                    "value": "main_stream",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "device_76": {
                "type": {
                    "value": "dev",
                    "possible_values": []
                }
            },
            "device_90": {
                "type": {
                    "value": "dev",
                    "possible_values": []
                }
            },
            "device_count_110": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/lib/utils/data/dataloader.py": {
        "torch": {
            "set_num_threads_47": {
                "int": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "manual_seed_48": {
                "seed": {
                    "value": "seed",
                    "possible_values": []
                }
            },
            "is_tensor_109": {
                "obj": {
                    "value": "batch[0]",
                    "possible_values": []
                }
            },
            "is_tensor_146": {
                "obj": {
                    "value": "batch",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_device_69": {
                "device": {
                    "value": "device_id",
                    "possible_values": []
                }
            },
            "stack_117": {
                "tensors": {
                    "value": "batch",
                    "possible_values": [
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.collate_fn([self.dataset[i] for i in indices])",
                            "Call"
                        ],
                        [
                            "pin_memory_batch(batch)",
                            "Call"
                        ],
                        [
                            "self.reorder_dict.pop(self.rcvd_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                },
                "out": {
                    "value": "out",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "batch[0].new(storage)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_196": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "stack_126": {
                "tensors": {
                    "value": "[torch.from_numpy(b) for b in batch]",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "current_device_224": {
                "variable": {
                    "value": "maybe_device_id",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "from_numpy_126": {
                "ndarray": {
                    "value": "b",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/lib/utils/data/dataset.py": {
        "torch": {
            "randperm_117": {
                "variable": {
                    "value": "indices",
                    "possible_values": []
                },
                "n": {
                    "value": "sum(lengths)",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/lib/utils/data/distributed.py": {
        "torch": {
            "Generator_39": {
                "variable": {
                    "value": "g",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            },
            "randperm_41": {
                "n": {
                    "value": "len(self.dataset)",
                    "possible_values": []
                },
                "generator": {
                    "value": "g",
                    "possible_values": [
                        [
                            "torch.Generator()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mit_semseg/lib/utils/data/sampler.py": {
        "torch": {
            "randperm_50": {
                "n": {
                    "value": "len(self.data_source)",
                    "possible_values": []
                }
            },
            "multinomial_90": {
                "input": {
                    "value": "self.weights",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "possible_values": []
                },
                "replacement": {
                    "value": "self.replacement",
                    "possible_values": []
                }
            },
            "randperm_67": {
                "n": {
                    "value": "len(self.indices)",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/lib/utils/th.py": {
        "torch": {
            "is_tensor_31": {
                "obj": {
                    "value": "obj",
                    "possible_values": [
                        [
                            "Variable(obj)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_tensor_25": {
                "obj": {
                    "value": "obj",
                    "possible_values": [
                        [
                            "Variable(obj)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mit_semseg/models/hrnet.py": {
        "torch": {
            "Conv2d_28": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_39": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_71": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_74": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * self.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_121": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_270": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_273": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_276": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_427": {
                "variable": {
                    "value": "x1",
                    "possible_values": []
                },
                "input": {
                    "value": "x[1]",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_429": {
                "variable": {
                    "value": "x2",
                    "possible_values": []
                },
                "input": {
                    "value": "x[2]",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_431": {
                "variable": {
                    "value": "x3",
                    "possible_values": []
                },
                "input": {
                    "value": "x[3]",
                    "possible_values": []
                },
                "size": {
                    "value": "(x0_h, x0_w)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "cat_434": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x[0], x1, x2, x3]",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Sequential_148": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.num_inchannels[branch_index], num_channels[branch_index] * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_165": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "ModuleList_174": {
                "modules": {
                    "value": "branches",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_220": {
                "modules": {
                    "value": "fuse_layers",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "ModuleList_343": {
                "modules": {
                    "value": "transition_layers",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Sequential_348": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_360": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Sequential_390": {
                "*args": {
                    "value": "*modules",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "in_channels": {
                    "value": "self.num_inchannels[branch_index]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels[branch_index] * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ModuleList_218": {
                "modules": {
                    "value": "fuse_layer",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Conv2d_349": {
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": [
                        [
                            "planes * block.expansion",
                            "BinOp"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_341": {
                "*args": {
                    "value": "*conv3x3s",
                    "possible_values": []
                }
            },
            "Sequential_187": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_inchannels[i], 1, 1, 0, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_318": {
                "*args": {
                    "value": "nn.Conv2d(num_channels_pre_layer[i], num_channels_cur_layer[i], 3, 1, 1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_336": {
                "*args": {
                    "value": "nn.Conv2d(inchannels, outchannels, 3, 2, 1, bias=False)",
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_inchannels[i]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_217": {
                "*args": {
                    "value": "*conv3x3s",
                    "possible_values": []
                }
            },
            "interpolate_241": {
                "input": {
                    "value": "self.fuse_layers[i][j](x[j])",
                    "possible_values": []
                },
                "size": {
                    "value": "(height_output, width_output)",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_319": {
                "in_channels": {
                    "value": "num_channels_pre_layer[i]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_channels_cur_layer[i]",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_327": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "in_channels": {
                    "value": "inchannels",
                    "possible_values": [
                        [
                            "num_channels_pre_layer[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outchannels",
                    "possible_values": [
                        [
                            "num_channels_cur_layer[i] if j == i - num_branches_pre else inchannels",
                            "IfExp"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_340": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_202": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_210": {
                "*args": {
                    "value": "nn.Conv2d(num_inchannels[j], num_outchannels_conv3x3, 3, 2, 1, bias=False)",
                    "possible_values": []
                }
            },
            "Conv2d_203": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_211": {
                "in_channels": {
                    "value": "num_inchannels[j]",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_outchannels_conv3x3",
                    "possible_values": [
                        [
                            "num_inchannels[i]",
                            "Subscript"
                        ],
                        [
                            "num_inchannels[j]",
                            "Subscript"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_216": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/models/mobilenet.py": {
        "torch": {
            "Sequential_23": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 3, stride, 1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "*args": {
                    "value": "nn.Conv2d(inp, oup, 1, 1, 0, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_113": {
                "variable": {
                    "value": "self.features",
                    "possible_values": []
                },
                "*args": {
                    "value": "*self.features",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.classifier",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Dropout(0.2)",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU6_26": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "oup",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU6_34": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(hidden_dim, hidden_dim, 3, stride, 1, groups=hidden_dim, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.conv",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(inp, hidden_dim, 1, 1, 0, bias=False)",
                    "possible_values": []
                }
            },
            "Dropout_117": {
                "p": {
                    "value": "0.2",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "in_features": {
                    "value": "self.last_channel",
                    "possible_values": []
                },
                "out_features": {
                    "value": "n_class",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Conv2d_50": {
                "in_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU6_52": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_60": {
                "in_channels": {
                    "value": "inp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU6_62": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "in_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU6_66": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_68": {
                "in_channels": {
                    "value": "hidden_dim",
                    "possible_values": [
                        [
                            "round(inp * expand_ratio)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oup",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/models/models.py": {
        "torch": {
            "max_13": {
                "variable": {
                    "value": "(_, preds)",
                    "possible_values": []
                },
                "input": {
                    "value": "pred",
                    "possible_values": [
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True), segSize=segSize)",
                            "Call"
                        ],
                        [
                            "self.decoder(self.encoder(feed_dict['img_data'], return_feature_maps=True))",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "sum_15": {
                "variable": {
                    "value": "acc_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "valid * (preds == label).long()",
                    "possible_values": []
                }
            },
            "sum_16": {
                "variable": {
                    "value": "pixel_sum",
                    "possible_values": []
                },
                "input": {
                    "value": "valid",
                    "possible_values": [
                        [
                            "(label >= 0).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_162": {
                "*args": {
                    "value": "nn.Conv2d(in_planes, out_planes, kernel_size=3, stride=stride, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "Conv2d_336": {
                "variable": {
                    "value": "self.conv_last",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Conv2d_337": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "log_softmax_356": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_357": {
                "variable": {
                    "value": "_",
                    "possible_values": []
                },
                "input": {
                    "value": "_",
                    "possible_values": [
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.dropout_deepsup(_)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_371": {
                "variable": {
                    "value": "self.conv_last",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "ModuleList_403": {
                "variable": {
                    "value": "self.ppm",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm",
                    "possible_values": []
                }
            },
            "Sequential_405": {
                "variable": {
                    "value": "self.conv_last",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "cat_424": {
                "variable": {
                    "value": "ppm_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_452": {
                "variable": {
                    "value": "self.ppm",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm",
                    "possible_values": []
                }
            },
            "Sequential_455": {
                "variable": {
                    "value": "self.conv_last",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(fc_dim + len(pool_scales) * 512, 512, kernel_size=3, padding=1, bias=False)",
                    "possible_values": []
                }
            },
            "Conv2d_463": {
                "variable": {
                    "value": "self.conv_last_deepsup",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "fc_dim // 4",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "Dropout2d_464": {
                "variable": {
                    "value": "self.dropout_deepsup",
                    "possible_values": []
                },
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "cat_476": {
                "variable": {
                    "value": "ppm_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_492": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_493": {
                "variable": {
                    "value": "_",
                    "possible_values": []
                },
                "input": {
                    "value": "_",
                    "possible_values": [
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr_deepsup(conv4)",
                            "Call"
                        ],
                        [
                            "self.dropout_deepsup(_)",
                            "Call"
                        ],
                        [
                            "self.conv_last_deepsup(_)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(_, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "ModuleList_517": {
                "variable": {
                    "value": "self.ppm_pooling",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_pooling",
                    "possible_values": []
                }
            },
            "ModuleList_518": {
                "variable": {
                    "value": "self.ppm_conv",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.ppm_conv",
                    "possible_values": []
                }
            },
            "ModuleList_529": {
                "variable": {
                    "value": "self.fpn_in",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_in",
                    "possible_values": []
                }
            },
            "ModuleList_536": {
                "variable": {
                    "value": "self.fpn_out",
                    "possible_values": []
                },
                "modules": {
                    "value": "self.fpn_out",
                    "possible_values": []
                }
            },
            "Sequential_538": {
                "variable": {
                    "value": "self.conv_last",
                    "possible_values": []
                },
                "*args": {
                    "value": "conv3x3_bn_relu(len(fpn_inplanes) * fpn_dim, fpn_dim, 1)",
                    "possible_values": []
                }
            },
            "cat_553": {
                "variable": {
                    "value": "ppm_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "ppm_out",
                    "possible_values": [
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ],
                        [
                            "[conv5]",
                            "List"
                        ],
                        [
                            "torch.cat(ppm_out, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "cat_575": {
                "variable": {
                    "value": "fusion_out",
                    "possible_values": []
                },
                "tensors": {
                    "value": "fusion_list",
                    "possible_values": [
                        [
                            "[fpn_feature_list[0]]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_584": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_163": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_166": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_346": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "softmax_348": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_379": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "softmax_381": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_383": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_429": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "softmax_431": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "log_softmax_433": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_481": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "softmax_483": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "interpolate_561": {
                "variable": {
                    "value": "f",
                    "possible_values": []
                },
                "input": {
                    "value": "f",
                    "possible_values": [
                        [
                            "self.ppm_last_conv(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(f, size=conv_x.size()[2:], mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "conv_x + f",
                            "BinOp"
                        ]
                    ]
                },
                "size": {
                    "value": "conv_x.size()[2:]",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "interpolate_579": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "segSize",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "softmax_581": {
                "variable": {
                    "value": "x",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "possible_values": [
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.relu1(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.relu2(self.bn2(self.conv2(x)))",
                            "Call"
                        ],
                        [
                            "self.relu3(self.bn3(self.conv3(x)))",
                            "Call"
                        ],
                        [
                            "self.maxpool(x)",
                            "Call"
                        ],
                        [
                            "self.layer1(x)",
                            "Call"
                        ],
                        [
                            "self.layer2(x)",
                            "Call"
                        ],
                        [
                            "self.layer3(x)",
                            "Call"
                        ],
                        [
                            "self.layer4(x)",
                            "Call"
                        ],
                        [
                            "self.features[i](x)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.cbr(conv5)",
                            "Call"
                        ],
                        [
                            "self.conv_last(x)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(ppm_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "self.conv_last(fusion_out)",
                            "Call"
                        ],
                        [
                            "nn.functional.interpolate(x, size=segSize, mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "nn.functional.softmax(x, dim=1)",
                            "Call"
                        ],
                        [
                            "nn.functional.log_softmax(x, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_406": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_409": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout2d_410": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_411": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_456": {
                "in_channels": {
                    "value": "fc_dim + len(pool_scales) * 512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_459": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Dropout2d_460": {
                "p": {
                    "value": "0.1",
                    "possible_values": []
                }
            },
            "Conv2d_461": {
                "in_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Conv2d_540": {
                "in_channels": {
                    "value": "fpn_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ],
                        [
                            "150",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "load_109": {
                "f": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "load_156": {
                "f": {
                    "value": "weights",
                    "possible_values": [
                        [
                            "''",
                            "MethodArgument"
                        ],
                        [
                            "''",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "possible_values": []
                }
            },
            "Sequential_397": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "possible_values": []
                }
            },
            "interpolate_420": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Sequential_446": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d(scale)",
                    "possible_values": []
                }
            },
            "interpolate_472": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_511": {
                "output_size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Sequential_512": {
                "*args": {
                    "value": "nn.Conv2d(fc_dim, 512, kernel_size=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_524": {
                "*args": {
                    "value": "nn.Conv2d(fpn_inplane, fpn_dim, kernel_size=1, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_533": {
                "*args": {
                    "value": "conv3x3_bn_relu(fpn_dim, fpn_dim, 1)",
                    "possible_values": []
                }
            },
            "interpolate_571": {
                "input": {
                    "value": "fpn_feature_list[i]",
                    "possible_values": []
                },
                "size": {
                    "value": "output_size",
                    "possible_values": [
                        [
                            "fpn_feature_list[0].size()[2:]",
                            "Subscript"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_398": {
                "output_size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_399": {
                "in_channels": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_401": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_447": {
                "output_size": {
                    "value": "scale",
                    "possible_values": [
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ],
                        [
                            "pool_scales",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_448": {
                "in_channels": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_450": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_513": {
                "in_channels": {
                    "value": "fc_dim",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "512",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "2048",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ],
                        [
                            "4096",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "512",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_515": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_525": {
                "in_channels": {
                    "value": "fpn_inplane",
                    "possible_values": [
                        [
                            "fpn_inplanes[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "fpn_dim",
                    "possible_values": [
                        [
                            "256",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_527": {
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "interpolate_549": {
                "input": {
                    "value": "pool_scale(conv5)",
                    "possible_values": []
                },
                "size": {
                    "value": "(input_size[2], input_size[3])",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/models/resnet.py": {
        "torch": {
            "Conv2d_20": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_31": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_66": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 4",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_68": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_102": {
                "variable": {
                    "value": "self.relu1",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "variable": {
                    "value": "self.relu2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_108": {
                "variable": {
                    "value": "self.relu3",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_109": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AvgPool2d_115": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_141": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/models/resnext.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv1",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.conv2",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                },
                "groups": {
                    "value": "groups",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "variable": {
                    "value": "self.conv3",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * 2",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_69": {
                "variable": {
                    "value": "self.relu1",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_72": {
                "variable": {
                    "value": "self.relu2",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "ReLU_75": {
                "variable": {
                    "value": "self.relu3",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "possible_values": []
                }
            },
            "MaxPool2d_76": {
                "variable": {
                    "value": "self.maxpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "AvgPool2d_82": {
                "variable": {
                    "value": "self.avgpool",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "Linear_83": {
                "variable": {
                    "value": "self.fc",
                    "possible_values": []
                },
                "in_features": {
                    "value": "1024 * block.expansion",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Sequential_96": {
                "variable": {
                    "value": "downsample",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.inplanes, planes * block.expansion, kernel_size=1, stride=stride, bias=False)",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "*layers",
                    "possible_values": []
                }
            },
            "Conv2d_97": {
                "in_channels": {
                    "value": "self.inplanes",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes * block.expansion",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "possible_values": []
                }
            }
        }
    },
    "mit_semseg/models/utils.py": {
        "torch": {
            "load_18": {
                "f": {
                    "value": "cached_file",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "map_location",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "semantic_segmentation.py": {
        "torch": {
            "NLLLoss_198": {
                "variable": {
                    "value": "crit",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-1",
                    "possible_values": []
                }
            },
            "unsqueeze_95": {
                "variable": {
                    "value": "img_resized",
                    "possible_values": []
                },
                "input": {
                    "value": "img_resized",
                    "possible_values": [
                        [
                            "imresize(img, (target_width, target_height), interp='bilinear')",
                            "Call"
                        ],
                        [
                            "img_transform(img_resized)",
                            "Call"
                        ],
                        [
                            "torch.unsqueeze(img_resized, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "possible_values": []
                }
            },
            "set_device_190": {
                "device": {
                    "value": "gpu",
                    "possible_values": [
                        [
                            "-1",
                            "UnaryOp"
                        ]
                    ]
                }
            },
            "zeros_223": {
                "variable": {
                    "value": "scores",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "possible_values": []
                },
                "out": {
                    "value": "num_class",
                    "possible_values": [
                        [
                            "150",
                            "Constant"
                        ]
                    ]
                },
                "dtype": {
                    "value": "segSize[0]",
                    "possible_values": []
                },
                "layout": {
                    "value": "segSize[1]",
                    "possible_values": []
                }
            },
            "max_235": {
                "variable": {
                    "value": "(_, pred)",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "possible_values": [
                        [
                            "torch.zeros(1, num_class, segSize[0], segSize[1])",
                            "Call"
                        ],
                        [
                            "async_copy_to(scores, gpu)",
                            "Call"
                        ],
                        [
                            "scores + pred_tmp / len(imgSizes)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "img.copy()",
                    "possible_values": []
                }
            },
            "no_grad_222": {
                "params": {
                    "value": "default",
                    "possible_values": []
                }
            }
        }
    }
}