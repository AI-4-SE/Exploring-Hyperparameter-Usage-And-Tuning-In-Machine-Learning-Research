{
    "scripts/create_sample_grid_vectors.py": {
        "torch": {
            "save_34": {
                "obj": {
                    "value": "{'sample_grid_rows': args.rows, 'sample_grid_cols': args.cols, 'sample_grid_vectors': sample_grid_vecs}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.save_location",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/generate_interpolation.py": {
        "torch": {
            "save_181": {
                "obj": {
                    "value": "{'z_vectors': z_vectors}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "z_vector_save_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(args.outdir, 'z_vectors.pt')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "scripts/interpolation/methods.py": {
        "torch": {
            "load_105": {
                "variable": {
                    "value": "z_vectors_file",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "z_vectors_path",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/rosinality_generate.py": {
        "torch": {
            "randn_95": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_img",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "model.generator.style_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "model.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "scripts/trainer.py": {
        "torch": {
            "DataLoader_100": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.dataset_path, transform=transform, resolution=args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/utils/KimgSaverCallback.py": {
        "torch": {
            "load_43": {
                "variable": {
                    "value": "sample_grid_data",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../assets/sample_grids', kwargs['sample_grid'] + '.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "scripts/utils/gpu_stats.py": {
        "torch": {
            "memory_reserved_4": {
                "variable": {
                    "value": "r",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "gpu_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "memory_allocated_5": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "gpu_index",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/alias_free_gan.py": {
        "torch": {
            "softplus_181": {
                "variable": {
                    "value": "real_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_182": {
                "variable": {
                    "value": "fake_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_207": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-fake_predict",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_207": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_230": {
                "variable": {
                    "value": "g_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_g",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0, 0.99)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_232": {
                "variable": {
                    "value": "d_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr_d * d_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** d_reg_ratio, 0.99 ** d_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_258": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "load_270": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "load_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_178": {
                "*size": {
                    "value": "n_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_243": {
                "obj": {
                    "value": "{'g': self.generator.state_dict(), 'd': self.discriminator.state_dict(), 'g_ema': self.g_ema.state_dict(), 'g_optim': self.optimizers()[0].state_dict(), 'd_optim': self.optimizers()[1].state_dict(), 'conf': conf, 'ada_aug_p': self.ada_aug_p}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_177": {
                "*size": {
                    "value": "self.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_314": {
                "ndarray": {
                    "value": "np.random.RandomState(seed).randn(1, self.generator.style_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_337": {
                "ndarray": {
                    "value": "sample_grid_vectors[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_361": {
                "ndarray": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "z_vectors",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "src/fake_dataloader.py": {
        "torch": {
            "DataLoader_34": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "FakeMultiResolutionDataset(resolution=size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/model.py": {
        "torch": {
            "as_tensor_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(x, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel, up=(factor, factor), pad=(*pad, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(0), up=(factor, 1), pad=(*pad, 0, 0))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(1), up=(1, factor), pad=(0, 0, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel, down=(factor, factor), pad=(*pad, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(0), down=(factor, 1), pad=(*pad, 0, 0))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(1), down=(1, factor), pad=(0, 0, *pad))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_102": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(x, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel, up=(factor, factor), pad=(*pad, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(0), up=(factor, 1), pad=(*pad, 0, 0))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(1), up=(1, factor), pad=(0, 0, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel, down=(factor, factor), pad=(*pad, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(0), down=(factor, 1), pad=(*pad, 0, 0))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(1), down=(1, factor), pad=(0, 0, *pad))",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_204": {
                "variable": {
                    "value": "freqs",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "cutoff",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "dim // 4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ger_214": {
                "variable": {
                    "value": "coord_map",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.freqs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec2": {
                    "value": "self.coords",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_284": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_367": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_457": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_493": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_512": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_554": {
                "variable": {
                    "value": "latent_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.style_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_100": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(x, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel, up=(factor, factor), pad=(*pad, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(0), up=(factor, 1), pad=(*pad, 0, 0))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(1), up=(1, factor), pad=(0, 0, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel, down=(factor, factor), pad=(*pad, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(0), down=(factor, 1), pad=(*pad, 0, 0))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(1), down=(1, factor), pad=(0, 0, *pad))",
                            "Call"
                        ]
                    ]
                }
            },
            "abs_103": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.as_tensor(x, dtype=torch.float64)",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel, up=(factor, factor), pad=(*pad, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(0), up=(factor, 1), pad=(*pad, 0, 0))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(1), up=(1, factor), pad=(0, 0, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel, down=(factor, factor), pad=(*pad, *pad))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(0), down=(factor, 1), pad=(*pad, 0, 0))",
                            "Call"
                        ],
                        [
                            "upfirdn2d(x, kernel.unsqueeze(1), down=(1, factor), pad=(0, 0, *pad))",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_135": {
                "start": {
                    "value": "n_taps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "i0_137": {
                "input": {
                    "value": "torch.tensor(beta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_144": {
                "start": {
                    "value": "n_taps",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "norm_222": {
                "variable": {
                    "value": "norm",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "affine[:, :2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_237": {
                "variable": {
                    "value": "coord_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.sin(coord_h), torch.cos(coord_h))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_238": {
                "variable": {
                    "value": "coord_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.sin(coord_w), torch.cos(coord_w))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_242": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coord_h, coord_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_247": {
                "variable": {
                    "value": "coord_h",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.sin(coord_h), torch.cos(coord_h))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_248": {
                "variable": {
                    "value": "coord_w",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.sin(coord_w), torch.cos(coord_w))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_252": {
                "variable": {
                    "value": "coords",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(coord_h, coord_w)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rsqrt_309": {
                "variable": {
                    "value": "demod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_99": {
                "input": {
                    "value": "xn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x - 3 / 4 * math.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_99": {
                "input": {
                    "value": "xn",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x - 3 / 4 * math.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tensor_138": {
                "data": {
                    "value": "beta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "kaiser_beta(n_taps, f_h, sr)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_203": {
                "start": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "end": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                },
                "steps": {
                    "value": "size + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_285": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_287": {
                "data": {
                    "value": "1.0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_367": {
                "*size": {
                    "value": "out_channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_457": {
                "*size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_504": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_137": {
                "input": {
                    "value": "1 - (2 * ind / (n_taps - 1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_148": {
                "input": {
                    "value": "ind_sq + ind_sq.T",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sinc_153": {
                "input": {
                    "value": "2 * cutoff / sr * ind",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_321": {
                "input": {
                    "value": "self.ema_var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_507": {
                "data": {
                    "value": "[1, 0, 0, 0]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_237": {
                "input": {
                    "value": "coord_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_map.view(self.freqs.shape[0], 1, size)",
                            "Call"
                        ],
                        [
                            "-coord_w_orig * r_s + coord_h_orig * r_c - t_y * self.lf",
                            "BinOp"
                        ],
                        [
                            "torch.cat((torch.sin(coord_h), torch.cos(coord_h)), 1)",
                            "Call"
                        ],
                        [
                            "coord_h.expand(-1, -1, size, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.sin(coord_h), torch.cos(coord_h)), 0)",
                            "Call"
                        ],
                        [
                            "coord_h.expand(-1, size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_237": {
                "input": {
                    "value": "coord_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_map.view(self.freqs.shape[0], 1, size)",
                            "Call"
                        ],
                        [
                            "-coord_w_orig * r_s + coord_h_orig * r_c - t_y * self.lf",
                            "BinOp"
                        ],
                        [
                            "torch.cat((torch.sin(coord_h), torch.cos(coord_h)), 1)",
                            "Call"
                        ],
                        [
                            "coord_h.expand(-1, -1, size, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.sin(coord_h), torch.cos(coord_h)), 0)",
                            "Call"
                        ],
                        [
                            "coord_h.expand(-1, size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_238": {
                "input": {
                    "value": "coord_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_h.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "coord_w_orig * r_c + coord_h_orig * r_s - t_x * self.lf",
                            "BinOp"
                        ],
                        [
                            "torch.cat((torch.sin(coord_w), torch.cos(coord_w)), 1)",
                            "Call"
                        ],
                        [
                            "coord_w.expand(-1, -1, -1, size)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.sin(coord_w), torch.cos(coord_w)), 0)",
                            "Call"
                        ],
                        [
                            "coord_w.expand(-1, -1, size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_238": {
                "input": {
                    "value": "coord_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_h.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "coord_w_orig * r_c + coord_h_orig * r_s - t_x * self.lf",
                            "BinOp"
                        ],
                        [
                            "torch.cat((torch.sin(coord_w), torch.cos(coord_w)), 1)",
                            "Call"
                        ],
                        [
                            "coord_w.expand(-1, -1, -1, size)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.sin(coord_w), torch.cos(coord_w)), 0)",
                            "Call"
                        ],
                        [
                            "coord_w.expand(-1, -1, size)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_247": {
                "input": {
                    "value": "coord_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_map.view(self.freqs.shape[0], 1, size)",
                            "Call"
                        ],
                        [
                            "-coord_w_orig * r_s + coord_h_orig * r_c - t_y * self.lf",
                            "BinOp"
                        ],
                        [
                            "torch.cat((torch.sin(coord_h), torch.cos(coord_h)), 1)",
                            "Call"
                        ],
                        [
                            "coord_h.expand(-1, -1, size, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.sin(coord_h), torch.cos(coord_h)), 0)",
                            "Call"
                        ],
                        [
                            "coord_h.expand(-1, size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_247": {
                "input": {
                    "value": "coord_h",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_map.view(self.freqs.shape[0], 1, size)",
                            "Call"
                        ],
                        [
                            "-coord_w_orig * r_s + coord_h_orig * r_c - t_y * self.lf",
                            "BinOp"
                        ],
                        [
                            "torch.cat((torch.sin(coord_h), torch.cos(coord_h)), 1)",
                            "Call"
                        ],
                        [
                            "coord_h.expand(-1, -1, size, -1)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.sin(coord_h), torch.cos(coord_h)), 0)",
                            "Call"
                        ],
                        [
                            "coord_h.expand(-1, size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sin_248": {
                "input": {
                    "value": "coord_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_h.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "coord_w_orig * r_c + coord_h_orig * r_s - t_x * self.lf",
                            "BinOp"
                        ],
                        [
                            "torch.cat((torch.sin(coord_w), torch.cos(coord_w)), 1)",
                            "Call"
                        ],
                        [
                            "coord_w.expand(-1, -1, -1, size)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.sin(coord_w), torch.cos(coord_w)), 0)",
                            "Call"
                        ],
                        [
                            "coord_w.expand(-1, -1, size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cos_248": {
                "input": {
                    "value": "coord_w",
                    "type": "Call",
                    "possible_values": [
                        [
                            "coord_h.transpose(1, 2)",
                            "Call"
                        ],
                        [
                            "coord_w_orig * r_c + coord_h_orig * r_s - t_x * self.lf",
                            "BinOp"
                        ],
                        [
                            "torch.cat((torch.sin(coord_w), torch.cos(coord_w)), 1)",
                            "Call"
                        ],
                        [
                            "coord_w.expand(-1, -1, -1, size)",
                            "Call"
                        ],
                        [
                            "torch.cat((torch.sin(coord_w), torch.cos(coord_w)), 0)",
                            "Call"
                        ],
                        [
                            "coord_w.expand(-1, -1, size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/op/conv2d_gradfix.py": {
        "torch": {
            "conv2d_43": {
                "input": {
                    "value": "in_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(stride, ndim)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(padding, ndim)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(dilation, ndim)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv_transpose2d_75": {
                "input": {
                    "value": "in_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(stride, ndim)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(padding, ndim)",
                            "Call"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(output_padding, ndim)",
                            "Call"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(dilation, ndim)",
                            "Call"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv2d_154": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "conv_transpose2d_157": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "Variable",
                    "possible_values": []
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(output_padding, ndim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/op/fused_act.py": {
        "torch": {
            "Parameter_23": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_44": {
                "input": {
                    "value": "in_tensor + bias.view(1, bias.shape[0], *rest_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_51": {
                "input": {
                    "value": "in_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_23": {
                "*size": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/op/upfirdn2d.py": {
        "torch": {
            "pad_61": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_64": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_78": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_79": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.flip(kernel, [0, 1]).view(1, 1, kernel_h, kernel_w)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/stylegan2/apply_factor.py": {
        "torch": {
            "load_58": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_64": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "args.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_10": {
                "mode": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "[img1, img, img2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_57": {
                "f": {
                    "value": "args.factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/calc_inception.py": {
        "torch": {
            "cat_71": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "feature_list",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_77": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_105": {
                "variable": {
                    "value": "inception",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "inception",
                    "type": "Call",
                    "possible_values": [
                        [
                            "load_patched_inception_v3()",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(inception).eval().to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_116": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform=transform, resolution=args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_30": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_46": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_21": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=True)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_1a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2a_3x3(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_2b_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_3b_1x1(x)",
                            "Call"
                        ],
                        [
                            "self.Conv2d_4a_3x3(x)",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(x, kernel_size=3, stride=2)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_5d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6c(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6d(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_6e(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7a(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7b(x)",
                            "Call"
                        ],
                        [
                            "self.Mixed_7c(x)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, kernel_size=8)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_77": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/closed_form_factorization.py": {
        "torch": {
            "load_18": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "weight_mat",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_32": {
                "obj": {
                    "value": "{'ckpt': args.ckpt, 'eigvec': eigvec}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "args.out",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "svd_30": {
                "input": {
                    "value": "W",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat(weight_mat, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/stylegan2/convert_weight.py": {
        "torch": {
            "from_numpy_52": {
                "variable": {
                    "value": "dic_torch[target_name + f.{start}.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['weight']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_252": {
                "variable": {
                    "value": "latent_avg",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "g_ema.vars['dlatent_avg'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_289": {
                "variable": {
                    "value": "img_tf",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img_tf",
                    "type": "Call",
                    "possible_values": [
                        [
                            "g_ema.run(z, None, **Gs_kwargs)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(img_tf).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_295": {
                "variable": {
                    "value": "img_concat",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(img_tf, img_pt, img_diff)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_32": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "flip_35": {
                "variable": {
                    "value": "dic_torch[target_name + .conv.weight]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "dic_torch[target_name + '.conv.weight']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dims": {
                    "value": "[3, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "dic_torch[target_name + f.{start + 1}.bias]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "dic['bias']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_76": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_90": {
                "variable": {
                    "value": "dic_torch[target_name + . + k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "v",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "save_269": {
                "obj": {
                    "value": "ckpt",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{'g_ema': state_dict, 'latent_avg': latent_avg}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "name + '.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "no_grad_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_149": {
                "ndarray": {
                    "value": "vars['G_synthesis/4x4/Const/const'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_191": {
                "ndarray": {
                    "value": "vars[f'G_synthesis/noise{i}'].value().eval()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_280": {
                "ndarray": {
                    "value": "z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.RandomState(0).randn(n_sample, 512).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/stylegan2/dataset.py": {
        "torch": {}
    },
    "src/stylegan2/distributed.py": {
        "torch": {
            "cat_91": {
                "variable": {
                    "value": "tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(tensor, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_118": {
                "variable": {
                    "value": "losses",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "losses",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(losses, 0)",
                            "Call"
                        ],
                        [
                            "losses / world_size",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "is_available_10": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_45": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_initialized_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_110": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/fid.py": {
        "torch": {
            "cat_29": {
                "variable": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "extract_feature_from_samples(g, inception, args.truncation, mean_latent, args.batch, args.n_sample, device).numpy()",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(features, 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_14": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_97": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_101": {
                "variable": {
                    "value": "g",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "g",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Generator(args.size, 512, 8).to(device)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(g)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "inception",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "load_patched_inception_v3()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_24": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/generate.py": {
        "torch": {
            "load_74": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_14": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "no_grad_79": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/inception.py": {
        "torch": {
            "ModuleList_77": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "avg_pool2d_210": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_238": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_259": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_267": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "avg_pool2d_271": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_292": {
                "variable": {
                    "value": "branch3x3",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3_1(x)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3_2a(branch3x3), self.branch3x3_2b(branch3x3)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_300": {
                "variable": {
                    "value": "branch3x3dbl",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "branch3x3dbl",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_3(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_1(x)",
                            "Call"
                        ],
                        [
                            "self.branch3x3dbl_2(branch3x3dbl)",
                            "Call"
                        ],
                        [
                            "[self.branch3x3dbl_3a(branch3x3dbl), self.branch3x3dbl_3b(branch3x3dbl)]",
                            "List"
                        ],
                        [
                            "torch.cat(branch3x3dbl, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_306": {
                "variable": {
                    "value": "branch_pool",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_147": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "inp",
                            "Name"
                        ],
                        [
                            "F.interpolate(x, size=(299, 299), mode='bilinear', align_corners=False)",
                            "Call"
                        ],
                        [
                            "2 * x - 1",
                            "BinOp"
                        ],
                        [
                            "block(x)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(299, 299)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_215": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_243": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_276": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_310": {
                "tensors": {
                    "value": "outputs",
                    "type": "List",
                    "possible_values": [
                        [
                            "[branch1x1, branch5x5, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch7x7, branch7x7dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ],
                        [
                            "[branch1x1, branch3x3, branch3x3dbl, branch_pool]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_89": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_91": {
                "*args": {
                    "value": "*block0",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_98": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "*block1",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "*args": {
                    "value": "*block2",
                    "type": null,
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_122": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_124": {
                "*args": {
                    "value": "*block3",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/lpips/__init__.py": {
        "torch": {
            "sqrt_43": {
                "variable": {
                    "value": "norm_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(in_feat ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_43": {
                "input": {
                    "value": "in_feat ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/lpips/base_model.py": {
        "torch": {
            "save_41": {
                "obj": {
                    "value": "network.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_48": {
                "f": {
                    "value": "save_path",
                    "type": "Call",
                    "possible_values": [
                        [
                            "os.path.join(path, save_filename)",
                            "Call"
                        ],
                        [
                            "os.path.join(self.save_dir, save_filename)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/stylegan2/lpips/dist_model.py": {
        "torch": {
            "Adam_94": {
                "variable": {
                    "value": "self.optimizer_net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.parameters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.old_lr - lrd",
                            "BinOp"
                        ],
                        [
                            "0.0001",
                            "MethodArgument"
                        ]
                    ]
                },
                "betas": {
                    "value": "(beta1, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataParallel_100": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "module": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[0]",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "mean_163": {
                "input": {
                    "value": "self.loss_total",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "backward_163": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clamp_130": {
                "variable": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "module.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_73": {
                "f": {
                    "value": "model_path",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.abspath(os.path.join(inspect.getfile(self.initialize), '..', 'weights/v%s/%s.pth' % (version, net)))",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/stylegan2/lpips/networks_basic.py": {
        "torch": {
            "Sequential_111": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_126": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCELoss_136": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Upsample_24": {
                "scale_factor": {
                    "value": "scale_factor",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1.0 * out_H / in_H",
                            "BinOp"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_157": {
                "input": {
                    "value": "(in0 - in1) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "in_channels": {
                    "value": "chn_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_out",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "in_channels": {
                    "value": "5",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_121": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "chn_mid",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_122": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "in_channels": {
                    "value": "chn_mid",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "32",
                            "MethodArgument"
                        ],
                        [
                            "32",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_129": {
                "tensors": {
                    "value": "(d0, d1, d0 - d1, d0 / (d1 + eps), d1 / (d0 + eps))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_109": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sigmoid_125": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/lpips/pretrained_networks.py": {
        "torch": {
            "Sequential_10": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_11": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_13": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_14": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_15": {
                "variable": {
                    "value": "self.slice6",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.slice7",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_61": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_63": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_64": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_101": {
                "variable": {
                    "value": "self.slice1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "self.slice2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_103": {
                "variable": {
                    "value": "self.slice3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_104": {
                "variable": {
                    "value": "self.slice4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "self.slice5",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/model.py": {
        "torch": {
            "tensor_30": {
                "variable": {
                    "value": "k",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "k",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "torch.tensor(k, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "k[None, :] * k[:, None]",
                            "BinOp"
                        ],
                        [
                            "k / k.sum()",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_107": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_149": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(out_dim, in_dim).div_(lr_mul)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_226": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, out_channel, in_channel, kernel_size, kernel_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_324": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_338": {
                "variable": {
                    "value": "self.input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(1, channel, size, size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_392": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_683": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*convs",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_689": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_702": {
                "variable": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_705": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_116": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_dim).fill_(bias_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_168": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input * style.reshape(batch, in_channel, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linear_172": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Call",
                    "possible_values": [
                        [
                            "input * style.reshape(batch, in_channel, 1, 1)",
                            "BinOp"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "self.blur(input)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ],
                        [
                            "input.view(1, batch * in_channel, height, width)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight * self.scale",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias * self.lr_mul",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_277": {
                "variable": {
                    "value": "demod",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weight.pow(2).sum([2, 3, 4]) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_26": {
                "input": {
                    "value": "torch.mean(input ** 2, dim=1, keepdim=True) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_108": {
                "*size": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_149": {
                "*size": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "in_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_227": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "in_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels[size]",
                            "Subscript"
                        ],
                        [
                            "out_channel",
                            "Name"
                        ]
                    ]
                },
                "layout": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "kernel_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_324": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_338": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                },
                "layout": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_392": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "*size": {
                    "value": "out_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "channels[2 ** (i - 1)]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "out_dim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_26": {
                "input": {
                    "value": "input ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/non_leaking.py": {
        "torch": {
            "eye_76": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_76": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_77": {
                "variable": {
                    "value": "translate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_x, t_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_86": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_86": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sin_87": {
                "variable": {
                    "value": "sin_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_88": {
                "variable": {
                    "value": "cos_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_89": {
                "variable": {
                    "value": "rot",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(cos_t, -sin_t, sin_t, cos_t)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_98": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_98": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_108": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_108": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "translate",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(t_x, t_y, t_z)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_120": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_120": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_121": {
                "variable": {
                    "value": "cross",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(0, -u_z, u_y), (u_z, 0, -u_x), (-u_y, u_x, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "unsqueeze_121": {
                "variable": {
                    "value": "cross",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_122": {
                "variable": {
                    "value": "outer",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "sin_125": {
                "variable": {
                    "value": "sin_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cos_126": {
                "variable": {
                    "value": "cos_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_130": {
                "variable": {
                    "value": "eye_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_130": {
                "variable": {
                    "value": "eye_4",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_139": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_139": {
                "variable": {
                    "value": "mat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_150": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_150": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_151": {
                "variable": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis + (0,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_160": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_160": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_161": {
                "variable": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "axis + (0,)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ger_162": {
                "variable": {
                    "value": "axis",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "axis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                },
                "vec2": {
                    "value": "axis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "tensor_173": {
                "variable": {
                    "value": "category",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "categories",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randint_174": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "len(categories)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "(size,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_200": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_200": {
                "variable": {
                    "value": "G",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "eye_259": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "unsqueeze_259": {
                "variable": {
                    "value": "C",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "empty_294": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_295": {
                "variable": {
                    "value": "grid[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "x0",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "linspace_296": {
                "variable": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "start": {
                    "value": "y0",
                    "type": "Variable",
                    "possible_values": []
                },
                "end": {
                    "value": "y1",
                    "type": "Variable",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "unsqueeze_296": {
                "variable": {
                    "value": "grid[:, :, :, 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tensor_312": {
                "variable": {
                    "value": "cp",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[(-cx, -cy, 1), (cx, -cy, 1), (cx, cy, 1), (-cx, cy, 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "pad_340": {
                "variable": {
                    "value": "img_pad",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "img @ mat_mul + mat_add",
                            "BinOp"
                        ],
                        [
                            "img.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "apply_color(img, C.to(img))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(pad_x1, pad_x2, pad_y1, pad_y2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "reflect",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "as_tensor_398": {
                "variable": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel).to(img)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_400": {
                "variable": {
                    "value": "kernel_flip",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "antialiasing_kernel",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(kernel).to(img)",
                            "Call"
                        ]
                    ]
                },
                "dims": {
                    "value": "(0,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "affine_grid_428": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "G_inv[:, :2, :].to(img_2x)",
                    "type": "Call",
                    "possible_values": []
                },
                "size": {
                    "value": "shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(batch_size, channel, (height + pad_k * 2) * 2, (width + pad_k * 2) * 2)",
                            "Tuple"
                        ]
                    ]
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_24": {
                "variable": {
                    "value": "self.ada_aug_buf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.0, 0.0]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "empty_169": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_180": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_184": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "empty_188": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "inverse_336": {
                "variable": {
                    "value": "G_try",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sample_affine(p, batch, height, width)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "grid_sample_348": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.empty(n, h, w, 3, device=device)",
                            "Call"
                        ],
                        [
                            "F.affine_grid(G_inv[:, :2, :].to(img_2x), shape, align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_387": {
                "data": {
                    "value": "((s_x, 0, 0), (0, s_y, 0), (0, 0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_391": {
                "data": {
                    "value": "((1, 0, t_x), (0, 1, t_y), (0, 0, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_31": {
                "data": {
                    "value": "(torch.sign(real_pred).sum().item(), real_pred.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "device": {
                    "value": "real_pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_205": {
                "*size": {
                    "value": "size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "transform.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "round_217": {
                "input": {
                    "value": "param * height",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "round_218": {
                "input": {
                    "value": "param * width",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_320": {
                "tensors": {
                    "value": "(-pad, pad)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "max_320": {
                "input": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_321": {
                "data": {
                    "value": "[pad_k * 2 - cx, pad_k * 2 - cy] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_322": {
                "data": {
                    "value": "[0, 0] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tensor_323": {
                "data": {
                    "value": "[width - 1, height - 1] * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "G.device",
                            "Attribute"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ],
                        [
                            "'cpu'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ger_152": {
                "input": {
                    "value": "axis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                },
                "vec2": {
                    "value": "axis",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.tensor(axis + (0,))",
                            "Call"
                        ],
                        [
                            "torch.ger(axis, axis)",
                            "Call"
                        ],
                        [
                            "(axis_val, axis_val, axis_val)",
                            "Tuple"
                        ]
                    ]
                }
            },
            "sign_32": {
                "input": {
                    "value": "real_pred",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/op/conv2d_gradfix.py": {
        "torch": {
            "conv2d_34": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "ensure_tuple(stride, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "ensure_tuple(padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "ensure_tuple(dilation, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv_transpose2d_66": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "ensure_tuple(stride, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "ensure_tuple(padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(output_padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                },
                "dilation": {
                    "value": "dilation",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "ensure_tuple(dilation, ndim)",
                            "Call"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "groups": {
                    "value": "groups",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv2d_138": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "conv_transpose2d_141": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "bias": {
                    "value": "bias",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "output_padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "ensure_tuple(output_padding, ndim)",
                            "Call"
                        ],
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "src/stylegan2/op/fused_act.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "fused",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "fused",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'fused_bias_act.cpp'), os.path.join(module_path, 'fused_bias_act_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_98": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(channel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_98": {
                "*size": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "leaky_relu_115": {
                "input": {
                    "value": "input + bias.view(1, bias.shape[0], *rest_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "leaky_relu_122": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/op/upfirdn2d.py": {
        "torch": {
            "load_11": {
                "variable": {
                    "value": "upfirdn2d_op",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "upfirdn2d",
                    "type": "Constant",
                    "possible_values": []
                },
                "sources": {
                    "value": "[os.path.join(module_path, 'upfirdn2d.cpp'), os.path.join(module_path, 'upfirdn2d_kernel.cu')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_179": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, *up, *down, *pad)",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, up, down, pad)",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_182": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, *up, *down, *pad)",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, up, down, pad)",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "[0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flip_196": {
                "variable": {
                    "value": "w",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_197": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "Call",
                    "possible_values": [
                        [
                            "upfirdn2d_native(input, kernel, *up, *down, *pad)",
                            "Call"
                        ],
                        [
                            "UpFirDn2d.apply(input, kernel, up, down, pad)",
                            "Call"
                        ],
                        [
                            "input.view(-1, in_h, 1, in_w, 1, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, 0, up_x - 1, 0, 0, 0, up_y - 1])",
                            "Call"
                        ],
                        [
                            "out.view(-1, in_h * up_y, in_w * up_x, minor)",
                            "Call"
                        ],
                        [
                            "F.pad(out, [0, 0, max(pad_x0, 0), max(pad_x1, 0), max(pad_y0, 0), max(pad_y1, 0)])",
                            "Call"
                        ],
                        [
                            "out[:, max(-pad_y0, 0):out.shape[1] - max(-pad_y1, 0), max(-pad_x0, 0):out.shape[2] - max(-pad_x1, 0), :]",
                            "Subscript"
                        ],
                        [
                            "out.permute(0, 3, 1, 2)",
                            "Call"
                        ],
                        [
                            "out.reshape([-1, 1, in_h * up_y + pad_y0 + pad_y1, in_w * up_x + pad_x0 + pad_x1])",
                            "Call"
                        ],
                        [
                            "F.conv2d(out, w)",
                            "Call"
                        ],
                        [
                            "out.reshape(-1, minor, in_h * up_y + pad_y0 + pad_y1 - kernel_h + 1, in_w * up_x + pad_x0 + pad_x1 - kernel_w + 1)",
                            "Call"
                        ],
                        [
                            "out.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "out[:, ::down_y, ::down_x, :]",
                            "Subscript"
                        ],
                        [
                            "upfirdn2d_op.upfirdn2d(input, kernel, up_x, up_y, down_x, down_y, pad_x0, pad_x1, pad_y0, pad_y1)",
                            "Call"
                        ],
                        [
                            "out.view(-1, channel, out_h, out_w)",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.flip(kernel, [0, 1]).view(1, 1, kernel_h, kernel_w)",
                            "Call"
                        ]
                    ]
                }
            },
            "flip_102": {
                "input": {
                    "value": "kernel",
                    "type": "Variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[0, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/ppl.py": {
        "torch": {
            "load_71": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_13": {
                "input": {
                    "value": "x.pow(2).sum(-1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "acos_20": {
                "input": {
                    "value": "d",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(a * b).sum(-1, keepdim=True)",
                            "Call"
                        ],
                        [
                            "a * torch.cos(p) + c * torch.sin(p)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_91": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "[batch * 2, latent_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "cos_22": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t * torch.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_22": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "t * torch.acos(d)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "rand_93": {
                "variable": {
                    "value": "lerp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_95": {
                "variable": {
                    "value": "lerp_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tqdm(batch_sizes)",
                            "Call"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "stack_102": {
                "variable": {
                    "value": "latent_e",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent_e0, latent_e1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "interpolate_113": {
                "variable": {
                    "value": "image",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "image",
                    "type": "Name",
                    "possible_values": [
                        [
                            "image[:, :, c * 3:c * 7, c * 2:c * 6]",
                            "Subscript"
                        ],
                        [
                            "F.interpolate(image, size=(256, 256), mode='bilinear', align_corners=False)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "(256, 256)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/projector.py": {
        "torch": {
            "stack_147": {
                "variable": {
                    "value": "imgs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adam_180": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[latent_in] + noises",
                    "type": "BinOp",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_155": {
                "variable": {
                    "value": "noise_sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_mean_latent",
                    "type": "Name",
                    "possible_values": [
                        [
                            "10000",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "mse_loss_206": {
                "variable": {
                    "value": "mse_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "img_gen",
                    "type": "Call",
                    "possible_values": [
                        [
                            "img_gen.reshape(batch, channel, height // factor, factor, width // factor, factor)",
                            "Call"
                        ],
                        [
                            "img_gen.mean([3, 5])",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "imgs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(imgs, 0).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_248": {
                "obj": {
                    "value": "result_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.splitext(os.path.basename(args.files[0]))[0] + '.pt'",
                            "BinOp"
                        ]
                    ]
                }
            },
            "randn_like_56": {
                "input": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_154": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_150": {
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "roll_26": {
                "input": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "noises_single",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "roll_25": {
                "input": {
                    "value": "noise",
                    "type": "Name",
                    "possible_values": [
                        [
                            "noises_single",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "noise.reshape([-1, 1, size // 2, 2, size // 2, 2])",
                            "Call"
                        ],
                        [
                            "noise.mean([3, 5])",
                            "Call"
                        ],
                        [
                            "noises",
                            "Name"
                        ],
                        [
                            "torch.randn_like(latent) * strength",
                            "BinOp"
                        ]
                    ]
                },
                "shifts": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dims": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/stylegan2/swagan.py": {
        "torch": {
            "Parameter_77": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(1, 3 * 4, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_118": {
                "variable": {
                    "value": "self.style",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_141": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_142": {
                "variable": {
                    "value": "self.upsamples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_143": {
                "variable": {
                    "value": "self.to_rgbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Module_144": {
                "variable": {
                    "value": "self.noises",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "randn_193": {
                "variable": {
                    "value": "latent_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "self.style_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self.input.input.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_336": {
                "variable": {
                    "value": "self.from_rgbs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_337": {
                "variable": {
                    "value": "self.convs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "variable": {
                    "value": "self.final_linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "EqualLinear(channels[4] * 4 * 4, channels[4], activation='fused_lrelu')",
                    "type": null,
                    "possible_values": []
                }
            },
            "sqrt_377": {
                "variable": {
                    "value": "stddev",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "stddev.var(0, unbiased=False) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_380": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[out, stddev]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_15": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ones_16": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_44": {
                "tensors": {
                    "value": "(ll, lh, hl, hh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_251": {
                "variable": {
                    "value": "latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[latent, latent2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "randn_184": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "randn_151": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_188": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "layout": {
                    "value": "2 ** i",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.input.input.device",
                            "Attribute"
                        ]
                    ]
                }
            }
        }
    },
    "src/stylegan2/train.py": {
        "torch": {
            "softplus_65": {
                "variable": {
                    "value": "real_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-real_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_66": {
                "variable": {
                    "value": "fake_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fake_pred",
                    "type": "Call",
                    "possible_values": [
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ],
                        [
                            "discriminator(fake_img)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_82": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-fake_pred",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_82": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "grad_91": {
                "variable": {
                    "value": "(grad,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "(fake_img * noise).sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "latents",
                    "type": "Variable",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sqrt_94": {
                "variable": {
                    "value": "path_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad.pow(2).sum(2).mean(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_107": {
                "variable": {
                    "value": "noises",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loader",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "unbind_107": {
                "variable": {
                    "value": "noises",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_137": {
                "variable": {
                    "value": "r1_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_139": {
                "variable": {
                    "value": "path_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_140": {
                "variable": {
                    "value": "path_lengths",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "0.0",
                    "type": "Constant",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "randn_159": {
                "variable": {
                    "value": "sample_z",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.n_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "args.latent",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "Adam_467": {
                "variable": {
                    "value": "g_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "generator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * g_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** g_reg_ratio, 0.99 ** g_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_472": {
                "variable": {
                    "value": "d_optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr * d_reg_ratio",
                    "type": "BinOp",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0 ** d_reg_ratio, 0.99 ** d_reg_ratio)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_521": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "data_sampler(dataset, shuffle=True, distributed=args.distributed)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_73": {
                "variable": {
                    "value": "(grad_real,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "outputs": {
                    "value": "real_pred.sum()",
                    "type": "Call",
                    "possible_values": []
                },
                "inputs": {
                    "value": "real_img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "next(loader)",
                            "Call"
                        ],
                        [
                            "real_img.to(device)",
                            "Call"
                        ]
                    ]
                },
                "create_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_481": {
                "variable": {
                    "value": "ckpt",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.ckpt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "map_location": {
                    "value": "lambda storage, loc: storage",
                    "type": "Lambda",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_498": {
                "variable": {
                    "value": "generator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "generator",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Generator(args.size, args.latent, args.n_mlp, channel_multiplier=args.channel_multiplier).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(generator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedDataParallel_505": {
                "variable": {
                    "value": "discriminator",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "discriminator",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Discriminator(args.size, channel_multiplier=args.channel_multiplier).to(device)",
                            "Call"
                        ],
                        [
                            "nn.parallel.DistributedDataParallel(discriminator, device_ids=[args.local_rank], output_device=args.local_rank, broadcast_buffers=False)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "broadcast_buffers": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DistributedSampler_36": {
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "RandomSampler_39": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "SequentialSampler_42": {
                "data_source": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(args.path, transform, args.size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_88": {
                "input": {
                    "value": "fake_img",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_105": {
                "*size": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "loader",
                            "Name"
                        ]
                    ]
                },
                "out": {
                    "value": "latent_dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "Name",
                    "possible_values": [
                        [
                            "'cuda'",
                            "Constant"
                        ]
                    ]
                }
            },
            "set_device_437": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_318": {
                "obj": {
                    "value": "{'g': g_module.state_dict(), 'd': d_module.state_dict(), 'g_ema': g_ema.state_dict(), 'g_optim': g_optim.state_dict(), 'd_optim': d_optim.state_dict(), 'args': args, 'ada_aug_p': ada_aug_p}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "f'checkpoint/{str(i).zfill(6)}.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_306": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/cross/src/alias_free_gan_test.py": {
        "torch": {
            "DataLoader_90": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "MultiResolutionDataset(os.path.join(os.path.dirname(os.path.abspath(__file__)), '../../..', 'alias-free-gan-ci-files/flowers-test-dataset-32-256'), transform=transform, resolution=args.size)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_28": {
                "variable": {
                    "value": "i",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "i",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor1",
                            "Name"
                        ],
                        [
                            "torch.sum(i)",
                            "Call"
                        ],
                        [
                            "list(i)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_29": {
                "variable": {
                    "value": "j",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "j",
                    "type": "Name",
                    "possible_values": [
                        [
                            "tensor2",
                            "Name"
                        ],
                        [
                            "torch.sum(j)",
                            "Call"
                        ],
                        [
                            "list(j)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "test/gpu/scripts/trainer_test.py": {
        "torch": {
            "empty_cache_11": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "test/gpu/src/op_test.py": {
        "torch": {
            "rand_58": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6144",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "36",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "36",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_59": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6144",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "36",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "36",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_60": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "6144",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "52",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "52",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_61": {
                "*size": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "36",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "36",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_64": {
                "*size": {
                    "value": "6144",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_65": {
                "*size": {
                    "value": "6144",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_66": {
                "*size": {
                    "value": "6144",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_67": {
                "*size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_73": {
                "*size": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_104": {
                "input": {
                    "value": "cuda_result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cuda_op_conv2d_gradfix.conv2d(in_tensors[i], weights[i], biases[i], 1, paddings[i], 1, groups[i])",
                            "Call"
                        ],
                        [
                            "cuda_op.upfirdn2d(in_tensors[i], kernels[i], ups[i], downs[i], pads[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "arrayfire_result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "arrayfire_op_conv2d_gradfix.conv2d(in_tensors[i], weights[i], biases[i], 1, paddings[i], 1, groups[i])",
                            "Call"
                        ],
                        [
                            "arrayfire_op.upfirdn2d(in_tensors[i], kernels[i], ups[i], downs[i], pads[i])",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_128": {
                "*size": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "84",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "336",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_129": {
                "*size": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "336",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "336",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_130": {
                "*size": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "336",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "168",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_131": {
                "*size": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "148",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "148",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_132": {
                "*size": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "148",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "296",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_135": {
                "*size": {
                    "value": "24",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_136": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_137": {
                "*size": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_138": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_139": {
                "*size": {
                    "value": "12",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "allclose_186": {
                "input": {
                    "value": "cuda_result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "cuda_op_conv2d_gradfix.conv2d(in_tensors[i], weights[i], biases[i], 1, paddings[i], 1, groups[i])",
                            "Call"
                        ],
                        [
                            "cuda_op.upfirdn2d(in_tensors[i], kernels[i], ups[i], downs[i], pads[i])",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "arrayfire_result",
                    "type": "Call",
                    "possible_values": [
                        [
                            "arrayfire_op_conv2d_gradfix.conv2d(in_tensors[i], weights[i], biases[i], 1, paddings[i], 1, groups[i])",
                            "Call"
                        ],
                        [
                            "arrayfire_op.upfirdn2d(in_tensors[i], kernels[i], ups[i], downs[i], pads[i])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}