{
    "FaceClassify/utils/utils.py": {
        "sklearn": {
            "KFold_153": {
                "variable": {
                    "value": "k_fold",
                    "type": "variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "K",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "auc_199": {
                "variable": {
                    "value": "roc_auc",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "FPR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if FP + TN == 0 else float(FP) / float(FP + TN)",
                            "IfExp"
                        ],
                        [
                            "np.mean(FPRs, 0)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "TPR",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0 if TP + FN == 0 else float(TP) / float(TP + FN)",
                            "IfExp"
                        ],
                        [
                            "np.mean(TPRs, 0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "save_26": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dict(model_state=model_state, optimizer_state=optimizer_state)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "abs_102": {
                "variable": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1 - x2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "pow_103": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.abs(x1 - x2)",
                            "Call"
                        ]
                    ]
                },
                "exponent": {
                    "value": "self.norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_103": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_104": {
                "input": {
                    "value": "out + eps",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "1.0 / self.norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "FaceClassify/datasets/Dataset.py": {
        "torch": {}
    },
    "FaceClassify/eval_scripts/eval_lfw.py": {
        "torch": {
            "DataLoader_51": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LFWDataset(dir_='/home/zcjin/lfw/lfw_182', pairs_path='./lfw_pairs.txt', transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'./weights/checkpoint_23439.pth'",
                            "str"
                        ]
                    ]
                }
            },
            "DataParallel_57": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet(num_classes=10575, embeddings_num=128, img_size=224, is_fc=True, is_AvgPool=False, pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FaceClassify/eval_scripts/eval_own.py": {
        "torch": {
            "DataParallel_36": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet(num_classes=10575, embeddings_num=128, img_size=224, is_fc=True, is_AvgPool=False, pretrained=False)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_39": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'weights/resnet34.pth'",
                            "str"
                        ]
                    ]
                }
            }
        }
    },
    "FaceClassify/losses/TripletMarginLoss.py": {
        "torch": {
            "clamp_21": {
                "variable": {
                    "value": "dist_hinge",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.margin + dis_apos - dis_aneg",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "mean_22": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dist_hinge",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.clamp(self.margin + dis_apos - dis_aneg, min=0.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FaceClassify/nets/ResNets.py": {
        "torch": {
            "zeros_47": {
                "variable": {
                    "value": "self.centers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "pow_176": {
                "variable": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "exponent": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "normp",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.pow(input_, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "variable": {
                    "value": "norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "normp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(temp, 1).add_(1e-10)",
                            "Call"
                        ]
                    ]
                }
            },
            "div_179": {
                "variable": {
                    "value": "_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input_",
                    "type": "variable",
                    "possible_values": []
                },
                "other": {
                    "value": "norm.view(-1, 1).expand_as(input_)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MSELoss_260": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_264": {
                "ndarray": {
                    "value": "unique_reverse",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "gather_264": {
                "variable": {
                    "value": "appear_times",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.from_numpy(unique_reverse)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AvgPool2d_65": {
                "variable": {
                    "value": "self.model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(img_size / self.stride)",
                            "Call"
                        ],
                        [
                            "math.ceil(img_size / self.stride)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_67": {
                "variable": {
                    "value": "self.model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_69": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_249": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.model[-2](x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.model[-1](x)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "x.view(x.size(0), -1)",
                            "Call"
                        ],
                        [
                            "m(x)",
                            "Call"
                        ],
                        [
                            "self.forward(x)",
                            "Call"
                        ],
                        [
                            "self.model.classifier(x)",
                            "Call"
                        ],
                        [
                            "self.model[-1](x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_255": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_72": {
                "variable": {
                    "value": "temp_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * math.ceil(img_size / self.stride) * math.ceil(img_size / self.stride)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_98": {
                "variable": {
                    "value": "temp_model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_103": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "temp_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * math.ceil(img_size / self.stride) * math.ceil(img_size / self.stride)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_107": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(cov_stride, cov_stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_137": {
                "variable": {
                    "value": "temp_model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "self.model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_160": {
                "variable": {
                    "value": "temp_model.avgpool",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math.ceil(img_size / self.stride)",
                            "Call"
                        ],
                        [
                            "math.ceil(img_size / self.stride)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "ceil_mode": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "count_include_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_78": {
                "variable": {
                    "value": "temp_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048 * math.ceil(img_size / self.stride) * math.ceil(img_size / self.stride)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_111": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(cov_stride, cov_stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_143": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_172": {
                "variable": {
                    "value": "temp_model.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_81": {
                "variable": {
                    "value": "temp_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048 * math.ceil(img_size / self.stride) * math.ceil(img_size / self.stride)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_115": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(cov_stride, cov_stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_146": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "temp_model.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2048 * math.ceil(img_size / self.stride) * math.ceil(img_size / self.stride)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(cov_stride, cov_stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_149": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_123": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(cov_stride, cov_stride)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_152": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_155": {
                "variable": {
                    "value": "temp_model.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "2048",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "embeddings_num",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "FaceClassify/train_resnet_triplet.py": {
        "torch": {
            "DataLoader_88": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LTripletImageDataset(train_dir, transform=transform, max_pairs=max_batches * batch_size)",
                            "Call"
                        ],
                        [
                            "TripletFaceDataset(dir_=train_dir, n_triplets=n_triplets, transform=transform)",
                            "Call"
                        ],
                        [
                            "TripletFaceDataset(dir_=train_dir, n_triplets=n_triplets, transform=transform)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(options['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_101": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_imgs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "LFWDataset(dir_=test_dir, pairs_path=pairs_dir, transform=transform_test)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(options['batch_size'])",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "SGD_124": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(options['lr'])",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "dampening": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(options['weight_decay'])",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_206": {
                "variable": {
                    "value": "selected_label_p",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_p.cpu().numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_207": {
                "variable": {
                    "value": "selected_label_n",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "label_n.cpu().numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TripletMarginLoss_211": {
                "variable": {
                    "value": "triplet_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "margin": {
                    "value": "margin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(options['margin'])",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_217": {
                "variable": {
                    "value": "CrossEntropycriterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_221": {
                "variable": {
                    "value": "predicted_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[cls_anchor, cls_postive, cls_negative]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_222": {
                "variable": {
                    "value": "true_labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[Variable(selected_label_p), Variable(selected_label_p), Variable(selected_label_n)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(options['lr'])",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(options['weight_decay'])",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_250": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ResNet(resnet='resnet50', num_classes=train_imgs.num_classes, embeddings_num=embedding_size, img_size=img_size, is_fc=True, is_AvgPool=False, pretrained=pretrained)",
                            "Call"
                        ],
                        [
                            "ResNet(resnet='resnet50', num_classes=len(train_imgs.classes), embeddings_num=embedding_size, img_size=img_size, is_fc=True, is_AvgPool=False, pretrained=pretrained)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "load_258": {
                "variable": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resume",
                    "type": "variable",
                    "possible_values": [
                        [
                            "options['resume']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Adagrad_135": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(options['lr'])",
                            "Call"
                        ]
                    ]
                },
                "lr_decay": {
                    "value": "lr_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(options['lr_decay'])",
                            "Call"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(options['weight_decay'])",
                            "Call"
                        ]
                    ]
                }
            },
            "save_236": {
                "obj": {
                    "value": "{'step': step_now, 'batch_idx': batch_total, 'state_dict': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "'./{}/checkpoint_{}.pth'.format(backup_dir, batch_total)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_181": {
                "ndarray": {
                    "value": "anchor.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_182": {
                "ndarray": {
                    "value": "positive.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_183": {
                "ndarray": {
                    "value": "negative.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_184": {
                "ndarray": {
                    "value": "out_an.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_185": {
                "ndarray": {
                    "value": "out_po.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_186": {
                "ndarray": {
                    "value": "out_ne.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_194": {
                "ndarray": {
                    "value": "anchor.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_195": {
                "ndarray": {
                    "value": "positive.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_196": {
                "ndarray": {
                    "value": "negative.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_197": {
                "ndarray": {
                    "value": "out_an.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_198": {
                "ndarray": {
                    "value": "out_po.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_199": {
                "ndarray": {
                    "value": "out_ne.cpu().data.numpy()[hard_triplets]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/cv2_demoV2.py": {
        "torch": {
            "from_numpy_44": {
                "variable": {
                    "value": "sized",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sized.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_44": {
                "variable": {
                    "value": "sized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_44": {
                "variable": {
                    "value": "sized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/dataset.py": {
        "torch": {
            "zeros_68": {
                "variable": {
                    "value": "label",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "50 * 5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "from_numpy_71": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "read_truths_args(labpath, 8.0 / img.width).astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/detectV2.py": {
        "torch": {
            "from_numpy_38": {
                "variable": {
                    "value": "sized",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "sized.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_38": {
                "variable": {
                    "value": "sized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_38": {
                "variable": {
                    "value": "sized",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/layers/yolo_layer.py": {
        "torch": {
            "zeros_24": {
                "variable": {
                    "value": "coord_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "len(masked_anchors) // self.anchor_step",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "variable": {
                    "value": "cls_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "len(masked_anchors) // self.anchor_step",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "len(masked_anchors) // self.anchor_step",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "len(masked_anchors) // self.anchor_step",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "len(masked_anchors) // self.anchor_step",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "len(masked_anchors) // self.anchor_step",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "tconf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "len(masked_anchors) // self.anchor_step",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "tcls",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "len(masked_anchors) // self.anchor_step",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_36": {
                "variable": {
                    "value": "cur_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nAnchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nA * nH * nW",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_23": {
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "len(masked_anchors) // self.anchor_step",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_44": {
                "variable": {
                    "value": "cur_gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_45": {
                "variable": {
                    "value": "cur_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(nAnchors)",
                            "Call"
                        ],
                        [
                            "torch.max(cur_ious, bbox_ious(cur_pred_boxes, cur_gt_boxes, x1y1x2y2=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_49": {
                "variable": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_50": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_142": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.index_select(2, Variable(torch.cuda.LongTensor([0]))).view(nB, nA, nH, nW)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_143": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.index_select(2, Variable(torch.cuda.LongTensor([1]))).view(nB, nA, nH, nW)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.index_select(2, Variable(torch.cuda.LongTensor([4]))).view(nB, nA, nH, nW)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_153": {
                "variable": {
                    "value": "grid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nW - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_154": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nH - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_154": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_155": {
                "variable": {
                    "value": "anchor_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_155": {
                "variable": {
                    "value": "anchor_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_157": {
                "variable": {
                    "value": "anchor_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_157": {
                "variable": {
                    "value": "anchor_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_163": {
                "input": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_164": {
                "input": {
                    "value": "h.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_147": {
                "start": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5 + nC - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "nC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "variable"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MSELoss_192": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_193": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_188": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_189": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_190": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_191": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/loss_module/FocalLoss.py": {
        "torch": {
            "softmax_40": {
                "variable": {
                    "value": "P",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_27": {
                "*size": {
                    "value": "class_num",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pow_59": {
                "input": {
                    "value": "1 - probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "self.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/loss_module/region_loss.py": {
        "torch": {
            "zeros_25": {
                "variable": {
                    "value": "coord_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "self.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "variable": {
                    "value": "cls_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "self.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "self.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "self.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "tw",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "self.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_30": {
                "variable": {
                    "value": "th",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "self.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "tconf",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "self.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_32": {
                "variable": {
                    "value": "tcls",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "self.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "cur_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nAnchors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nA * nH * nW",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_190": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.index_select(2, Variable(torch.cuda.LongTensor([0]))).view(nB, nA, nH, nW)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_191": {
                "variable": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.index_select(2, Variable(torch.cuda.LongTensor([1]))).view(nB, nA, nH, nW)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_195": {
                "variable": {
                    "value": "conf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output.index_select(2, Variable(torch.cuda.LongTensor([4]))).view(nB, nA, nH, nW)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linspace_207": {
                "variable": {
                    "value": "grid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nW - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "linspace_209": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "nH - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_209": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_213": {
                "variable": {
                    "value": "anchor_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_213": {
                "variable": {
                    "value": "anchor_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_216": {
                "variable": {
                    "value": "anchor_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_216": {
                "variable": {
                    "value": "anchor_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_24": {
                "*size": {
                    "value": "nB",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.size(0)",
                            "Call"
                        ],
                        [
                            "output.data.size(0)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nA",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_anchors",
                            "variable"
                        ],
                        [
                            "self.num_anchors",
                            "Attribute"
                        ]
                    ]
                },
                "dtype": {
                    "value": "nH",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(2)",
                            "Call"
                        ]
                    ]
                },
                "layout": {
                    "value": "nW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.data.size(3)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_52": {
                "variable": {
                    "value": "cur_gt_boxes",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "max_55": {
                "variable": {
                    "value": "cur_ious",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cur_ious",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.zeros(nAnchors)",
                            "Call"
                        ],
                        [
                            "torch.max(cur_ious, bbox_ious(cur_pred_boxes, cur_gt_boxes, x1y1x2y2=False))",
                            "Call"
                        ]
                    ]
                }
            },
            "index_select_66": {
                "variable": {
                    "value": "tx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([2])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "index_select_68": {
                "variable": {
                    "value": "ty",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([3])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_224": {
                "input": {
                    "value": "w.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_225": {
                "input": {
                    "value": "h.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linspace_199": {
                "start": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "5 + nC - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "nC",
                    "type": "variable",
                    "possible_values": [
                        [
                            "num_classes",
                            "variable"
                        ],
                        [
                            "self.num_classes",
                            "Attribute"
                        ]
                    ]
                }
            },
            "MSELoss_299": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_301": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_295": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_296": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_297": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_298": {
                "size_average": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/nets/darknet.py": {
        "torch": {
            "pad_33": {
                "variable": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x_pad, 2, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, self.stride, W, self.stride).contiguous().view(B, C, H * self.stride, W * self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // h_stride, h_stride, W // w_stride, w_stride).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // h_stride * (W // w_stride), h_stride * w_stride).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, h_stride * w_stride, H // h_stride, W // w_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, h_stride * w_stride * C, H // h_stride, W // w_stride)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(0, 1, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "replicate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool2d_34": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.pad(x, (0, 1, 0, 1), mode='replicate')",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_114": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x_pad, 2, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, self.stride, W, self.stride).contiguous().view(B, C, H * self.stride, W * self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // h_stride, h_stride, W // w_stride, w_stride).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // h_stride * (W // w_stride), h_stride * w_stride).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, h_stride * w_stride, H // h_stride, W // w_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, h_stride * w_stride * C, H // h_stride, W // w_stride)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "(H, W)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_227": {
                "variable": {
                    "value": "models",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_395": {
                "variable": {
                    "value": "self.header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "header",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.fromfile(fp, count=5, dtype=np.int32)",
                            "Call"
                        ],
                        [
                            "self.header",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Sequential_250": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_269": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "pool_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_171": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x1, x2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_181": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x_pad, 2, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, self.stride, W, self.stride).contiguous().view(B, C, H * self.stride, W * self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // h_stride, h_stride, W // w_stride, w_stride).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // h_stride * (W // w_stride), h_stride * w_stride).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, h_stride * w_stride, H // h_stride, W // w_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, h_stride * w_stride * C, H // h_stride, W // w_stride)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_252": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2 if is_pad else 0",
                            "IfExp"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_253": {
                "num_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['size'])",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "int(block['stride'])",
                            "Call"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ],
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(kernel_size - 1) // 2 if is_pad else 0",
                            "IfExp"
                        ]
                    ]
                }
            },
            "LeakyReLU_257": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Softmax_282": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_183": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.max_pool2d(x_pad, 2, stride=1)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H, 1, W, 1).expand(B, C, H, self.stride, W, self.stride).contiguous().view(B, C, H * self.stride, W * self.stride)",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // h_stride, h_stride, W // w_stride, w_stride).transpose(3, 4).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, H // h_stride * (W // w_stride), h_stride * w_stride).transpose(2, 3).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, C, h_stride * w_stride, H // h_stride, W // w_stride).transpose(1, 2).contiguous()",
                            "Call"
                        ],
                        [
                            "x.view(B, h_stride * w_stride * C, H // h_stride, W // w_stride)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(x, (H, W))",
                            "Call"
                        ],
                        [
                            "x.view(N, C)",
                            "Call"
                        ],
                        [
                            "self.models[ind](x)",
                            "Call"
                        ],
                        [
                            "outputs[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "x1 + x2",
                            "BinOp"
                        ],
                        [
                            "torch.cat((x1, x2), 1)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x, 0.1, inplace=True)",
                            "Call"
                        ],
                        [
                            "F.relu(x, inplace=True)",
                            "Call"
                        ]
                    ]
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_259": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_289": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "L1Loss_291": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SmoothL1Loss_293": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "size_average": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_335": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(prev_filters, filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_341": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(prev_filters, filters)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_338": {
                "in_features": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "LeakyReLU_339": {
                "negative_slope": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_342": {
                "in_features": {
                    "value": "prev_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ],
                        [
                            "int(block['channels'])",
                            "Call"
                        ],
                        [
                            "filters",
                            "variable"
                        ],
                        [
                            "stride * stride * prev_filters",
                            "BinOp"
                        ],
                        [
                            "out_filters[layers[0]]",
                            "Subscript"
                        ],
                        [
                            "out_filters[ind - 1]",
                            "Subscript"
                        ],
                        [
                            "out_filters[layers[0]] + out_filters[layers[1]]",
                            "BinOp"
                        ],
                        [
                            "filters",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(block['filters'])",
                            "Call"
                        ],
                        [
                            "int(block['output'])",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_343": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/train.py": {
        "torch": {
            "DataLoader_101": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.listDataset(testlist, shape=(init_width, init_height), shuffle=False, transform=transforms.Compose([transforms.ToTensor()]), train=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Settings.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SGD_122": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate / batch_size",
                    "type": "BinOp",
                    "possible_values": []
                },
                "momentum": {
                    "value": "momentum",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Settings.momentum",
                            "Attribute"
                        ]
                    ]
                },
                "dampening": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "decay * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "manual_seed_71": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Settings.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataLoader_154": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.listDataset(trainlist, shape=(init_width, init_height), shuffle=True, transform=transforms.Compose([transforms.ToTensor()]), train=True, seen=cur_model.seen, batch_size=batch_size, num_workers=num_workers)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Settings.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "zeros_170": {
                "variable": {
                    "value": "avg_time",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_74": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Settings.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_112": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Darknet(cfgfile)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FaceDetect/utils/cfg_utils.py": {
        "torch": {
            "from_numpy_188": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_190": {
                "ndarray": {
                    "value": "buf[start:start + num_w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_208": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_210": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_212": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_214": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_216": {
                "ndarray": {
                    "value": "buf[start:start + num_w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_240": {
                "ndarray": {
                    "value": "buf[start:start + num_b]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_242": {
                "ndarray": {
                    "value": "buf[start:start + num_w]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/utils/standard_utils.py": {
        "torch": {
            "exp_27": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x - torch.max(x)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_145": {
                "variable": {
                    "value": "grid_x",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "w - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.size(3)",
                            "Call"
                        ],
                        [
                            "box[2] * width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "linspace_149": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "h - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "steps": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.size(2)",
                            "Call"
                        ],
                        [
                            "box[3] * height",
                            "BinOp"
                        ]
                    ]
                }
            },
            "t_149": {
                "variable": {
                    "value": "grid_y",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Tensor_152": {
                "variable": {
                    "value": "anchor_w",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_152": {
                "variable": {
                    "value": "anchor_w",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_153": {
                "variable": {
                    "value": "anchor_h",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "index_select_153": {
                "variable": {
                    "value": "anchor_h",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "torch.LongTensor([1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_162": {
                "variable": {
                    "value": "det_confs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output[4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_166": {
                "variable": {
                    "value": "(cls_max_confs, cls_max_ids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "cls_confs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.Softmax(dim=1)(Variable(output[5:5 + num_classes].transpose(0, 1))).data",
                            "Attribute"
                        ],
                        [
                            "convert2cpu(cls_confs.view(-1, num_classes))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_337": {
                "variable": {
                    "value": "det_confs",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(boxes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_341": {
                "variable": {
                    "value": "(_, sortIds)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "det_confs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(output[4])",
                            "Call"
                        ],
                        [
                            "convert2cpu(det_confs)",
                            "Call"
                        ],
                        [
                            "torch.zeros(len(boxes))",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "min_51": {
                "variable": {
                    "value": "mx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_52": {
                "variable": {
                    "value": "Mx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_53": {
                "variable": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "max_54": {
                "variable": {
                    "value": "My",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_60": {
                "variable": {
                    "value": "mx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[0] - boxes1[2] / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_61": {
                "variable": {
                    "value": "Mx",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[0] + boxes1[2] / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_62": {
                "variable": {
                    "value": "my",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[1] - boxes1[3] / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "max_63": {
                "variable": {
                    "value": "My",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "boxes1[1] + boxes1[3] / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_150": {
                "input": {
                    "value": "output[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_151": {
                "input": {
                    "value": "output[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_159": {
                "input": {
                    "value": "output[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_160": {
                "input": {
                    "value": "output[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_378": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "img.transpose(2, 0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "div_378": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "255.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "unsqueeze_378": {
                "variable": {
                    "value": "img",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_27": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(x - torch.max(x))",
                            "Call"
                        ],
                        [
                            "x / x.sum()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Softmax_165": {
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "FaceDetect/vis.py": {
        "torch": {
            "randn_11": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "416",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "416",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "UsefulTools/Classify/scripts/vis.py": {
        "torch": {
            "randn_10": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "224",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "UsefulTools/Detect/Tools/eval/eval.py": {
        "torch": {
            "DataLoader_57": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.listDataset(testlist, shape=(init_width, init_height), shuffle=False, transform=transforms.Compose([transforms.ToTensor()]), train=False)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Settings.batch_size",
                            "Attribute"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "manual_seed_47": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Settings.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "manual_seed_50": {
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Settings.seed",
                            "Attribute"
                        ]
                    ]
                }
            },
            "DataParallel_68": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Darknet(cfgfile)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model).cuda()",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "UsefulTools/Detect/Tools/eval/validV2.py": {
        "torch": {
            "DataLoader_37": {
                "variable": {
                    "value": "valid_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valid_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dataset.listDataset(valid_images, shape=(m.width, m.height), shuffle=False, transform=transforms.Compose([transforms.ToTensor()]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "valid_batchsize",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}