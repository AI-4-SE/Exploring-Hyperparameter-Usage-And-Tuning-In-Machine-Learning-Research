{
    "boosting_bbvi/scripts/blr.py": {
        "sklearn": {
            "roc_auc_score_560": {
                "variable": {
                    "value": "roc_score",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "ytest",
                    "type": "variable",
                    "possible_values": []
                },
                "y_score": {
                    "value": "ypred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sigmoid(logits).eval()",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "tensorflow": {
            "DEFINE_integer_34": {
                "name": {
                    "value": "LMO_iter",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_35": {
                "name": {
                    "value": "n_fw_iter",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_36": {
                "name": {
                    "value": "outdir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "fw_variant",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "fixed",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "base_dist",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "mvn",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_40": {
                "name": {
                    "value": "seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The random seed to use for everything.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_48": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_loc%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims) + np.random.normal()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_49": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.get_variable(name + '_scale%d' % iter, initializer=tf.random_normal(dims) + np.random.normal())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_294": {
                "variable": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "joint.log_prob(samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_295": {
                "variable": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(q.log_prob(samples), axis=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_347": {
                "variable": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(joint.log_prob(samples))",
                            "Call"
                        ],
                        [
                            "[0.0] * n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "np.mean(joint.log_prob(samples))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_348": {
                "variable": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mixture(cat=Categorical(weights), components=comps).log_prob(samples[i]).eval()",
                            "Call"
                        ],
                        [
                            "np.sum(q_log_prob, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_sum(q.log_prob(samples), axis=1))",
                            "Call"
                        ],
                        [
                            "[0.0] * n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "np.sum(np.mean(q.log_prob(samples).eval(), axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_414": {
                "variable": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(joint.log_prob(samples))",
                            "Call"
                        ],
                        [
                            "[0.0] * n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "np.mean(joint.log_prob(samples))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_415": {
                "variable": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mixture(cat=Categorical(weights), components=comps).log_prob(samples[i]).eval()",
                            "Call"
                        ],
                        [
                            "np.sum(q_log_prob, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_sum(q.log_prob(samples), axis=1))",
                            "Call"
                        ],
                        [
                            "[0.0] * n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "np.sum(np.mean(q.log_prob(samples).eval(), axis=0))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_416": {
                "variable": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_417": {
                "variable": {
                    "value": "relbo_reg_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relbo_reg_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(relbo_reg_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_223": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.zeros(n_comps)",
                            "Call"
                        ],
                        [
                            "s_expectation - q_expectation",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(grad).eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_275": {
                "variable": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[D, self.n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_276": {
                "variable": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_298": {
                "input_tensor": {
                    "value": "elbo_samples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_log_prob - q_log_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "placeholder_466": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Graph_488": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_609": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_49": {
                "name": {
                    "value": "name + '_scale%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims) + np.random.normal()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "squeeze_144": {
                "input": {
                    "value": "p.log_prob(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_295": {
                "input_tensor": {
                    "value": "q.log_prob(samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_graph_310": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_default_graph_372": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_regularization_losses_416": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_420": {
                "name": {
                    "value": "loss/p_log_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_mean(joint.log_prob(samples))",
                            "Call"
                        ],
                        [
                            "[0.0] * n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "np.mean(joint.log_prob(samples))",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_422": {
                "name": {
                    "value": "loss/q_log_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Mixture(cat=Categorical(weights), components=comps).log_prob(samples[i]).eval()",
                            "Call"
                        ],
                        [
                            "np.sum(q_log_prob, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(tf.reduce_sum(q.log_prob(samples), axis=1))",
                            "Call"
                        ],
                        [
                            "[0.0] * n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "np.sum(np.mean(q.log_prob(samples).eval(), axis=0))",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_424": {
                "name": {
                    "value": "loss/reg_penalty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_475": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_490": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_606": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_66": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.random.random(n_comps).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "weights * (1 - gamma)",
                            "BinOp"
                        ],
                        [
                            "weights_prime.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "weights_prime.astype(np.float32)",
                            "Call"
                        ],
                        [
                            "get_new_weights(gamma)",
                            "Call"
                        ],
                        [
                            "q.cat.probs.eval()",
                            "Call"
                        ],
                        [
                            "np.append(weights, gamma).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "[(1.0 - gamma) * w for w in weights]",
                            "ListComp"
                        ],
                        [
                            "fully_corrective(build_mixture(weights, q_components), joint)",
                            "Call"
                        ],
                        [
                            "list(weights)",
                            "Call"
                        ],
                        [
                            "line_search(build_mixture(weights[:-1], q_components[:-1]), qw, joint)",
                            "Call"
                        ],
                        [
                            "np.array(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_220": {
                "input_tensor": {
                    "value": "mix.log_prob(s_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_221": {
                "input_tensor": {
                    "value": "mix.log_prob(q_samples)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_default_graph_314": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_328": {
                "input_tensor": {
                    "value": "qz_copy.log_prob(dict_swap[z])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_335": {
                "input_tensor": {
                    "value": "z_copy.log_prob(dict_swap[z])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_390": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qz_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_396": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * z_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_409": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qt_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_496": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_499": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N_test, D_test]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sigmoid_559": {
                "variable": {
                    "value": "ypred",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.mean([np.dot(Xtest, qtw_new.sample().eval()) for _ in range(50)], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_67": {
                "value": {
                    "value": "c['loc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_68": {
                "value": {
                    "value": "c['scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_278": {
                "a": {
                    "value": "self.X",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "self.w",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_279": {
                "shape": {
                    "value": "[self.n_samples, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_343": {
                "input_tensor": {
                    "value": "x_copy.log_prob(dict_swap[x])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_403": {
                "input_tensor": {
                    "value": "inference.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_465": {
                "shape": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "get_variable_471": {
                "name": {
                    "value": "qw/params",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_posterior_samples, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "set_random_seed_492": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_variables_initializer_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_506": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_279": {
                "shape": {
                    "value": "[self.n_samples, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_465": {
                "shape": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_494": {
                "shape": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_494": {
                "shape": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/scripts/blr_elbo.py": {
        "sklearn": {},
        "tensorflow": {
            "DEFINE_integer_32": {
                "name": {
                    "value": "LMO_iter",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "600",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_33": {
                "name": {
                    "value": "n_fw_iter",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "outdir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "fw_variant",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "fixed",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_37": {
                "name": {
                    "value": "seed",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "help": {
                    "value": "The random seed to use for everything.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_loc%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims) + np.random.normal()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_43": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.get_variable(name + '_scale%d' % iter, dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_56": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "InteractiveSession_59": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_43": {
                "name": {
                    "value": "name + '_scale%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "set_random_seed_58": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_65": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, D]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_68": {
                "variable": {
                    "value": "X_test",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N_test, D_test]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "global_variables_initializer_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_63": {
                "shape": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ones_63": {
                "shape": {
                    "value": "D",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/scripts/blr_utils.py": {
        "sklearn": {},
        "tensorflow": {
            "DEFINE_string_25": {
                "name": {
                    "value": "exp",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "chem",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_103": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_loc%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims) + np.random.normal()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_104": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.get_variable(name + '_scale%d' % iter, dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_104": {
                "name": {
                    "value": "name + '_scale%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "dims",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_115": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_116": {
                "value": {
                    "value": "c['loc']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_117": {
                "value": {
                    "value": "c['scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/core/lpl.py": {
        "tensorflow": {
            "concat_20": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n], self.event_shape_tensor()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Laplace_21": {
                "variable": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_8": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_11": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_14": {
                "input": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_22": {
                "x": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.distributions.Laplace(loc=self.loc, scale=self.scale).sample(n)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/core/mvn.py": {
        "tensorflow": {
            "concat_20": {
                "variable": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[[n], self.event_shape_tensor()]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_8": {
                "value": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtypes.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorShape_11": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_14": {
                "input": {
                    "value": "self.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_23": {
                "x": {
                    "value": "sample",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal(new_shape, seed=seed, dtype=self.loc.dtype, mean=self.loc, stddev=self.scale)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "self.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/core/relbo.py": {
        "tensorflow": {
            "reduce_mean_722": {
                "variable": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_723": {
                "variable": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_724": {
                "variable": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_725": {
                "variable": {
                    "value": "relbo_reg_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relbo_reg_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(relbo_reg_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(relbo_reg_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_749": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(p_log_prob - relbo_reg * q_log_prob - reg_penalty - relbo_reg_log_prob)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_lik - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_prob + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(losses) - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_lik) - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_prob) + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - relbo_reg * tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()) - relbo_reg_log_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_796": {
                "variable": {
                    "value": "p_log_lik",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_log_lik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_lik)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_lik)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_798": {
                "variable": {
                    "value": "kl_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_sum(inference.kl_scaling.get(z, 1.0) * kl_divergence(qz, z)) for (z, qz) in six.iteritems(inference.latent_vars)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_802": {
                "variable": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_814": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(p_log_prob - relbo_reg * q_log_prob - reg_penalty - relbo_reg_log_prob)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_lik - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_prob + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(losses) - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_lik) - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_prob) + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - relbo_reg * tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()) - relbo_reg_log_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "reduce_mean_864": {
                "variable": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_866": {
                "variable": {
                    "value": "q_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_sum(qz.entropy()) for (z, qz) in six.iteritems(inference.latent_vars)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_870": {
                "variable": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_882": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(p_log_prob - relbo_reg * q_log_prob - reg_penalty - relbo_reg_log_prob)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_lik - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_prob + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(losses) - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_lik) - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_prob) + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - relbo_reg * tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()) - relbo_reg_log_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stack_929": {
                "variable": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_930": {
                "variable": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_931": {
                "variable": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_947": {
                "variable": {
                    "value": "q_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-(tf.reduce_mean(q_log_prob * tf.stop_gradient(losses)) - reg_penalty)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "q_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in var_list if len(get_descendants(tf.convert_to_tensor(v), q_rvs)) != 0]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if len(get_descendants(tf.convert_to_tensor(v), q_rvs)) != 0]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if len(get_descendants(tf.convert_to_tensor(v), q_rvs)) != 0]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_951": {
                "variable": {
                    "value": "p_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(p_log_prob - relbo_reg * q_log_prob - reg_penalty - relbo_reg_log_prob)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_lik - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_prob + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(losses) - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_lik) - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_prob) + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - relbo_reg * tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()) - relbo_reg_log_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "p_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in var_list if v not in q_vars]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if v not in q_vars]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if v not in q_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_995": {
                "variable": {
                    "value": "p_log_lik",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_log_lik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_lik)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_lik)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_996": {
                "variable": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_998": {
                "variable": {
                    "value": "kl_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_sum(inference.kl_scaling.get(z, 1.0) * kl_divergence(qz, z)) for (z, qz) in six.iteritems(inference.latent_vars)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_1002": {
                "variable": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_1017": {
                "variable": {
                    "value": "q_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-(tf.reduce_mean(q_log_prob * tf.stop_gradient(p_log_lik)) - kl_penalty - reg_penalty)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "q_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in var_list if len(get_descendants(tf.convert_to_tensor(v), q_rvs)) != 0]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if len(get_descendants(tf.convert_to_tensor(v), q_rvs)) != 0]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if len(get_descendants(tf.convert_to_tensor(v), q_rvs)) != 0]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_1022": {
                "variable": {
                    "value": "p_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(p_log_prob - relbo_reg * q_log_prob - reg_penalty - relbo_reg_log_prob)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_lik - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_prob + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(losses) - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_lik) - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_prob) + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - relbo_reg * tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()) - relbo_reg_log_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "p_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in var_list if v not in q_vars]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if v not in q_vars]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if v not in q_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_1070": {
                "variable": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1071": {
                "variable": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1073": {
                "variable": {
                    "value": "q_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[tf.reduce_sum(qz.entropy()) for (z, qz) in six.iteritems(inference.latent_vars)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_1077": {
                "variable": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "gradients_1094": {
                "variable": {
                    "value": "q_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-(tf.reduce_mean(q_log_prob * tf.stop_gradient(p_log_prob)) + q_entropy - reg_penalty)",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "q_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in var_list if len(get_descendants(tf.convert_to_tensor(v), q_rvs)) != 0]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if len(get_descendants(tf.convert_to_tensor(v), q_rvs)) != 0]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if len(get_descendants(tf.convert_to_tensor(v), q_rvs)) != 0]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_1099": {
                "variable": {
                    "value": "p_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(p_log_prob - relbo_reg * q_log_prob - reg_penalty - relbo_reg_log_prob)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_lik - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_prob + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(losses) - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_lik) - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_prob) + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - relbo_reg * tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()) - relbo_reg_log_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "p_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in var_list if v not in q_vars]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if v not in q_vars]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if v not in q_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "gradients_1194": {
                "variable": {
                    "value": "model_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(p_log_prob - relbo_reg * q_log_prob - reg_penalty - relbo_reg_log_prob)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_lik - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_prob + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(losses) - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_lik) - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_prob) + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - relbo_reg * tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()) - relbo_reg_log_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in var_list if v not in grads_vars]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if v not in grads_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "reduce_mean_1291": {
                "variable": {
                    "value": "relbo_reg_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "relbo_reg_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(relbo_reg_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(relbo_reg_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_1311": {
                "variable": {
                    "value": "model_grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-(p_log_prob - relbo_reg * q_log_prob - reg_penalty - relbo_reg_log_prob)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_lik - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(p_log_prob + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(losses) - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_lik) - kl_penalty - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean(p_log_prob) + q_entropy - reg_penalty)",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()))",
                            "UnaryOp"
                        ],
                        [
                            "-(tf.reduce_mean([tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]) - relbo_reg * tf.reduce_mean([tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]) - tf.reduce_sum(tf.losses.get_regularization_losses()) - relbo_reg_log_prob)",
                            "UnaryOp"
                        ]
                    ]
                },
                "xs": {
                    "value": "model_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[v for v in var_list if v not in grads_vars]",
                            "ListComp"
                        ],
                        [
                            "[v for v in var_list if v not in grads_vars]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "stack_1177": {
                "variable": {
                    "value": "pi_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pi_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(pi_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(pi_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1178": {
                "variable": {
                    "value": "qi_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "qi_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(qi_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(qi_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_1179": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-tf.reduce_mean(qi_log_prob * tf.stop_gradient(pi_log_prob - qi_log_prob)) + tf.reduce_sum(tf.losses.get_regularization_losses())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                }
            },
            "stack_1281": {
                "variable": {
                    "value": "pi_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "pi_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(pi_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(pi_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_1282": {
                "variable": {
                    "value": "qi_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "qi_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(qi_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(qi_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_1283": {
                "variable": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "-tf.reduce_mean(qi_log_prob * tf.stop_gradient(pi_log_prob - qi_log_prob)) + tf.reduce_sum(tf.losses.get_regularization_losses())",
                    "type": "BinOp",
                    "possible_values": []
                },
                "xs": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                }
            },
            "get_default_graph_679": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_regularization_losses_724": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_728": {
                "name": {
                    "value": "loss/p_log_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_730": {
                "name": {
                    "value": "loss/q_log_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_732": {
                "name": {
                    "value": "loss/reg_penalty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_771": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_regularization_losses_802": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_805": {
                "name": {
                    "value": "loss/p_log_lik",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "p_log_lik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_lik)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_lik)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_807": {
                "name": {
                    "value": "loss/kl_penalty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "kl_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum([tf.reduce_sum(inference.kl_scaling.get(z, 1.0) * kl_divergence(qz, z)) for (z, qz) in six.iteritems(inference.latent_vars)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum([tf.reduce_sum(inference.kl_scaling.get(z, 1.0) * kl_divergence(qz, z)) for (z, qz) in six.iteritems(inference.latent_vars)])",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_809": {
                "name": {
                    "value": "loss/reg_penalty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_834": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_regularization_losses_870": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_873": {
                "name": {
                    "value": "loss/p_log_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_875": {
                "name": {
                    "value": "loss/q_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "q_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum([tf.reduce_sum(qz.entropy()) for (z, qz) in six.iteritems(inference.latent_vars)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum([tf.reduce_sum(qz.entropy()) for (z, qz) in six.iteritems(inference.latent_vars)])",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_877": {
                "name": {
                    "value": "loss/reg_penalty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_896": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_regularization_losses_931": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_934": {
                "name": {
                    "value": "loss/p_log_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(p_log_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_936": {
                "name": {
                    "value": "loss/q_log_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(q_log_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_938": {
                "name": {
                    "value": "loss/reg_penalty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_967": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_regularization_losses_1002": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_1005": {
                "name": {
                    "value": "loss/p_log_lik",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(p_log_lik)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1007": {
                "name": {
                    "value": "loss/kl_penalty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "kl_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum([tf.reduce_sum(inference.kl_scaling.get(z, 1.0) * kl_divergence(qz, z)) for (z, qz) in six.iteritems(inference.latent_vars)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum([tf.reduce_sum(inference.kl_scaling.get(z, 1.0) * kl_divergence(qz, z)) for (z, qz) in six.iteritems(inference.latent_vars)])",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1009": {
                "name": {
                    "value": "loss/reg_penalty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_1037": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_regularization_losses_1077": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "scalar_1080": {
                "name": {
                    "value": "loss/p_log_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(p_log_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1082": {
                "name": {
                    "value": "loss/q_log_prob",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(q_log_prob)",
                    "type": "Call",
                    "possible_values": []
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1084": {
                "name": {
                    "value": "loss/q_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "q_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum([tf.reduce_sum(qz.entropy()) for (z, qz) in six.iteritems(inference.latent_vars)])",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum([tf.reduce_sum(qz.entropy()) for (z, qz) in six.iteritems(inference.latent_vars)])",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "scalar_1086": {
                "name": {
                    "value": "loss/reg_penalty",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "reg_penalty",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(tf.losses.get_regularization_losses())",
                            "Call"
                        ]
                    ]
                },
                "collections": {
                    "value": "[inference._summary_key]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_1116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_1134": {
                "variable": {
                    "value": "q_log_probs[s][qz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qz_copy.log_prob(tf.stop_gradient(dict_swap[z]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1140": {
                "variable": {
                    "value": "p_log_probs[s][z]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * z_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1174": {
                "variable": {
                    "value": "pi_log_prob[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[p_log_probs[s][rv] for rv in var_p_rvs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_1175": {
                "variable": {
                    "value": "qi_log_prob[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[q_log_probs[s][rv] for rv in var_q_rvs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_default_graph_1213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_1231": {
                "variable": {
                    "value": "q_log_probs[s][qz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qz_copy.log_prob(tf.stop_gradient(dict_swap[z]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1237": {
                "variable": {
                    "value": "p_log_probs[s][z]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * z_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1278": {
                "variable": {
                    "value": "pi_log_prob[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[p_log_probs[s][rv] for rv in var_p_rvs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_sum_1279": {
                "variable": {
                    "value": "qi_log_prob[s]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "[q_log_probs[s][rv] for rv in var_q_rvs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_default_graph_683": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_697": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qz_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_703": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * z_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_717": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qt_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_775": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_799": {
                "input_tensor": {
                    "value": "inference.kl_scaling.get(z, 1.0) * kl_divergence(qz, z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_default_graph_838": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_855": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * z_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_867": {
                "input_tensor": {
                    "value": "qz.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_900": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_914": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qz_copy.log_prob(tf.stop_gradient(dict_swap[z]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_920": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * z_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_934": {
                "input_tensor": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_936": {
                "input_tensor": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_942": {
                "input_tensor": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_log_prob - q_log_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "get_default_graph_971": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_985": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qz_copy.log_prob(tf.stop_gradient(dict_swap[z]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_999": {
                "input_tensor": {
                    "value": "inference.kl_scaling.get(z, 1.0) * kl_divergence(qz, z)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1005": {
                "input_tensor": {
                    "value": "p_log_lik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_lik)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_lik)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_1041": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_1055": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qz_copy.log_prob(tf.stop_gradient(dict_swap[z]))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1061": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * z_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1074": {
                "input_tensor": {
                    "value": "qz.entropy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1080": {
                "input_tensor": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_1082": {
                "input_tensor": {
                    "value": "q_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(q_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_default_graph_1120": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_1146": {
                "variable": {
                    "value": "p_log_probs[s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inference.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1158": {
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_1192": {
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_1217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_1243": {
                "variable": {
                    "value": "p_log_probs[s][x]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "inference.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1250": {
                "input_tensor": {
                    "value": "inference.scale.get(z, 1.0) * qt_copy.log_prob(dict_swap[z])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1262": {
                "value": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                }
            },
            "variable_scope_79": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "posterior",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_89": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_90": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.Variable(tf.random_normal(batch_event_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "posterior",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_223": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_224": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.Variable(tf.random_normal(batch_event_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_276": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "posterior",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_286": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_287": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.Variable(tf.random_normal(batch_event_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_353": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "posterior",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_363": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_364": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.Variable(tf.random_normal(batch_event_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_417": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "posterior",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_427": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_428": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.Variable(tf.random_normal(batch_event_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_480": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "posterior",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_490": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_491": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.Variable(tf.random_normal(batch_event_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_556": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "posterior",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_566": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_567": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.Variable(tf.random_normal(batch_event_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_626": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "posterior",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_636": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_637": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.Variable(tf.random_normal(batch_event_shape))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_710": {
                "input_tensor": {
                    "value": "inference.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_793": {
                "input_tensor": {
                    "value": "inference.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_861": {
                "input_tensor": {
                    "value": "inference.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_926": {
                "input_tensor": {
                    "value": "inference.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_948": {
                "input_tensor": {
                    "value": "q_log_prob * tf.stop_gradient(losses)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_992": {
                "input_tensor": {
                    "value": "inference.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1012": {
                "input_tensor": {
                    "value": "p_log_lik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_lik)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_lik)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1067": {
                "input_tensor": {
                    "value": "inference.scale.get(x, 1.0) * x_copy.log_prob(dict_swap[x])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1089": {
                "input_tensor": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_1182": {
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_1188": {
                "input_tensor": {
                    "value": "[tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "reduce_mean_1190": {
                "input_tensor": {
                    "value": "[tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_regularization_losses_1192": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_1286": {
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1307": {
                "input_tensor": {
                    "value": "tf.losses.get_regularization_losses()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "kl_divergence_799": {
                "y_true": {
                    "value": "qz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descendants",
                            "variable"
                        ],
                        [
                            "descendants",
                            "variable"
                        ],
                        [
                            "descendants",
                            "variable"
                        ],
                        [
                            "descendants",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "reverse_latent_vars[qz]",
                            "Subscript"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "reverse_latent_vars[qz]",
                            "Subscript"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "kl_divergence_999": {
                "y_true": {
                    "value": "qz",
                    "type": "variable",
                    "possible_values": [
                        [
                            "descendants",
                            "variable"
                        ],
                        [
                            "descendants",
                            "variable"
                        ],
                        [
                            "descendants",
                            "variable"
                        ],
                        [
                            "descendants",
                            "variable"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "reverse_latent_vars[qz]",
                            "Subscript"
                        ],
                        [
                            "six.iterkeys(inference.latent_vars)",
                            "Call"
                        ],
                        [
                            "reverse_latent_vars[qz]",
                            "Subscript"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ],
                        [
                            "latent_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_mean_1018": {
                "input_tensor": {
                    "value": "q_log_prob * tf.stop_gradient(p_log_lik)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1095": {
                "input_tensor": {
                    "value": "q_log_prob * tf.stop_gradient(p_log_prob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_1180": {
                "input_tensor": {
                    "value": "qi_log_prob * tf.stop_gradient(pi_log_prob - qi_log_prob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_regularization_losses_1182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_1284": {
                "input_tensor": {
                    "value": "qi_log_prob * tf.stop_gradient(pi_log_prob - qi_log_prob)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_regularization_losses_1286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_mean_1303": {
                "input_tensor": {
                    "value": "[tf.reduce_sum(list(six.itervalues(p_log_prob))) for p_log_prob in p_log_probs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "get_regularization_losses_1307": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Variable_91": {
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_225": {
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_288": {
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_365": {
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_429": {
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_492": {
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_568": {
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_638": {
                "initial_value": {
                    "value": "tf.random_normal(batch_event_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_916": {
                "input": {
                    "value": "dict_swap[z]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_946": {
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_948": {
                "input": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p_log_prob - q_log_prob",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stop_gradient_987": {
                "input": {
                    "value": "dict_swap[z]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1016": {
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_1057": {
                "input": {
                    "value": "dict_swap[z]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_1093": {
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "stop_gradient_1136": {
                "input": {
                    "value": "dict_swap[z]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_1188": {
                "input_tensor": {
                    "value": "list(six.itervalues(p_log_prob))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1190": {
                "input_tensor": {
                    "value": "list(six.itervalues(q_log_prob))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stop_gradient_1233": {
                "input": {
                    "value": "dict_swap[z]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_1305": {
                "input_tensor": {
                    "value": "[tf.reduce_sum(list(six.itervalues(q_log_prob))) for q_log_prob in q_log_probs]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stop_gradient_1018": {
                "input": {
                    "value": "p_log_lik",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_lik)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_lik)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1095": {
                "input": {
                    "value": "p_log_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.reduce_mean(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ],
                        [
                            "[0.0] * inference.n_samples",
                            "BinOp"
                        ],
                        [
                            "tf.stack(p_log_prob)",
                            "Call"
                        ]
                    ]
                }
            },
            "stop_gradient_1181": {
                "input": {
                    "value": "pi_log_prob - qi_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stop_gradient_1285": {
                "input": {
                    "value": "pi_log_prob - qi_log_prob",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_1303": {
                "input_tensor": {
                    "value": "list(six.itervalues(p_log_prob))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_1305": {
                "input_tensor": {
                    "value": "list(six.itervalues(q_log_prob))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/core/utils.py": {
        "tensorflow": {
            "Dimension_68": {
                "variable": {
                    "value": "blocked_rows",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dimension_69": {
                "variable": {
                    "value": "blocked_cols",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_70": {
                "variable": {
                    "value": "batch_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "add_n_80": {
                "variable": {
                    "value": "ret_columns",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "ret_columns_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "concat_94": {
                "variable": {
                    "value": "blocked",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "row_blocks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_78": {
                "variable": {
                    "value": "matrix_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ]
                    ]
                }
            },
            "shape_84": {
                "variable": {
                    "value": "matrix_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ]
                    ]
                }
            },
            "reduce_sum_46": {
                "input_tensor": {
                    "value": "qt.log_prob(s_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_67": {
                "value": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_44": {
                "input_tensor": {
                    "value": "p.log_prob(s_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_88": {
                "tensor": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ]
                    ]
                },
                "paddings": {
                    "value": "tf.concat([tf.zeros([tf.rank(matrix) - 1, 2], dtype=tf.int32), [(row_before_length, row_after_length)]], axis=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_45": {
                "input_tensor": {
                    "value": "s.log_prob(s_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_90": {
                "values": {
                    "value": "[tf.zeros([tf.rank(matrix) - 1, 2], dtype=tf.int32), [(row_before_length, row_after_length)]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "shape": {
                    "value": "[tf.rank(matrix) - 1, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rank_91": {
                "input": {
                    "value": "matrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ],
                        [
                            "matrices",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "boosting_bbvi/plots/plot_residual.py": {
        "tensorflow": {
            "Session_69": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_46": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qt_deserialized['weights'].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_56": {
                "value": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qt_deserialized['pi'].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_57": {
                "value": {
                    "value": "mus[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_58": {
                "value": {
                    "value": "stds[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/plots/plot_single_mixture.py": {
        "tensorflow": {
            "Session_103": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_106": {
                "variable": {
                    "value": "xprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "xprobs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x.log_prob(grid)",
                            "Call"
                        ],
                        [
                            "tf.exp(xprobs).eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_115": {
                "variable": {
                    "value": "qtprobs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "qt.log_prob(grid)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "convert_to_tensor_66": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs['weights']",
                            "Subscript"
                        ],
                        [
                            "qt_deserialized['weights'].astype(np.float32)",
                            "Call"
                        ],
                        [
                            "qt.cat.probs.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_76": {
                "value": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "qt_deserialized['pi'].astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_77": {
                "value": {
                    "value": "mus[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_78": {
                "value": {
                    "value": "stds[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/scripts/matrix_factorization.py": {
        "tensorflow": {
            "Graph_107": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_154": {
                "main": {
                    "value": "main",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "InteractiveSession_110": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_53": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[(1.0 - gamma) * w for w in weights]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "set_random_seed_109": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_113": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[N, M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "scale_uv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.ones([FLAGS.D, N]), tf.ones([FLAGS.D, M])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_116": {
                "variable": {
                    "value": "mean_uv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.zeros([FLAGS.D, N]), tf.zeros([FLAGS.D, M])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_120": {
                "variable": {
                    "value": "mean_quv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.get_variable('qU/loc', [FLAGS.D, N]), tf.get_variable('qV/loc', [FLAGS.D, M])]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "scale_quv",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.nn.softplus(tf.get_variable('qU/scale', [FLAGS.D, N])), tf.nn.softplus(tf.get_variable('qV/scale', [FLAGS.D, M]))]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_54": {
                "value": {
                    "value": "c['scale']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_115": {
                "shape": {
                    "value": "[FLAGS.D, M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_116": {
                "shape": {
                    "value": "[FLAGS.D, M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_119": {
                "shape": {
                    "value": "[N, M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_120": {
                "name": {
                    "value": "qV/loc",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.D, M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "softplus_122": {
                "features": {
                    "value": "tf.get_variable('qU/scale', [FLAGS.D, N])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_123": {
                "features": {
                    "value": "tf.get_variable('qV/scale', [FLAGS.D, M])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_139": {
                "a": {
                    "value": "tf.transpose(qUV_new[:, :N])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "qUV_new[:, N:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_139": {
                "shape": {
                    "value": "[N, M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_119": {
                "a": {
                    "value": "tf.transpose(UV[:, :N])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "UV[:, N:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_122": {
                "name": {
                    "value": "qU/scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.D, N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_123": {
                "name": {
                    "value": "qV/scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[FLAGS.D, M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_139": {
                "a": {
                    "value": "qUV_new[:, :N]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_119": {
                "a": {
                    "value": "UV[:, :N]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/scripts/mixture_model_elbo.py": {
        "tensorflow": {
            "get_variable_65": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_loc%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims) + np.random.normal()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_67": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_scale%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_68": {
                "features": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name + '_scale%d' % iter, initializer=tf.random_normal(dims))",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_81": {
                "value": {
                    "value": "mus[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_82": {
                "value": {
                    "value": "stds[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_83": {
                "value": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0.4, 0.6]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[0.4, 0.6]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[1.0 / 3, 1.0 / 4, 1.0 / 4, 1.0 / 6]]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "boosting_bbvi/scripts/mixture_model_relbo.py": {
        "tensorflow": {
            "get_variable_77": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_loc%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_79": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.get_variable(name + '_scale%d' % iter, initializer=tf.random_normal(dims))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_84": {
                "variable": {
                    "value": "loc",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_loc%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims) + np.random.normal()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "get_variable_86": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_scale%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_181": {
                "variable": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(tf.stack(S), [n_comps, n_comps, n_samples])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_244": {
                "variable": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "run_344": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_79": {
                "name": {
                    "value": "name + '_scale%d' % iter",
                    "type": "BinOp",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.random_normal(dims)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "squeeze_178": {
                "variable": {
                    "value": "comp_log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "comps[i].log_prob(samples[j])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_181": {
                "tensor": {
                    "value": "tf.stack(S)",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[n_comps, n_comps, n_samples]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_184": {
                "input": {
                    "value": "p.log_prob(i)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "InteractiveSession_247": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reset_default_graph_341": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_87": {
                "features": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softplus(tf.get_variable(name + '_scale%d' % iter, initializer=tf.random_normal(dims)))",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name + '_scale%d' % iter, initializer=tf.random_normal(dims))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_181": {
                "values": {
                    "value": "S",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.reshape(tf.stack(S), [n_comps, n_comps, n_samples]))",
                            "Call"
                        ],
                        [
                            "S.eval()",
                            "Call"
                        ]
                    ]
                }
            },
            "set_random_seed_246": {
                "seed": {
                    "value": "FLAGS.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_112": {
                "value": {
                    "value": "locs[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_113": {
                "value": {
                    "value": "diags[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_115": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weights]",
                            "List"
                        ],
                        [
                            "np.random.random(n_comps).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "weights + 2.0 / (t + 2.0) * (corner - weights)",
                            "BinOp"
                        ],
                        [
                            "utils.update_weights(weights, gamma, iter)",
                            "Call"
                        ],
                        [
                            "fully_corrective(q_latest, x)",
                            "Call"
                        ],
                        [
                            "list(weights)",
                            "Call"
                        ],
                        [
                            "np.array(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_264": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_250": {
                "value": {
                    "value": "mus[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_251": {
                "value": {
                    "value": "stds[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_252": {
                "value": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[0.4, 0.6]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[0.5, 0.5]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[0.4, 0.6]]).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "np.array([[1.0 / 3, 1.0 / 4, 1.0 / 4, 1.0 / 6]]).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_299": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weights]",
                            "List"
                        ],
                        [
                            "np.random.random(n_comps).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "weights + 2.0 / (t + 2.0) * (corner - weights)",
                            "BinOp"
                        ],
                        [
                            "utils.update_weights(weights, gamma, iter)",
                            "Call"
                        ],
                        [
                            "fully_corrective(q_latest, x)",
                            "Call"
                        ],
                        [
                            "list(weights)",
                            "Call"
                        ],
                        [
                            "np.array(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_315": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weights]",
                            "List"
                        ],
                        [
                            "np.random.random(n_comps).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "weights + 2.0 / (t + 2.0) * (corner - weights)",
                            "BinOp"
                        ],
                        [
                            "utils.update_weights(weights, gamma, iter)",
                            "Call"
                        ],
                        [
                            "fully_corrective(q_latest, x)",
                            "Call"
                        ],
                        [
                            "list(weights)",
                            "Call"
                        ],
                        [
                            "np.array(weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "convert_to_tensor_256": {
                "value": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[weights]",
                            "List"
                        ],
                        [
                            "np.random.random(n_comps).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "weights + 2.0 / (t + 2.0) * (corner - weights)",
                            "BinOp"
                        ],
                        [
                            "utils.update_weights(weights, gamma, iter)",
                            "Call"
                        ],
                        [
                            "fully_corrective(q_latest, x)",
                            "Call"
                        ],
                        [
                            "list(weights)",
                            "Call"
                        ],
                        [
                            "np.array(weights)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "boosting_bbvi/tests/mvn_test.py": {
        "tensorflow": {
            "InteractiveSession_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_19": {
                "input_tensor": {
                    "value": "B.log_prob(M)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "boosting_bbvi/tests/test_fully_corrective.py": {
        "tensorflow": {
            "InteractiveSession_30": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_12": {
                "value": {
                    "value": "mixture_model_relbo.mus[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_13": {
                "value": {
                    "value": "mixture_model_relbo.stds[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_16": {
                "value": {
                    "value": "mixture_model_relbo.mus[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_17": {
                "value": {
                    "value": "mixture_model_relbo.stds[i]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "convert_to_tensor_14": {
                "value": {
                    "value": "mixture_model_relbo.pi",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    }
}