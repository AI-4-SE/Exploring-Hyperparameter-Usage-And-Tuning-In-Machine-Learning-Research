{
    "nn/retrieval_evaluation.py": {
        "sklearn": {
            "NearestNeighbors_14": {
                "variable": {
                    "value": "self.nn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_neighbors": {
                    "value": "database_vectors.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "algorithm": {
                    "value": "brute",
                    "type": "str",
                    "possible_values": []
                },
                "metric": {
                    "value": "metric",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'cosine'",
                            "Method Argument"
                        ],
                        [
                            "'cosine'",
                            "Method Argument"
                        ],
                        [
                            "'cosine'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "cifar10/exp0_train_base.py": {
        "torch": {
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_20": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/exp1_train_aux.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "cifar10/exp2_proposed.py": {
        "torch": {
            "manual_seed_11": {
                "seed": {
                    "value": "12345",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "loaders/cifar_dataset.py": {
        "torch": {
            "DataLoader_28": {
                "variable": {
                    "value": "train_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.CIFAR10(data_path, train=True, transform=train_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_30": {
                "variable": {
                    "value": "test_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.CIFAR10(data_path, train=False, transform=test_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_32": {
                "variable": {
                    "value": "train_loader_original",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_data_original",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dset.CIFAR10(data_path, train=True, transform=test_transform, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar_tiny.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.conv1_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.conv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.conv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_bn(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_25": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_27": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_bn(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_28": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_30": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_bn(self.conv3(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_31": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_34": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_44": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_bn(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_54": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_bn(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_55": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_64": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_bn(self.conv3(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/cifar_very_tiny.py": {
        "torch": {
            "Conv2d_10": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_11": {
                "variable": {
                    "value": "self.conv1_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "variable": {
                    "value": "self.conv2_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_16": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_17": {
                "variable": {
                    "value": "self.conv3_bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "32 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_20": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_26": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_bn(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_27": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_bn(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_33": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_bn(self.conv3(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_39": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_45": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_58": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1_bn(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_59": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_68": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2_bn(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_69": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_78": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3_bn(self.conv3(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_79": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv1_bn(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv2_bn(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "F.relu(self.conv3_bn(self.conv3(out)))",
                            "Call"
                        ],
                        [
                            "F.max_pool2d(out, 2)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "F.relu(self.fc1(out))",
                            "Call"
                        ],
                        [
                            "self.fc2(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_89": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc1(out)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "models/resnet.py": {
        "torch": {
            "Conv2d_19": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_30": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_32": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_40": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_43": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_53": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_78": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_93": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_94": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_97": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_107": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_108": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_109": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_110": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_111": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv2d_112": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_114": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "relu_121": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "BatchNorm2d_136": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_141": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * block.expansion",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "relu_152": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_157": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_166": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "avg_pool2d_195": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_34": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_60": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_87": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_planes, self.expansion * planes, kernel_size=1, stride=stride, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_149": {
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "avg_pool2d_171": {
                "variable": {
                    "value": "out_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_179": {
                "variable": {
                    "value": "out_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "avg_pool2d_187": {
                "variable": {
                    "value": "out_t",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.bn2(self.conv2(out))",
                            "Call"
                        ],
                        [
                            "out + shortcut",
                            "BinOp"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn2(self.conv2(out)))",
                            "Call"
                        ],
                        [
                            "self.bn3(self.conv3(out))",
                            "Call"
                        ],
                        [
                            "F.relu(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(x))",
                            "Call"
                        ],
                        [
                            "self.conv1(out)",
                            "Call"
                        ],
                        [
                            "self.conv2(F.relu(self.bn2(out)))",
                            "Call"
                        ],
                        [
                            "self.conv3(F.relu(self.bn3(out)))",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ],
                        [
                            "F.relu(self.bn1(self.conv1(x)))",
                            "Call"
                        ],
                        [
                            "self.layer1(out)",
                            "Call"
                        ],
                        [
                            "self.layer2(out)",
                            "Call"
                        ],
                        [
                            "self.layer3(out)",
                            "Call"
                        ],
                        [
                            "self.layer4(out)",
                            "Call"
                        ],
                        [
                            "F.avg_pool2d(out, 4)",
                            "Call"
                        ],
                        [
                            "out.view(out.size(0), -1)",
                            "Call"
                        ],
                        [
                            "self.linear(out)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_68": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_124": {
                "input": {
                    "value": "self.bn2(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_125": {
                "input": {
                    "value": "self.bn3(out)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_35": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_61": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_88": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_89": {
                "num_features": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_117": {
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.expansion * planes",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "variable"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "nn/nn_utils.py": {
        "torch": {
            "load_23": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "input_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model.state'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_13": {
                "obj": {
                    "value": "net.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'model.state'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "max_57": {
                "variable": {
                    "value": "(_, predicted)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.data",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nn/pkt_transfer.py": {
        "torch": {
            "sum_18": {
                "variable": {
                    "value": "aa",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_19": {
                "variable": {
                    "value": "bb",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "b ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mm_24": {
                "variable": {
                    "value": "AB",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "b.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clamp_27": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": [
                        [
                            "aa + bb - 2 * AB",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(dists, min=0, max=np.inf)",
                            "Call"
                        ],
                        [
                            "torch.sqrt(dists + eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "np.inf",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_28": {
                "variable": {
                    "value": "dists",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "dists + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_33": {
                "variable": {
                    "value": "features_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(features ** 2, dim=1, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mm_36": {
                "variable": {
                    "value": "similarities",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features / (features_norm + eps)",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "features.transpose(0, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_173": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(student.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_51": {
                "variable": {
                    "value": "teacher_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-teacher_d / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_90": {
                "variable": {
                    "value": "student_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-student_d / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_165": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher_s * torch.log(eps + teacher_s / (eps + student_s))",
                            "BinOp"
                        ],
                        [
                            "teacher_s * torch.log(eps + teacher_s / (eps + student_s))",
                            "BinOp"
                        ],
                        [
                            "torch.abs(teacher_s - student_s)",
                            "Call"
                        ],
                        [
                            "torch.mean(loss1) + torch.mean(loss2)",
                            "BinOp"
                        ],
                        [
                            "torch.mean(loss)",
                            "Call"
                        ],
                        [
                            "(teacher_s - student_s) ** 2",
                            "BinOp"
                        ],
                        [
                            "(teacher_s - student_s) * (torch.log(teacher_s) - torch.log(student_s))",
                            "BinOp"
                        ],
                        [
                            "teacher_s * (torch.log(teacher_s) - torch.log(student_s)) ** 2",
                            "BinOp"
                        ],
                        [
                            "(teacher_s - student_s) ** 2 / teacher_s",
                            "BinOp"
                        ],
                        [
                            "0",
                            "int"
                        ],
                        [
                            "loss + weight * prob_loss(teacher_f, student_f, kernel_parameters=kernel_parameters)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_33": {
                "input": {
                    "value": "features ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_54": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distances(teacher_features)",
                            "Call"
                        ],
                        [
                            "pairwise_distances(teacher_features)",
                            "Call"
                        ],
                        [
                            "pairwise_distances(teacher_features)",
                            "Call"
                        ],
                        [
                            "pairwise_distances(teacher_features)",
                            "Call"
                        ],
                        [
                            "pairwise_distances(teacher_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_55": {
                "variable": {
                    "value": "teacher_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-teacher_d / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_94": {
                "variable": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "student_d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pairwise_distances(student_features)",
                            "Call"
                        ],
                        [
                            "pairwise_distances(student_features)",
                            "Call"
                        ],
                        [
                            "pairwise_distances(student_features)",
                            "Call"
                        ],
                        [
                            "pairwise_distances(student_features)",
                            "Call"
                        ],
                        [
                            "pairwise_distances(student_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_95": {
                "variable": {
                    "value": "student_s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-student_d / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_129": {
                "input": {
                    "value": "teacher_s_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher_s_1 / torch.sum(teacher_s_1, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "cosine_pairwise_similarities(teacher_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_130": {
                "input": {
                    "value": "student_s_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "student_s_1 / torch.sum(student_s_1, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "cosine_pairwise_similarities(student_features)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_132": {
                "input": {
                    "value": "teacher_s_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "teacher_s_2 / torch.sum(teacher_s_2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + teacher_d ** d)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_133": {
                "input": {
                    "value": "student_s_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "student_s_2 / torch.sum(student_s_2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + student_d ** d)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_137": {
                "input": {
                    "value": "teacher_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-teacher_d / sigma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-teacher_d / sigma)",
                            "Call"
                        ],
                        [
                            "cosine_pairwise_similarities(teacher_features)",
                            "Call"
                        ],
                        [
                            "1.0 / (1 + teacher_d ** d)",
                            "BinOp"
                        ],
                        [
                            "teacher_s / torch.sum(teacher_s, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + teacher_d ** 2 / sigma ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_138": {
                "input": {
                    "value": "student_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-student_d / sigma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-student_d / sigma)",
                            "Call"
                        ],
                        [
                            "cosine_pairwise_similarities(student_features)",
                            "Call"
                        ],
                        [
                            "student_s / torch.sum(student_s, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + student_d ** d)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + student_d ** 2 / sigma ** 2)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "abs_144": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "teacher_s - student_s",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_160": {
                "input": {
                    "value": "eps + teacher_s / (eps + student_s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mean_163": {
                "input": {
                    "value": "loss2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(teacher_s_2 - student_s_2) * (torch.log(teacher_s_2) - torch.log(student_s_2))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_142": {
                "input": {
                    "value": "eps + teacher_s / (eps + student_s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_148": {
                "input": {
                    "value": "student_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-student_d / sigma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-student_d / sigma)",
                            "Call"
                        ],
                        [
                            "cosine_pairwise_similarities(student_features)",
                            "Call"
                        ],
                        [
                            "student_s / torch.sum(student_s, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + student_d ** d)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + student_d ** 2 / sigma ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_150": {
                "input": {
                    "value": "student_s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(-student_d / sigma)",
                            "Call"
                        ],
                        [
                            "torch.exp(-student_d / sigma)",
                            "Call"
                        ],
                        [
                            "cosine_pairwise_similarities(student_features)",
                            "Call"
                        ],
                        [
                            "student_s / torch.sum(student_s, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + student_d ** d)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + student_d ** 2 / sigma ** 2)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_155": {
                "input": {
                    "value": "student_s_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "student_s_1 / torch.sum(student_s_1, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "cosine_pairwise_similarities(student_features)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_156": {
                "input": {
                    "value": "student_s_2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "student_s_2 / torch.sum(student_s_2, dim=1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "1.0 / (1 + student_d ** d)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}