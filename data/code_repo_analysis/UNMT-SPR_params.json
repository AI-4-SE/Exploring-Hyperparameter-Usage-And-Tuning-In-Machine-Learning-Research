{
    "scripts/build_dic_from_emb_multichoice.py": {
        "sklearn": {}
    },
    "t2tlight/data/dataset.py": {
        "tensorflow": {
            "bucket_by_sequence_length_73": {
                "variable": {
                    "value": "(_, outputs)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "element_length_func": {
                    "value": "max_example_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.maximum(max_example_length, seq_length)",
                            "Call"
                        ]
                    ]
                },
                "bucket_boundaries": {
                    "value": "example",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example",
                            "Method Argument"
                        ]
                    ]
                },
                "bucket_batch_sizes": {
                    "value": "batch_sizes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[max(1, batch_size // length) for length in boundaries + [max_length]]",
                            "ListComp"
                        ],
                        [
                            "[b * shard_multiplier for b in batch_sizes]",
                            "ListComp"
                        ],
                        [
                            "batch_size * shard_multiplier",
                            "BinOp"
                        ]
                    ]
                },
                "padded_shapes": {
                    "value": "boundaries",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "get_boundaries(min_length, max_length)",
                            "Call"
                        ]
                    ]
                },
                "num_threads": {
                    "value": "num_threads",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                },
                "capacity": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dynamic_pad": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "keep_input": {
                    "value": "max_example_length < max_length",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "info_95": {
                "msg": {
                    "value": "'Loaded %s' % filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "TextLineDataset_108": {
                "variable": {
                    "value": "src_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "TextLineDataset_109": {
                "variable": {
                    "value": "tgt_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "filenames": {
                    "value": "filenames[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_170": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_171": {
                "variable": {
                    "value": "features[target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_172": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "to_int32_173": {
                "variable": {
                    "value": "features[target_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "features['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "squeeze_174": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_175": {
                "variable": {
                    "value": "features[target_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['target_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_50": {
                "name": {
                    "value": "batch_examples",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_107": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "GFile_203": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "device_228": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_284": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_71": {
                "variable": {
                    "value": "max_example_length",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "max_example_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "tf.maximum(max_example_length, seq_length)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(v)[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "constant_150": {
                "value": {
                    "value": "params.vocabulary['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_154": {
                "value": {
                    "value": "params.vocabulary['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_275": {
                "value": {
                    "value": "params.vocabulary['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_286": {
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[line.strip() for line in fd]",
                            "ListComp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_315": {
                "value": {
                    "value": "params.vocabulary['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "concat_295": {
                "values": {
                    "value": "[x, [tf.constant(params.eos)]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_70": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "example.values()",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_127": {
                "values": {
                    "value": "[src, [tf.constant(params.eos)]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_128": {
                "values": {
                    "value": "[tgt, [tf.constant(params.eos)]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_138": {
                "input": {
                    "value": "src",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "shape_139": {
                "input": {
                    "value": "tgt",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "concat_239": {
                "values": {
                    "value": "[x, [tf.constant(params.eos)]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dimension_259": {
                "value": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "string_split_290": {
                "source": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dimension_307": {
                "value": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "string_split_118": {
                "source": {
                    "value": "[src]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_split_119": {
                "source": {
                    "value": "[tgt]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "string_split_235": {
                "source": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_250": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Dimension_261": {
                "value": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "shape_301": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_length",
                            "variable"
                        ],
                        [
                            "x + inc",
                            "BinOp"
                        ]
                    ]
                }
            },
            "constant_295": {
                "value": {
                    "value": "params.eos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_127": {
                "value": {
                    "value": "params.eos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_128": {
                "value": {
                    "value": "params.eos",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_239": {
                "value": {
                    "value": "params.eos",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "t2tlight/models/beamsearch.py": {
        "tensorflow": {
            "map_structure_55": {
                "variable": {
                    "value": "flat_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: merge_first_two_dims(x)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "state.state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "map_structure_60": {
                "variable": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: split_first_two_dims(x, batch_size, beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "func(flat_seqs, flat_state)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda x: split_first_two_dims(x, batch_size, beam_size), next_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_66": {
                "variable": {
                    "value": "length_penalty",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.to_float(time + 1)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.decode_alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_72": {
                "variable": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_log_probs / length_penalty",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(curr_scores, [-1, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, beam_size * vocab_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "top_k_74": {
                "variable": {
                    "value": "(top_scores, top_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_log_probs / length_penalty",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(curr_scores, [-1, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * beam_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "candidate_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[candidate_seqs, tf.expand_dims(symbol_indices, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_86": {
                "variable": {
                    "value": "flags",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "symbol_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_indices % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "eos_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.eosId",
                            "Attribute"
                        ],
                        [
                            "eos_id",
                            "Method Argument"
                        ],
                        [
                            "eos_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "top_k_90": {
                "variable": {
                    "value": "(alive_scores, alive_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "alive_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_scores + tf.to_float(flags) * tf.float32.min",
                            "BinOp"
                        ],
                        [
                            "tf.nn.top_k(alive_scores, beam_size)",
                            "Call"
                        ],
                        [
                            "final_state.inputs[2]",
                            "Subscript"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.beam_size",
                            "Attribute"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_95": {
                "variable": {
                    "value": "alive_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[alive_seqs, tf.expand_dims(alive_symbols, 2)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "map_structure_96": {
                "variable": {
                    "value": "alive_state",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: gather_2d(x, alive_indices)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "next_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "func(flat_seqs, flat_state)",
                            "Call"
                        ],
                        [
                            "nest.map_structure(lambda x: split_first_two_dims(x, batch_size, beam_size), next_state)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_106": {
                "variable": {
                    "value": "fin_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_fin_flags, flags]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_107": {
                "variable": {
                    "value": "fin_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_fin_scores, step_fin_scores]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "top_k_109": {
                "variable": {
                    "value": "(fin_scores, fin_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "fin_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([prev_fin_scores, step_fin_scores], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.nn.top_k(fin_scores, beam_size)",
                            "Call"
                        ],
                        [
                            "tf.fill([batch_size, beam_size], tf.float32.min)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.beam_size",
                            "Attribute"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ],
                        [
                            "beam_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "fill_111": {
                "variable": {
                    "value": "pad_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.constant(eos_id, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_113": {
                "variable": {
                    "value": "prev_fin_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_fin_seqs, pad_seqs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_114": {
                "variable": {
                    "value": "fin_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prev_fin_seqs, candidate_seqs]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "fill_128": {
                "variable": {
                    "value": "init_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "bos_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.bosId",
                            "Attribute"
                        ],
                        [
                            "bos_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_129": {
                "variable": {
                    "value": "init_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[[0.0] + [tf.float32.min] * (beam_size - 1)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_130": {
                "variable": {
                    "value": "init_log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.0] + [tf.float32.min] * (beam_size - 1)])",
                            "Call"
                        ],
                        [
                            "tf.tile(init_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[batch_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_like_131": {
                "variable": {
                    "value": "init_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "init_log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant([[0.0] + [tf.float32.min] * (beam_size - 1)])",
                            "Call"
                        ],
                        [
                            "tf.tile(init_log_probs, [batch_size, 1])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_132": {
                "variable": {
                    "value": "fin_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "fill_133": {
                "variable": {
                    "value": "fin_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "dims": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.float32.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_134": {
                "variable": {
                    "value": "fin_flags",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[batch_size, beam_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_max_142": {
                "variable": {
                    "value": "max_step",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "max_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['source_length'] + decode_length",
                            "BinOp"
                        ],
                        [
                            "max_length",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_166": {
                "variable": {
                    "value": "time",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "time",
                    "type": "str",
                    "possible_values": []
                }
            },
            "while_loop_176": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "cond": {
                    "value": "_is_finished",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_is_finished",
                            "Call"
                        ]
                    ]
                },
                "body": {
                    "value": "_loop_fn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_loop_fn",
                            "Call"
                        ]
                    ]
                },
                "loop_vars": {
                    "value": "[time, state]",
                    "type": "List",
                    "possible_values": []
                },
                "shape_invariants": {
                    "value": "[tf.TensorShape([]), shape_invariants]",
                    "type": "List",
                    "possible_values": []
                },
                "parallel_iterations": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "back_prop": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "where_192": {
                "variable": {
                    "value": "final_seqs",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(final_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "final_seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_state.finish[1]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.reduce_any(final_flags, 1), final_seqs, alive_seqs)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_seqs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_2d(seqs, alive_indices)",
                            "Call"
                        ],
                        [
                            "tf.concat([alive_seqs, tf.expand_dims(alive_symbols, 2)], 2)",
                            "Call"
                        ],
                        [
                            "final_state.inputs[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "where_194": {
                "variable": {
                    "value": "final_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "tf.reduce_any(final_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "x": {
                    "value": "final_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_state.finish[2]",
                            "Subscript"
                        ],
                        [
                            "tf.where(tf.reduce_any(final_flags, 1), final_scores, alive_scores)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "alive_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_scores + tf.to_float(flags) * tf.float32.min",
                            "BinOp"
                        ],
                        [
                            "tf.nn.top_k(alive_scores, beam_size)",
                            "Call"
                        ],
                        [
                            "final_state.inputs[2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_232": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_233": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_234": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_237": {
                "variable": {
                    "value": "features[source]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0] * shape[1], shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_241": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_242": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, beam_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_244": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_249": {
                "variable": {
                    "value": "features[source_length]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensor": {
                    "value": "features['source_length']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[shape[0] * shape[1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "map_structure_252": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "func": {
                    "value": "lambda x: tile_to_beam_size(x, beam_size)",
                    "type": "Lambda",
                    "possible_values": []
                },
                "*structure": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "nest.map_structure(lambda x: tile_to_beam_size(x, beam_size), states)",
                            "Call"
                        ]
                    ]
                }
            },
            "pow_148": {
                "variable": {
                    "value": "max_lp",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "(5.0 + tf.to_float(max_step)) / 6.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.decode_alpha",
                            "Attribute"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ],
                        [
                            "alpha",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_150": {
                "variable": {
                    "value": "worst_finished_score",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "finished_scores * tf.to_float(finished_flags)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_all_154": {
                "variable": {
                    "value": "bound_is_met",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.greater(worst_finished_score, best_alive_score)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_157": {
                "variable": {
                    "value": "cond",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.less(t, max_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.logical_not(bound_is_met)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_63": {
                "input": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.inputs[1]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_112": {
                "value": {
                    "value": "eos_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params.eosId",
                            "Attribute"
                        ],
                        [
                            "eos_id",
                            "Method Argument"
                        ],
                        [
                            "eos_id",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_any_192": {
                "input_tensor": {
                    "value": "final_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_state.finish[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_any_194": {
                "input_tensor": {
                    "value": "final_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "final_state.finish[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "shape_226": {
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pad_26": {
                "tensor": {
                    "value": "inputs[:, 1:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "fill_27": {
                "dims": {
                    "value": "[tf.shape(inputs)[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.shape(inputs)[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "add_n_45": {
                "inputs": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.while_loop(_is_finished, _loop_fn, [time, state], shape_invariants=[tf.TensorShape([]), shape_invariants], parallel_iterations=1, back_prop=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_68": {
                "input": {
                    "value": "curr_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "curr_log_probs / length_penalty",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(curr_scores, [-1, beam_size * vocab_size])",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_82": {
                "input": {
                    "value": "symbol_indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_indices % vocab_size",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_88": {
                "x": {
                    "value": "flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(symbol_indices, eos_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_95": {
                "input": {
                    "value": "alive_symbols",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gather_2d(symbol_indices, alive_indices)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_152": {
                "x": {
                    "value": "tf.reduce_any(finished_flags, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "greater_154": {
                "x": {
                    "value": "worst_finished_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_min(finished_scores * tf.to_float(finished_flags), axis=1)",
                            "Call"
                        ],
                        [
                            "worst_finished_score + tf.float32.min * add_mask",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "best_alive_score",
                    "type": "variable",
                    "possible_values": [
                        [
                            "log_probs[:, 0] / max_lp",
                            "BinOp"
                        ]
                    ]
                }
            },
            "less_157": {
                "x": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "t",
                            "Method Argument"
                        ],
                        [
                            "t",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "max_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "logical_not_158": {
                "x": {
                    "value": "bound_is_met",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_all(tf.greater(worst_finished_score, best_alive_score))",
                            "Call"
                        ]
                    ]
                }
            },
            "map_structure_171": {
                "func": {
                    "value": "infer_shape_invariants",
                    "type": "variable",
                    "possible_values": []
                },
                "*structure": {
                    "value": "state.state",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "to_float_66": {
                "x": {
                    "value": "time + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_104": {
                "x": {
                    "value": "flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(symbol_indices, eos_id)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_float_151": {
                "x": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.finish[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_any_152": {
                "input_tensor": {
                    "value": "finished_flags",
                    "type": "variable",
                    "possible_values": [
                        [
                            "s.finish[0]",
                            "Subscript"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_168": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_169": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_170": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_172": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_173": {
                "dims": {
                    "value": "[None, None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_174": {
                "dims": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "TensorShape_177": {
                "dims": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_28": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_148": {
                "x": {
                    "value": "max_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(max_length)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_27": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "t2tlight/models/transformer.py": {
        "tensorflow": {
            "sequence_mask_182": {
                "variable": {
                    "value": "src_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['source_length']",
                            "Subscript"
                        ],
                        [
                            "features['source_length']",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(features['source'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_188": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "params.hidden_size ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sequence_mask_242": {
                "variable": {
                    "value": "src_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "src_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['source_length']",
                            "Subscript"
                        ],
                        [
                            "features['source_length']",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(features['source'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sequence_mask_245": {
                "variable": {
                    "value": "tgt_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "lengths": {
                    "value": "tgt_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['target_length']",
                            "Subscript"
                        ]
                    ]
                },
                "maxlen": {
                    "value": "tf.shape(features['target'])[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_normal_initializer_252": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "params.hidden_size ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_326": {
                "variable": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer_decoder(decoder_input, encoder_output, dec_attn_bias, enc_attn_bias, params)",
                            "Call"
                        ],
                        [
                            "decoder_output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(decoder_output, [-1, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_327": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer_decoder(decoder_input, encoder_output, dec_attn_bias, enc_attn_bias, params)",
                            "Call"
                        ],
                        [
                            "decoder_output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(decoder_output, [-1, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_weights', [tgt_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('shared_embedding', [tgt_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('target_embedding', [tgt_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_338": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smoothed_softmax_cross_entropy(logits, labels, params.label_smoothing, True)",
                            "Call"
                        ],
                        [
                            "tf.reshape(ce, tf.shape(tgt_seq))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "tf.shape(tgt_seq)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_initializer_190": {
                "variable": {
                    "value": "src_emb_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "features['src_embs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "bias_add_218": {
                "variable": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(src_embedding, src_seq) * hidden_size ** 0.5",
                            "BinOp"
                        ],
                        [
                            "inputs * tf.expand_dims(src_mask, -1)",
                            "BinOp"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "bias": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('src_language_bias', [hidden_size])",
                            "Call"
                        ],
                        [
                            "tf.get_variable('src_language_bias', [hidden_size])",
                            "Call"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ],
                        [
                            "bias",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_225": {
                "variable": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "encoder_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(inputs, bias)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "variable"
                        ],
                        [
                            "add_timing_signal(encoder_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(encoder_input, 1 - params.residual_dropout)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - params.residual_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_initializer_255": {
                "variable": {
                    "value": "trg_emb_initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "features['trg_embs']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "get_variable_287": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "softmax_weights",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dropout_303": {
                "variable": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "decoder_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(targets, [[0, 0], [1, 0], [0, 0]])[:, :-1, :]",
                            "Subscript"
                        ],
                        [
                            "add_timing_signal(decoder_input)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(decoder_input, 1.0 - params.residual_dropout)",
                            "Call"
                        ],
                        [
                            "decoder_input[:, -1:, :]",
                            "Subscript"
                        ]
                    ]
                },
                "rate": {
                    "value": "1.0 - params.residual_dropout",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_320": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "decoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer_decoder(decoder_input, encoder_output, dec_attn_bias, enc_attn_bias, params)",
                            "Call"
                        ],
                        [
                            "decoder_output[:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "tf.reshape(decoder_output, [-1, hidden_size])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('softmax_weights', [tgt_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('shared_embedding', [tgt_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('target_embedding', [tgt_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_softmax_321": {
                "variable": {
                    "value": "log_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(decoder_output, weights, False, True)",
                            "Call"
                        ],
                        [
                            "tf.matmul(decoder_output, weights, False, True)",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_25": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "attention_bias",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "ffn_layer",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_70": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(inputs, hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden, 1 - dropout_rate)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_73": {
                "variable": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "hidden",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(inputs, hidden_size)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(hidden)",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(hidden, 1 - dropout_rate)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "encoder",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_114": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "decoder",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[inputs, memory, bias, mem_bias]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_192": {
                "variable": {
                    "value": "src_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "shared_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "src_emb_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(features['src_embs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_195": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "src_language_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_197": {
                "variable": {
                    "value": "src_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "source_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "src_emb_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(features['src_embs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_202": {
                "variable": {
                    "value": "src_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "shared_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_205": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "src_language_bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_207": {
                "variable": {
                    "value": "src_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "source_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[src_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_213": {
                "params": {
                    "value": "src_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('shared_embedding', [src_vocab_size, hidden_size], initializer=src_emb_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('source_embedding', [src_vocab_size, hidden_size], initializer=src_emb_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('shared_embedding', [src_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('source_embedding', [src_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "src_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['source']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_214": {
                "input": {
                    "value": "src_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(src_len, maxlen=tf.shape(features['source'])[1], dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.sequence_mask(src_len, maxlen=tf.shape(features['source'])[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "get_variable_262": {
                "variable": {
                    "value": "tgt_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "target_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "trg_emb_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(features['trg_embs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_272": {
                "variable": {
                    "value": "tgt_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "target_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "gather_292": {
                "params": {
                    "value": "tgt_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('target_embedding', [tgt_vocab_size, hidden_size], initializer=trg_emb_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('target_embedding', [tgt_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('shared_embedding', [tgt_vocab_size, hidden_size], initializer=trg_emb_initializer)",
                            "Call"
                        ],
                        [
                            "tf.get_variable('shared_embedding', [tgt_vocab_size, hidden_size], initializer=initializer)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tgt_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "expand_dims_293": {
                "input": {
                    "value": "tgt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tgt_len, maxlen=tf.shape(features['target'])[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_299": {
                "tensor": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tgt_embedding, tgt_seq) * hidden_size ** 0.5",
                            "BinOp"
                        ],
                        [
                            "targets * tf.expand_dims(tgt_mask, -1)",
                            "BinOp"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_338": {
                "input": {
                    "value": "tgt_seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features['target']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "reduce_sum_343": {
                "input_tensor": {
                    "value": "tgt_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.sequence_mask(tgt_len, maxlen=tf.shape(features['target'])[1], dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_32": {
                "tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inf * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "(1.0 - mask) * inf",
                            "BinOp"
                        ],
                        [
                            "inf * (1.0 - lower_triangle + mask_triangle)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "input_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_75": {
                "name_or_scope": {
                    "value": "output_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_258": {
                "variable": {
                    "value": "tgt_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "shared_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "trg_emb_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(features['trg_embs'])",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_268": {
                "variable": {
                    "value": "tgt_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "shared_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_277": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_279": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "shared_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_283": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "target_embedding",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[tgt_vocab_size, hidden_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_297": {
                "input": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(tgt_embedding, tgt_seq) * hidden_size ** 0.5",
                            "BinOp"
                        ],
                        [
                            "targets * tf.expand_dims(tgt_mask, -1)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reduce_sum_341": {
                "input_tensor": {
                    "value": "ce * tgt_mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_29": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_36": {
                "input": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inf * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "(1.0 - mask) * inf",
                            "BinOp"
                        ],
                        [
                            "inf * (1.0 - lower_triangle + mask_triangle)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_39": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_41": {
                "input": {
                    "value": "-tf.log(1 + tf.abs(diff))",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_85": {
                "name_or_scope": {
                    "value": "'layer_%d' % layer",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_120": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'layer_%d' % layer",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_183": {
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_243": {
                "input": {
                    "value": "features['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_246": {
                "input": {
                    "value": "features['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_257": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_267": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "get_variable_scope_277": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_369": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "tf.random_normal_initializer(0.0, params.hidden_size ** (-0.5))",
                            "Call"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_383": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_397": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_419": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "where_45": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "distance > length",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "y": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(distance > length, 0, distance)",
                            "Call"
                        ],
                        [
                            "tf.cast(distance, tf.int64)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_46": {
                "variable": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "distance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.where(distance > length, 0, distance)",
                            "Call"
                        ],
                        [
                            "tf.cast(distance, tf.int64)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_100": {
                "name_or_scope": {
                    "value": "feed_forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_123": {
                "name_or_scope": {
                    "value": "self_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_142": {
                "name_or_scope": {
                    "value": "encdec_attention",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_156": {
                "name_or_scope": {
                    "value": "feed_forward",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_scope_257": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "get_variable_scope_267": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "shape_399": {
                "input": {
                    "value": "encoder_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "transformer_encoder(encoder_input, enc_attn_bias, params)",
                            "Call"
                        ],
                        [
                            "state['encoder']",
                            "Subscript"
                        ],
                        [
                            "encoding_graph(features, mode, params)",
                            "Call"
                        ],
                        [
                            "encoding_graph(features, 'infer', params)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_40": {
                "input": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.to_float(tf.range(length))",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "tensor": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inf * (1.0 - lower_triangle)",
                            "BinOp"
                        ],
                        [
                            "(1.0 - mask) * inf",
                            "BinOp"
                        ],
                        [
                            "inf * (1.0 - lower_triangle + mask_triangle)",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, 1, length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_48": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_405": {
                "shape": {
                    "value": "[batch, 0, params.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_406": {
                "shape": {
                    "value": "[batch, 0, params.hidden_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_41": {
                "x": {
                    "value": "1 + tf.abs(diff)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_51": {
                "shape": {
                    "value": "[length, length]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "abs_41": {
                "x": {
                    "value": "diff",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(r, 0) - tf.expand_dims(r, 1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "t2tlight/score.py": {
        "tensorflow": {
            "OptimizerOptions_104": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "do_function_inlining": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GraphOptions_106": {
                "variable": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L1, do_function_inlining=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_107": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphOptions(optimizer_options=optimizer_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_225": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_245": {
                "variable": {
                    "value": "sess_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "session_config(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "list_variables_251": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_checkpoint_253": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "args.model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_264": {
                "variable": {
                    "value": "assign_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Exists_78": {
                "filename": {
                    "value": "m_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, model_name + '.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_82": {
                "msg": {
                    "value": "'Restoring model parameters from %s' % m_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GFile_134": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "value_dict",
                            "variable"
                        ],
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                }
            },
            "device_154": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_250": {
                "msg": {
                    "value": "'Loading %s' % args.model",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_203": {
                "value": {
                    "value": "params.vocabulary['source']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_207": {
                "value": {
                    "value": "params.vocabulary['target']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "trainable_variables_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MonitoredSession_268": {
                "session_creator": {
                    "value": "sess_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(config=session_config(params))",
                            "Call"
                        ]
                    ]
                }
            },
            "debug_123": {
                "msg": {
                    "value": "'restoring %s -> %s' % (name, var.name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_125": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "value_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "device_124": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_165": {
                "values": {
                    "value": "[x, [tf.constant(params.eos)]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dimension_186": {
                "value": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "Dimension_188": {
                "value": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "string_split_161": {
                "source": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_176": {
                "input": {
                    "value": "x[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_178": {
                "input": {
                    "value": "x[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_165": {
                "value": {
                    "value": "params.eos",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "t2tlight/train.py": {
        "tensorflow": {
            "OptimizerOptions_211": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "do_function_inlining": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GraphOptions_213": {
                "variable": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L1, do_function_inlining=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_214": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphOptions(optimizer_options=optimizer_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "list_variables_248": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "load_checkpoint_249": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trainable_variables_257": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_194": {
                "variable": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "to_float_195": {
                "variable": {
                    "value": "warmup_steps",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "params.warmup_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_247": {
                "msg": {
                    "value": "'Loading %s' % checkpoint",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "group_270": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                },
                "name": {
                    "value": "restore_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "set_verbosity_273": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_or_create_global_step_322": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_343": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_learning_rate_decay(params.learning_rate, global_step, params)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, tf.to_float(lr_min))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(learning_rate, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_374": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "save_vars if params.only_save_trainable else None",
                    "type": "IfExp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "params.keep_checkpoint_max",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sharded": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_111": {
                "msg": {
                    "value": "'Restoring hyper parameters from %s' % p_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_116": {
                "msg": {
                    "value": "'Restoring model parameters from %s' % m_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Exists_123": {
                "filename": {
                    "value": "output_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "MkDir_124": {
                "dirname": {
                    "value": "output_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dir",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_176": {
                "minval": {
                    "value": "-max_val",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.1 * params.initializer_gain",
                            "BinOp"
                        ]
                    ]
                }
            },
            "latest_checkpoint_243": {
                "checkpoint_dir": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "no_op_244": {
                "name": {
                    "value": "restore_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Graph_296": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "info_335": {
                "msg": {
                    "value": "Total trainable variables size: %d",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "total_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "int"
                        ],
                        [
                            "total_size + v_size",
                            "BinOp"
                        ]
                    ]
                }
            },
            "maximum_341": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_learning_rate_decay(params.learning_rate, global_step, params)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, tf.to_float(lr_min))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(learning_rate, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.to_float(lr_min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_344": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_learning_rate_decay(params.learning_rate, global_step, params)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, tf.to_float(lr_min))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(learning_rate, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdamOptimizer_348": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": [
                        [
                            "get_learning_rate_decay(params.learning_rate, global_step, params)",
                            "Call"
                        ],
                        [
                            "tf.maximum(learning_rate, tf.to_float(lr_min))",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(learning_rate, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "learning_rate",
                            "Method Argument"
                        ]
                    ]
                },
                "beta1": {
                    "value": "params.adam_beta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta2": {
                    "value": "params.adam_beta2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "params.adam_epsilon",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_to_collection_379": {
                "name": {
                    "value": "tf.GraphKeys.SAVERS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "value": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(var_list=save_vars if params.only_save_trainable else None, max_to_keep=params.keep_checkpoint_max, sharded=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_107": {
                "filename": {
                    "value": "m_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, model_name + '.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "random_normal_initializer_178": {
                "mean": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "stddev": {
                    "value": "params.initializer_gain",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_197": {
                "x": {
                    "value": "(step + 1) * warmup_steps ** (-1.5)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "(step + 1) ** (-0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "piecewise_constant_202": {
                "x": {
                    "value": "tf.to_int32(global_step)",
                    "type": "Call",
                    "possible_values": []
                },
                "boundaries": {
                    "value": "params.learning_rate_boundaries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "params.learning_rate_values",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_264": {
                "msg": {
                    "value": "'Restore %s' % var.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_267": {
                "msg": {
                    "value": "'Initialize %s' % var.name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_319": {
                "inputs": {
                    "value": "sharded_losses",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parallel.parallel_model(model.get_training_func(initializer), features, params.device_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_331": {
                "msg": {
                    "value": "%s\\tshape    %s",
                    "type": "str",
                    "possible_values": []
                },
                "*args": {
                    "value": "v.name[:-2].ljust(80)",
                    "type": "Call",
                    "possible_values": []
                },
                "**kwargs": {
                    "value": "str(v.shape).ljust(20)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_373": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StopAtStepHook_382": {
                "last_step": {
                    "value": "params.train_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "NanTensorHook_384": {
                "loss_tensor": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add_n(sharded_losses) / len(sharded_losses)",
                            "BinOp"
                        ],
                        [
                            "optimize.create_train_op(loss, opt, global_step, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "LoggingTensorHook_385": {
                "tensors": {
                    "value": "{'step': global_step, 'loss': loss}",
                    "type": "Dict",
                    "possible_values": []
                },
                "every_n_iter": {
                    "value": "params.print_steps",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CheckpointSaverHook_392": {
                "checkpoint_dir": {
                    "value": "params.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "save_secs": {
                    "value": "params.save_checkpoint_secs or None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "save_steps": {
                    "value": "params.save_checkpoint_steps or None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "saver": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Saver(var_list=save_vars if params.only_save_trainable else None, max_to_keep=params.keep_checkpoint_max, sharded=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "MonitoredTrainingSession_427": {
                "checkpoint_dir": {
                    "value": "params.output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "hooks": {
                    "value": "train_hooks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.train.StopAtStepHook(last_step=params.train_steps), tf.train.NanTensorHook(loss), tf.train.LoggingTensorHook({'step': global_step, 'loss': loss}, every_n_iter=params.print_steps), tf.train.CheckpointSaverHook(checkpoint_dir=params.output, save_secs=params.save_checkpoint_secs or None, save_steps=params.save_checkpoint_steps or None, saver=saver)]",
                            "List"
                        ]
                    ]
                },
                "save_checkpoint_secs": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(allow_soft_placement=True, graph_options=graph_options)",
                            "Call"
                        ],
                        [
                            "session_config(params)",
                            "Call"
                        ]
                    ]
                }
            },
            "to_int32_202": {
                "x": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.get_or_create_global_step()",
                            "Call"
                        ],
                        [
                            "global_step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_265": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "values[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "assign_268": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.zeros(infer_shape(var))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trainable_variables_326": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "to_float_341": {
                "x": {
                    "value": "lr_min",
                    "type": "variable",
                    "possible_values": [
                        [
                            "float(params.learning_rate_minimum)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_268": {
                "shape": {
                    "value": "infer_shape(var)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "t2tlight/translate.py": {
        "tensorflow": {
            "OptimizerOptions_114": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "do_function_inlining": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GraphOptions_116": {
                "variable": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L1, do_function_inlining=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_117": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphOptions(optimizer_options=optimizer_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_184": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_253": {
                "variable": {
                    "value": "all_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "group_267": {
                "variable": {
                    "value": "assign_op",
                    "type": "variable",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assign_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Exists_90": {
                "filename": {
                    "value": "m_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, model_name + '.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_94": {
                "msg": {
                    "value": "'Restoring model parameters from %s' % m_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_202": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_variables_208": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint in enumerate(args.models)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_checkpoint_210": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint in enumerate(args.models)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_207": {
                "msg": {
                    "value": "'Loading %s' % checkpoint",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_271": {
                "config": {
                    "value": "session_config(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_132": {
                "msg": {
                    "value": "'restoring %s -> %s' % (name, var.name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "assign_134": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "value_dict[name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tables_initializer_274": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_133": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_240": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'source_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_242": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'source_length_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_283": {
                "x": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Finished batch %d' % len(results)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "t2tlight/translate_ens.py": {
        "tensorflow": {
            "OptimizerOptions_114": {
                "variable": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": []
                },
                "opt_level": {
                    "value": "tf.OptimizerOptions.L1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "do_function_inlining": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "GraphOptions_116": {
                "variable": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer_options": {
                    "value": "optimizer_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.OptimizerOptions(opt_level=tf.OptimizerOptions.L1, do_function_inlining=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConfigProto_117": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "graph_options": {
                    "value": "graph_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphOptions(optimizer_options=optimizer_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_verbosity_190": {
                "level": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "trainable_variables_261": {
                "variable": {
                    "value": "all_var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_90": {
                "filename": {
                    "value": "m_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, model_name + '.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "info_94": {
                "msg": {
                    "value": "'Restoring model parameters from %s' % m_name",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Graph_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "list_variables_214": {
                "variable": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint in enumerate(args.models)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_checkpoint_216": {
                "variable": {
                    "value": "reader",
                    "type": "variable",
                    "possible_values": []
                },
                "ckpt_dir_or_file": {
                    "value": "checkpoint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "checkpoint in enumerate(args.models)",
                            "Call"
                        ]
                    ]
                }
            },
            "info_213": {
                "msg": {
                    "value": "'Loading %s' % checkpoint",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Session_282": {
                "config": {
                    "value": "session_config(params)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "debug_134": {
                "msg": {
                    "value": "'restoring %s -> %s' % (name, var.name)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "v.dtype",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "v.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "assign_140": {
                "variable": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": []
                },
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "variable"
                        ]
                    ]
                },
                "value": {
                    "value": "placeholder",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(v.dtype, shape=v.shape)",
                            "Call"
                        ]
                    ]
                }
            },
            "tables_initializer_287": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_135": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_246": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'source_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_248": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "'source_length_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_296": {
                "x": {
                    "value": "tf.logging.INFO",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "message",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'Finished batch %d' % len(results)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "t2tlight/utils/attention.py": {
        "tensorflow": {
            "to_float_31": {
                "variable": {
                    "value": "position",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.range(length)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "concat_43": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.sin(scaled_time), tf.cos(scaled_time)]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "pad_44": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [0, tf.mod(channels, 2)]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "variable": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "signal",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([tf.sin(scaled_time), tf.cos(scaled_time)], axis=1)",
                            "Call"
                        ],
                        [
                            "tf.pad(signal, [[0, 0], [0, tf.mod(channels, 2)]])",
                            "Call"
                        ],
                        [
                            "tf.reshape(signal, [1, length, channels])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, length, channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_79": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "combine_heads(results)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_112": {
                "variable": {
                    "value": "(q, k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(queries, size, scope='qkv_transform')",
                            "Call"
                        ],
                        [
                            "linear(memories, key_size + value_size, scope='kv_transform')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[key_size, key_size, value_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_122": {
                "variable": {
                    "value": "(k, v)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "combined",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linear(queries, size, scope='qkv_transform')",
                            "Call"
                        ],
                        [
                            "linear(memories, key_size + value_size, scope='kv_transform')",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "[key_size, value_size]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(combined, [key_size, key_size, value_size], axis=-1)",
                            "Call"
                        ],
                        [
                            "linear(queries, key_size, scope='q_transform')",
                            "Call"
                        ],
                        [
                            "compute_qkv(queries, memories, key_size, value_size, num_heads, state=state)",
                            "Call"
                        ],
                        [
                            "split_heads(q, num_heads)",
                            "Call"
                        ],
                        [
                            "q * key_depth_per_head ** (-0.5)",
                            "BinOp"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ],
                        [
                            "q",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(combined, [key_size, key_size, value_size], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(combined, [key_size, value_size], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state['key'], k], axis=1)",
                            "Call"
                        ],
                        [
                            "compute_qkv(queries, memories, key_size, value_size, num_heads, state=state)",
                            "Call"
                        ],
                        [
                            "split_heads(k, num_heads)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softmax_149": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(q * k, axis=3), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_174": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(q * k, axis=3)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_177": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(q, k, transpose_b=True)",
                            "Call"
                        ],
                        [
                            "logits + bias",
                            "BinOp"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(q * k, axis=3), axis=2)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "attention_weights",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_186": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights_shape[:-2]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "name_scope_28": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "add_timing_signal",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_61": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "split_heads",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_66": {
                "a": {
                    "value": "tf.reshape(x, x_shape[:-1] + [num_heads, m // num_heads])",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "name_scope_78": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "combine_heads",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[x]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_82": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "combine_heads(results)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape[:-2] + [a * b]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_115": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state['key'], k]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_116": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[state['value'], v]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_144": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_152": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_154": {
                "a": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.split(combined, [key_size, key_size, value_size], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.split(combined, [key_size, value_size], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.concat([state['value'], v], axis=1)",
                            "Call"
                        ],
                        [
                            "compute_qkv(queries, memories, key_size, value_size, num_heads, state=state)",
                            "Call"
                        ],
                        [
                            "split_heads(v, num_heads)",
                            "Call"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_172": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "dot_product_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[q, k, v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_180": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(logits, name='attention_weights')",
                            "Call"
                        ],
                        [
                            "tf.nn.dropout(weights, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "tf.reshape(weights, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_187": {
                "input": {
                    "value": "tf.reduce_sum(weights * v, axis=2)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "multihead_attention",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[queries, memories]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_29": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "combine_heads(results)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_30": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "combine_heads(results)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_38": {
                "x": {
                    "value": "tf.to_float(tf.range(num_timescales)) * -log_timescale_increment",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "expand_dims_42": {
                "input": {
                    "value": "inv_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min_timescale * tf.exp(tf.to_float(tf.range(num_timescales)) * -log_timescale_increment)",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_66": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(x, [0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "combine_heads(results)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "x_shape[:-1] + [num_heads, m // num_heads]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_174": {
                "input_tensor": {
                    "value": "q * k",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_187": {
                "input_tensor": {
                    "value": "weights * v",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "to_float_36": {
                "x": {
                    "value": "num_timescales",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_43": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_43": {
                "x": {
                    "value": "scaled_time",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(position, 1) * tf.expand_dims(inv_timescales, 0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "to_float_39": {
                "x": {
                    "value": "tf.range(num_timescales)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mod_44": {
                "x1": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(x)[2]",
                            "Subscript"
                        ]
                    ]
                },
                "x2": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "t2tlight/utils/common.py": {
        "tensorflow": {
            "convert_to_tensor_12": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_19": {
                "variable": {
                    "value": "dynamic_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_51": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "batch_pos",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.range(batch_size * range_size) // range_size",
                            "BinOp"
                        ],
                        [
                            "tf.reshape(batch_pos, [batch_size, range_size])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, range_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_75": {
                "variable": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[batch_pos, indices]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_nd_76": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, indices], axis=-1)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "TensorShape_34": {
                "dims": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ],
                        [
                            "infer_shape(tensor)",
                            "Call"
                        ],
                        [
                            "infer_shape(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_40": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor.shape.as_list()",
                            "Call"
                        ],
                        [
                            "infer_shape(tensor)",
                            "Call"
                        ],
                        [
                            "infer_shape(tensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[dim_0] + [dim_1] + shape[1:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_55": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ],
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tile_62": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tensor, axis=1)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "multiples": {
                    "value": "tile_dims",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ],
                        [
                            "[1] * tensor.shape.ndims",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_16": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(x)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_71": {
                "input": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_72": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.stack([batch_pos, indices], axis=-1)",
                            "Call"
                        ],
                        [
                            "indices",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "t2tlight/utils/hooks.py": {
        "tensorflow": {
            "get_collection_19": {
                "variable": {
                    "value": "savers",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "collection_key",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GraphKeys.SAVERS",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Graph_134": {
                "variable": {
                    "value": "graph",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ChiefSessionCreator_148": {
                "variable": {
                    "value": "sess_creator",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "path",
                    "type": "variable",
                    "possible_values": [
                        [
                            "path",
                            "Method Argument"
                        ]
                    ]
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "SecondOrStepTimer_214": {
                "variable": {
                    "value": "self._timer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "every_secs": {
                    "value": "eval_secs or None",
                    "type": "BoolOp",
                    "possible_values": []
                },
                "every_steps": {
                    "value": "eval_steps or None",
                    "type": "BoolOp",
                    "possible_values": []
                }
            },
            "get_global_step_222": {
                "variable": {
                    "value": "global_step",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Glob_229": {
                "variable": {
                    "value": "params_files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "params_pattern",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._base_dir, '*.json')",
                            "Call"
                        ]
                    ]
                }
            },
            "SessionRunArgs_241": {
                "variable": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": []
                },
                "fetches": {
                    "value": "self._global_step",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "GFile_42": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GFile_61": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Exists_73": {
                "filename": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GFile_76": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "GFile_98": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "os.path.join(self._save_path, removed)",
                            "Call"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ],
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                },
                "mode": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "info_197": {
                "msg": {
                    "value": "Create EvaluationHook.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "source",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "source_length",
                    "type": "str",
                    "possible_values": []
                }
            },
            "MonitoredSession_153": {
                "session_creator": {
                    "value": "sess_creator",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.ChiefSessionCreator(checkpoint_dir=path, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "Exists_224": {
                "filename": {
                    "value": "self._save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "info_225": {
                "msg": {
                    "value": "'Making dir: %s' % self._save_path",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MakeDirs_226": {
                "dirname": {
                    "value": "self._save_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Copy_233": {
                "oldpath": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line.strip().split(':')",
                            "Call"
                        ],
                        [
                            "name.strip()[1:-1]",
                            "Subscript"
                        ],
                        [
                            "records",
                            "variable"
                        ],
                        [
                            "params_files",
                            "variable"
                        ],
                        [
                            "files",
                            "variable"
                        ],
                        [
                            "files",
                            "variable"
                        ]
                    ]
                },
                "newpath": {
                    "value": "new_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name.replace(self._base_dir, self._save_path)",
                            "Call"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "info_315": {
                "msg": {
                    "value": "'Validating model at step %d' % global_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_320": {
                "msg": {
                    "value": "'%s at step %d: %f' % (self._metric, global_step, score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_335": {
                "variable": {
                    "value": "old_files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "old_path + '*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_345": {
                "variable": {
                    "value": "files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename + '*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_358": {
                "msg": {
                    "value": "'Best score: %f' % best_score",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_256": {
                "msg": {
                    "value": "'Saving checkpoints for %d into %s.' % (global_step, save_path)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_262": {
                "msg": {
                    "value": "'Validating model at step %d' % global_step",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_267": {
                "msg": {
                    "value": "'%s at step %d: %f' % (self._metric, global_step, score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_284": {
                "variable": {
                    "value": "old_files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "old_path + '*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Glob_294": {
                "variable": {
                    "value": "files",
                    "type": "variable",
                    "possible_values": []
                },
                "filename": {
                    "value": "filename + '*'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_307": {
                "msg": {
                    "value": "'Best score at step %d: %f' % (global_step, best_score)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_336": {
                "msg": {
                    "value": "'Copying %s to %s' % (old_path, new_path)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_344": {
                "msg": {
                    "value": "'Removing %s' % filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_285": {
                "msg": {
                    "value": "'Copying %s to %s' % (old_path, new_path)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "info_293": {
                "msg": {
                    "value": "'Removing %s' % filename",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Copy_340": {
                "oldpath": {
                    "value": "o_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_files",
                            "variable"
                        ],
                        [
                            "old_files",
                            "variable"
                        ]
                    ]
                },
                "newpath": {
                    "value": "n_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o_file.replace(self._base_dir, self._save_path)",
                            "Call"
                        ],
                        [
                            "o_file.replace(old_path, new_path)",
                            "Call"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Remove_348": {
                "filename": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line.strip().split(':')",
                            "Call"
                        ],
                        [
                            "name.strip()[1:-1]",
                            "Subscript"
                        ],
                        [
                            "records",
                            "variable"
                        ],
                        [
                            "params_files",
                            "variable"
                        ],
                        [
                            "files",
                            "variable"
                        ],
                        [
                            "files",
                            "variable"
                        ]
                    ]
                }
            },
            "Copy_289": {
                "oldpath": {
                    "value": "o_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "old_files",
                            "variable"
                        ],
                        [
                            "old_files",
                            "variable"
                        ]
                    ]
                },
                "newpath": {
                    "value": "n_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "o_file.replace(self._base_dir, self._save_path)",
                            "Call"
                        ],
                        [
                            "o_file.replace(old_path, new_path)",
                            "Call"
                        ]
                    ]
                },
                "overwrite": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Remove_297": {
                "filename": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "line.strip().split(':')",
                            "Call"
                        ],
                        [
                            "name.strip()[1:-1]",
                            "Subscript"
                        ],
                        [
                            "records",
                            "variable"
                        ],
                        [
                            "params_files",
                            "variable"
                        ],
                        [
                            "files",
                            "variable"
                        ],
                        [
                            "files",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "t2tlight/utils/layer.py": {
        "tensorflow": {
            "concat_24": {
                "variable": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[input_shape[:-1], [output_size]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_26": {
                "variable": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "W",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_27": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.reshape(input_data, [-1, input_size])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('W', shape=[input_size, output_size], dtype=dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_42": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "scale",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.ones_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "bias",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_mean_47": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_data, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_48": {
                "variable": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(input_data - mean)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reshape_65": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "to_float_77": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "vocab_size - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "one_hot_81": {
                "variable": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": []
                },
                "indices": {
                    "value": "tf.cast(labels, tf.int32)",
                    "type": "Call",
                    "possible_values": []
                },
                "depth": {
                    "value": "vocab_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.shape(logits)[1]",
                            "Subscript"
                        ]
                    ]
                },
                "on_value": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1.0 - smoothing",
                            "BinOp"
                        ]
                    ]
                },
                "off_value": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "smoothing / n",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_83": {
                "variable": {
                    "value": "xentropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "soft_targets",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.one_hot(tf.cast(labels, tf.int32), depth=vocab_size, on_value=p, off_value=q)",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_99": {
                "variable": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_data, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ]
                    ]
                },
                "rate": {
                    "value": "1 - dropout_rate",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_21": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "linear",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_30": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_33": {
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(tf.reshape(input_data, [-1, input_size]), W)",
                            "Call"
                        ],
                        [
                            "output + bias",
                            "BinOp"
                        ],
                        [
                            "input_norm * scale + bias",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([input_shape[:-1], [output_size]], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_39": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "default_name": {
                    "value": "layer_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_62": {
                "name": {
                    "value": "smoothed_softmax_cross_entropy",
                    "type": "str",
                    "possible_values": []
                },
                "values": {
                    "value": "[logits, labels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sparse_softmax_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "ce",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                },
                "labels": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_27": {
                "tensor": {
                    "value": "input_data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.dropout(input_data, 1 - dropout_rate)",
                            "Call"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ],
                        [
                            "input_data",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, input_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_48": {
                "x": {
                    "value": "input_data - mean",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rsqrt_50": {
                "x": {
                    "value": "variance + epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_75": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_81": {
                "x": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(labels, [-1])",
                            "Call"
                        ],
                        [
                            "labels",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_initializer_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_91": {
                "x": {
                    "value": "q + 1e-20",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "t2tlight/utils/optimize.py": {
        "tensorflow": {
            "name_scope_8": {
                "name": {
                    "value": "create_train_op",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_15": {
                "name": {
                    "value": "loss",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_16": {
                "name": {
                    "value": "global_norm/gradient_norm",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.global_norm(gradients)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_global_norm_21": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[0] for item in grads_and_vars]",
                            "ListComp"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, params.clip_grad_norm)",
                            "Call"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "params.clip_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "global_norm_17": {
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[item[0] for item in grads_and_vars]",
                            "ListComp"
                        ],
                        [
                            "tf.clip_by_global_norm(gradients, params.clip_grad_norm)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "t2tlight/utils/parallel.py": {
        "tensorflow": {
            "convert_to_tensor_98": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "features.items()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(v)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(v, [num_datashards])",
                            "Call"
                        ]
                    ]
                }
            },
            "replica_device_setter_43": {
                "worker_device": {
                    "value": "worker",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'/gpu:%d' % i",
                            "BinOp"
                        ],
                        [
                            "worker",
                            "Method Argument"
                        ]
                    ]
                },
                "ps_device": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                },
                "ps_tasks": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_100": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "features.items()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(v)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(v, [num_datashards])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tile_101": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "features.items()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(v)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(v, [num_datashards])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[num_datashards]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "sharded_features[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "value": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "kwargs.items()",
                            "Call"
                        ],
                        [
                            "features.items()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(v)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(v, axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.tile(v, [num_datashards])",
                            "Call"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "num_datashards",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(device_list)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_78": {
                "name_or_scope": {
                    "value": "tf.get_variable_scope()",
                    "type": "Call",
                    "possible_values": []
                },
                "reuse": {
                    "value": "i != 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "device_102": {
                "device_name": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_scope_78": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "name_scope_79": {
                "name": {
                    "value": "'parallel_%d' % i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_80": {
                "device_name": {
                    "value": "device_setter",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_create_device_setter(False, worker, len(devices))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "t2tlight/utils/vocab.py": {
        "tensorflow": {
            "GFile_13": {
                "name": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": [
                        [
                            "filename",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}