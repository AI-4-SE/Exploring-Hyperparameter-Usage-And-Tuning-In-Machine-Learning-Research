{
    "cnn_lstm/torch_mcts.py": {
        "sklearn": {
            "f1_score_490": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.label_list[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_tag",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "Adagrad_81": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pv_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.tree_args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adagrad_90": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.pv_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.config.tree_args['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "new_value/mcts_simple_go.py": {
        "sklearn": {
            "f1_score_448": {
                "variable": {
                    "value": "f1",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.label_list[index]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_tag",
                    "type": "variable",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "policy_gradient/policy_gradient.py": {
        "sklearn": {
            "f1_score_105": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self.label_list[index][:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "pred_tag[:i + 1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "average": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            }
        }
    },
    "new_value/pvnet_simple.py": {
        "tensorflow": {
            "set_random_seed_15": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_44": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_u",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[in_dim, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_46": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, out_dim]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "create_initializer(initializer_range)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "wx_plus_b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weight) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "w_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([config['fc_dim'], config['label_num']], -1.0 / 100, 1.0 / 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_124": {
                "variable": {
                    "value": "w_value",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([config['fc_dim'], 9], -1.0 / 100, 1.0 / 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_24": {
                "stddev": {
                    "value": "initializer_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.02",
                            "Method Argument"
                        ],
                        [
                            "0.02",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_61": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_62": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=dim, reuse=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_63": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[states[0], states[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_104": {
                "variable": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "pretrain_word_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "emb_W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "config['trainable_embed']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Parameter().config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_107": {
                "variable": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([config['vocab_num'], config['word_embed_dim']], -1.0 / 100, 1.0 / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "emb_W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "config['trainable_embed']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Parameter().config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "AdagradOptimizer_136": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.session.run(self.model['learning_rate'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_160": {
                "variable": {
                    "value": "self.current_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_162": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_182": {
                "variable": {
                    "value": "fw_word",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fw_word",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "bw_word",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "bw_word",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_184": {
                "variable": {
                    "value": "extra_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config['raw_feature_dim']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "extra_fea",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_186": {
                "variable": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_187": {
                "variable": {
                    "value": "fw_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fw_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, None], name='fw_word')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_189": {
                "variable": {
                    "value": "real_P",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config['label_num']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "real_P",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_190": {
                "variable": {
                    "value": "real_V",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "real_V",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "tag_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config['label_num']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tag_label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_195": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_196": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_218": {
                "variable": {
                    "value": "final_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_word_state, bw_word_state, extra_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_collection_277": {
                "variable": {
                    "value": "ws",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_50": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name='fc_u', shape=[in_dim, out_dim], initializer=create_initializer(initializer_range))",
                            "Call"
                        ]
                    ]
                }
            },
            "BasicRNNCell_66": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_67": {
                "variable": {
                    "value": "(_, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=dim, reuse=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_138": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.session.run(self.model['learning_rate'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Saver_165": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Saver_170": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "embedding_lookup_201": {
                "variable": {
                    "value": "fw_embed_word",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embed_W",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "fw_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, None], name='fw_word')",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_202": {
                "variable": {
                    "value": "bw_embed_word",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embed_W",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "bw_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, None], name='bw_word')",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_231": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(final_state, self.config['feature_dim'], self.config['fc_dim'], keep_prob)",
                            "Call"
                        ],
                        [
                            "self.session.run(self.model['fc_output'], feed_dict=pad_feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([config['fc_dim'], config['label_num']], -1.0 / 100, 1.0 / 100))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_232": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(fc_output, w_policy)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_233": {
                "variable": {
                    "value": "max_prob_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "self.session.run(self.model['prob'], feed_dict=pad_feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_235": {
                "variable": {
                    "value": "value_state",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(final_state, self.config['feature_dim'], self.config['fc_dim'], keep_prob)",
                            "Call"
                        ],
                        [
                            "self.session.run(self.model['fc_output'], feed_dict=pad_feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_value",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([config['fc_dim'], 9], -1.0 / 100, 1.0 / 100))",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_237": {
                "variable": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(tf.multiply(value_state, tag_label), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "square_249": {
                "variable": {
                    "value": "value_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "real_V - value",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_250": {
                "variable": {
                    "value": "value_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(real_V - value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_loss, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(value_loss, axis=1), -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_251": {
                "variable": {
                    "value": "value_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(value_loss, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_253": {
                "variable": {
                    "value": "prob_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(tf.multiply(real_P, tf.log(tf.clip_by_value(prob, 1e-30, 1.0))), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_254": {
                "variable": {
                    "value": "prob_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.reduce_sum(tf.reshape(prob_loss, [batch_size, -1]), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "erf_36": {
                "x": {
                    "value": "input_tensor / tf.sqrt(2.0)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "GRUCell_71": {
                "variable": {
                    "value": "gru_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_72": {
                "variable": {
                    "value": "(_, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "gru_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.GRUCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_140": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.session.run(self.model['learning_rate'])",
                            "Call"
                        ]
                    ]
                }
            },
            "device_199": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_199": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_222": {
                "name_or_scope": {
                    "value": "fc",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "name_scope_227": {
                "name": {
                    "value": "pv_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_242": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(tf.multiply(value_state, tag_label), 1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_244": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "similarity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(tf.multiply(value_state, tag_label), 1), -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_259": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_399": {
                "checkpoint_dir": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_75": {
                "variable": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_76": {
                "variable": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_77": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_80": {
                "variable": {
                    "value": "fw_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_81": {
                "variable": {
                    "value": "bw_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_state, bw_state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_142": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.session.run(self.model['learning_rate'])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_172": {
                "checkpoint_dir": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_207": {
                "name_or_scope": {
                    "value": "word_state",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                }
            },
            "variable_scope_209": {
                "name_or_scope": {
                    "value": "word_state",
                    "type": "str",
                    "possible_values": []
                },
                "reuse": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "variable_scope_212": {
                "name_or_scope": {
                    "value": "fw_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_214": {
                "name_or_scope": {
                    "value": "bw_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_238": {
                "input_tensor": {
                    "value": "tf.multiply(value_state, tag_label)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_251": {
                "input_tensor": {
                    "value": "value_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.square(real_V - value)",
                            "Call"
                        ],
                        [
                            "tf.reshape(value_loss, [batch_size, -1])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(value_loss, axis=1), -1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_253": {
                "input_tensor": {
                    "value": "tf.multiply(real_P, tf.log(tf.clip_by_value(prob, 1e-30, 1.0)))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_254": {
                "input_tensor": {
                    "value": "tf.reshape(prob_loss, [batch_size, -1])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sqrt_36": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "GRUCell_86": {
                "variable": {
                    "value": "gru_fw",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "GRUCell_87": {
                "variable": {
                    "value": "gru_bw",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_88": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "gru_fw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.GRUCell(num_units=dim)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "gru_bw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.GRUCell(num_units=dim)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_90": {
                "variable": {
                    "value": "fw_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_91": {
                "variable": {
                    "value": "bw_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_92": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_state, bw_state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_238": {
                "x": {
                    "value": "value_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(fc_output, w_value)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tag_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.config['label_num']], name='tag_label')",
                            "Call"
                        ]
                    ]
                }
            },
            "multiply_253": {
                "x": {
                    "value": "real_P",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.config['label_num']], name='real_P')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.log(tf.clip_by_value(prob, 1e-30, 1.0))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_254": {
                "tensor": {
                    "value": "prob_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.reduce_sum(tf.multiply(real_P, tf.log(tf.clip_by_value(prob, 1e-30, 1.0))), 1), -1)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(tf.reduce_sum(tf.reshape(prob_loss, [batch_size, -1]), 1), -1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[batch_size, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "add_n_260": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in vars if 'bias' not in v.name.lower()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_253": {
                "x": {
                    "value": "tf.clip_by_value(prob, 1e-30, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_253": {
                "t": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "self.session.run(self.model['prob'], feed_dict=pad_feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-30",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "l2_loss_261": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ws",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "policy_gradient/pg_net.py": {
        "tensorflow": {
            "set_random_seed_15": {
                "seed": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Variable_23": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([in_dim, out_dim], -0.1, 0.1)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_u",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_24": {
                "variable": {
                    "value": "bias",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.zeros([1, out_dim]) + 0.1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "fc_b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_26": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "wx_plus_b1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(inputs, weight) + bias",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "w_policy",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([config['fc_dim'], config['label_num']], -1.0 / 100, 1.0 / 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "w_value",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([config['fc_dim'], 1], -1.0 / 100, 1.0 / 100)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "pretrain_word_embed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "emb_W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "config['trainable_embed']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Parameter().config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "word_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.random_uniform([config['vocab_num'], config['word_embed_dim']], -1.0 / 100, 1.0 / 100)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "emb_W",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "config['trainable_embed']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "Parameter().config",
                            "Attribute"
                        ]
                    ]
                }
            },
            "BasicLSTMCell_64": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_65": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=dim, reuse=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_66": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[states[0], states[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "AdagradOptimizer_97": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.session.run(self.model['learning_rate'])",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_120": {
                "variable": {
                    "value": "self.current_epoch",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Session_122": {
                "variable": {
                    "value": "self.session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_123": {
                "variable": {
                    "value": "self.saver",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_138": {
                "variable": {
                    "value": "fw_word",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "fw_word",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_139": {
                "variable": {
                    "value": "bw_word",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "bw_word",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_140": {
                "variable": {
                    "value": "tag_label",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config['label_num']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "tag_label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_141": {
                "variable": {
                    "value": "extra_fea",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "extra_fea",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_143": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self.config['label_num']]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_144": {
                "variable": {
                    "value": "G_t",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "G_t",
                    "type": "str",
                    "possible_values": []
                }
            },
            "shape_149": {
                "variable": {
                    "value": "fw_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "fw_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, None], name='fw_word')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_150": {
                "variable": {
                    "value": "bw_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bw_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, None], name='bw_word')",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_151": {
                "variable": {
                    "value": "label_shape",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tag_label",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.config['label_num']], name='tag_label')",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "keep_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_154": {
                "variable": {
                    "value": "learning_rate",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "self.config['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_215": {
                "variable": {
                    "value": "ws",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.TRAINABLE_VARIABLES",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_25": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "b": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([in_dim, out_dim], -0.1, 0.1), name='fc_u')",
                            "Call"
                        ]
                    ]
                }
            },
            "BasicRNNCell_69": {
                "variable": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_70": {
                "variable": {
                    "value": "(_, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "rnn_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.BasicLSTMCell(num_units=dim, reuse=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.rnn_cell.BasicRNNCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdamOptimizer_99": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.session.run(self.model['learning_rate'])",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_159": {
                "variable": {
                    "value": "fw_embed_word",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embed_W",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "fw_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, None], name='fw_word')",
                            "Call"
                        ]
                    ]
                }
            },
            "embedding_lookup_160": {
                "variable": {
                    "value": "bw_embed_word",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "embed_W",
                    "type": "variable",
                    "possible_values": []
                },
                "ids": {
                    "value": "bw_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.int32, [None, None], name='bw_word')",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_177": {
                "variable": {
                    "value": "final_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_word_state, bw_word_state, extra_fea]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_188": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "fc_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "fc_layer(final_state, self.config['feature_dim'], self.config['fc_dim'])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "w_policy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.random_uniform([config['fc_dim'], config['label_num']], -1.0 / 100, 1.0 / 100))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_189": {
                "variable": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(fc_output, w_policy)",
                            "Call"
                        ]
                    ]
                }
            },
            "argmax_190": {
                "variable": {
                    "value": "max_prob_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "self.session.run(self.model['prob'], feed_dict=pad_feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "shape": {
                    "value": "[1, out_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "GRUCell_74": {
                "variable": {
                    "value": "gru_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "dynamic_rnn_75": {
                "variable": {
                    "value": "(_, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell": {
                    "value": "gru_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.rnn_cell.GRUCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSPropOptimizer_101": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.session.run(self.model['learning_rate'])",
                            "Call"
                        ]
                    ]
                }
            },
            "device_157": {
                "device_name": {
                    "value": "/cpu:0",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_157": {
                "name": {
                    "value": "embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_170": {
                "variable": {
                    "value": "fw_word_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed_W",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, fw_shape[1] * self.config['word_embed_dim']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_171": {
                "variable": {
                    "value": "bw_word_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed_W",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, bw_shape[1] * self.config['word_embed_dim']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_173": {
                "variable": {
                    "value": "fw_word_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "fw_embed_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embed_W, fw_word)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_174": {
                "variable": {
                    "value": "bw_word_state",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "bw_embed_word",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.embedding_lookup(embed_W, bw_word)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "name_scope_176": {
                "name": {
                    "value": "pv_net",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_200": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_292": {
                "checkpoint_dir": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_78": {
                "variable": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BasicLSTMCell_79": {
                "variable": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": []
                },
                "num_units": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": []
                },
                "reuse": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "bidirectional_dynamic_rnn_80": {
                "variable": {
                    "value": "(outputs, states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "cell_fw": {
                    "value": "fw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "cell_bw": {
                    "value": "bw_cell",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.rnn.BasicLSTMCell(num_units=dim, reuse=False)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_82": {
                "variable": {
                    "value": "fw_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_83": {
                "variable": {
                    "value": "bw_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "states[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_84": {
                "variable": {
                    "value": "states",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[fw_state, bw_state]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_103": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.session.run(self.model['learning_rate'])",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_126": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "local_variables_initializer_127": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "latest_checkpoint_130": {
                "checkpoint_dir": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_163": {
                "name_or_scope": {
                    "value": "fw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_165": {
                "name_or_scope": {
                    "value": "bw",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "loss_policy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_194": {
                "input_tensor": {
                    "value": "tf.matmul(G_t, tf.matmul(action, tf.transpose(tf.log(tf.clip_by_value(prob, 1e-30, 1.0)), [1, 0])))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_201": {
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in vars if 'bias' not in v.name.lower()]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "matmul_195": {
                "a": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, self.config['label_num']], name='action')",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "tf.transpose(tf.log(tf.clip_by_value(prob, 1e-30, 1.0)), [1, 0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "l2_loss_202": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ws",
                            "variable"
                        ]
                    ]
                }
            },
            "transpose_195": {
                "a": {
                    "value": "tf.log(tf.clip_by_value(prob, 1e-30, 1.0))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_195": {
                "x": {
                    "value": "tf.clip_by_value(prob, 1e-30, 1.0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "clip_by_value_195": {
                "t": {
                    "value": "prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(logits)",
                            "Call"
                        ],
                        [
                            "self.session.run(self.model['prob'], feed_dict=pad_feed_dict)",
                            "Call"
                        ]
                    ]
                },
                "clip_value_min": {
                    "value": "1e-30",
                    "type": "float",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_lstm/tools.py": {
        "torch": {
            "zeros_235": {
                "variable": {
                    "value": "word_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_236": {
                "variable": {
                    "value": "label_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_238": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_256": {
                "variable": {
                    "value": "char_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, max_word_len)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_300": {
                "variable": {
                    "value": "cur_label_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, label_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_302": {
                "variable": {
                    "value": "pi_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, label_num)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_304": {
                "variable": {
                    "value": "reward_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "if_train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_338": {
                "variable": {
                    "value": "feature_seq_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, max_seq_len, feature_dim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_243": {
                "variable": {
                    "value": "mask[idx, :seqlen]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "cnn_lstm/torch_pvnet.py": {
        "torch": {
            "Dropout_16": {
                "variable": {
                    "value": "self.char_drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Embedding_17": {
                "variable": {
                    "value": "self.char_embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "alphabet_size",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv1d_23": {
                "variable": {
                    "value": "self.char_cnn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "embedding_dim",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.hidden_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_pool1d_53": {
                "variable": {
                    "value": "char_cnn_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "char_cnn_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.char_cnn(char_embeds)",
                            "Call"
                        ],
                        [
                            "F.max_pool1d(char_cnn_out, char_cnn_out.size(2)).view(batch_size, -1)",
                            "Call"
                        ],
                        [
                            "self.char_cnn(char_embeds).transpose(2, 1).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "char_cnn_out.size(2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Dropout_93": {
                "variable": {
                    "value": "self.drop",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.tree_args['drop_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Embedding_94": {
                "variable": {
                    "value": "self.word_embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "len(word_alphabet)",
                    "type": "Call",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.embedding_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "word_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[word_embs]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_162": {
                "variable": {
                    "value": "self.droplstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.tree_args['drop_prob']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "pack_padded_sequence_217": {
                "variable": {
                    "value": "packed_words",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "word_represent",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.drop(word_embs)",
                            "Call"
                        ],
                        [
                            "self.wordrep.forward(word_inputs, word_seq_lengths, char_inputs, char_seq_lengths, char_seq_recover)",
                            "Call"
                        ]
                    ]
                },
                "lengths": {
                    "value": "word_seq_lengths.cpu().numpy()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "pad_packed_sequence_221": {
                "variable": {
                    "value": "(lstm_out, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "sequence": {
                    "value": "lstm_out",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_243": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.tree_args['feature_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.tree_args['fc_dim']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Linear_245": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.tree_args['fc_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.config.data_args['label_num']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Softmax_247": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_248": {
                "variable": {
                    "value": "self.evaluator",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.config.tree_args['fc_dim']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "9",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_141": {
                "variable": {
                    "value": "word_embs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_embs, char_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GRU_182": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.lstm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bilstm_flag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_270": {
                "variable": {
                    "value": "word_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_state, word_feature.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_272": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.classifier(word_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_280": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_state.sum(1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_286": {
                "variable": {
                    "value": "word_state",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[word_state, word_feature.float()]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_294": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.classifier(word_state)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_304": {
                "variable": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "value_state.sum(1).unsqueeze(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_softmax_308": {
                "variable": {
                    "value": "log_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.relu(self.classifier(word_state))",
                            "Call"
                        ],
                        [
                            "F.relu(self.classifier(word_state))",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_312": {
                "variable": {
                    "value": "value_loss_f",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LSTM_186": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "self.input_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_layers": {
                    "value": "self.lstm_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "self.bilstm_flag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_19": {
                "ndarray": {
                    "value": "pretrain_char_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_22": {
                "ndarray": {
                    "value": "self.random_embedding(alphabet_size, embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_96": {
                "ndarray": {
                    "value": "pretrain_word_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_99": {
                "ndarray": {
                    "value": "self.random_embedding(len(word_alphabet), self.embedding_dim)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    }
}