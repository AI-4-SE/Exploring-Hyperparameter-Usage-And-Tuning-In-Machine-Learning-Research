{
    "Central.py": {
        "torch": {
            "Adam_30": {
                "variable": {
                    "value": "self.opt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "utils.parameter['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_31": {
                "variable": {
                    "value": "self.cross_entropy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "data_loader.py": {
        "torch": {}
    },
    "har_model.py": {
        "torch": {
            "Conv3d_13": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_14": {
                "variable": {
                    "value": "self.bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_16": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_17": {
                "variable": {
                    "value": "self.bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_19": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_20": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "relu_23": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn1(self.conv1(x))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_24": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn2(self.conv2(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_25": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv3d_34": {
                "variable": {
                    "value": "self.acc_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_35": {
                "variable": {
                    "value": "self.acc_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_37": {
                "variable": {
                    "value": "self.acc_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_38": {
                "variable": {
                    "value": "self.acc_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_41": {
                "variable": {
                    "value": "self.gyro_conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 2, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_42": {
                "variable": {
                    "value": "self.gyro_bn1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_44": {
                "variable": {
                    "value": "self.gyro_conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 4, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_45": {
                "variable": {
                    "value": "self.gyro_bn2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Conv3d_47": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(1, 1, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm3d_48": {
                "variable": {
                    "value": "self.bn3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "planes",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "split_54": {
                "variable": {
                    "value": "x_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_56": {
                "variable": {
                    "value": "acc_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.acc_bn1(self.acc_conv1(x_split[0]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_57": {
                "variable": {
                    "value": "acc_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.acc_bn2(self.acc_conv2(acc_out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_59": {
                "variable": {
                    "value": "gyro_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gyro_bn1(self.gyro_conv1(x_split[1]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "gyro_out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.gyro_bn2(self.gyro_conv2(gyro_out))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_62": {
                "variable": {
                    "value": "sensor_data",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[acc_out, gyro_out]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "relu_63": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bn3(self.conv3(sensor_data))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_79": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "sensor_block(1, 64)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "LSTM_80": {
                "variable": {
                    "value": "self.lstm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "64 * 1 * 4",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bidirectional": {
                    "value": "bidirectional",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mean_88": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out.permute(1, 0, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_100": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "100",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "number_class",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Linear_82": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "embed_len * bid",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "logits_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "met-har.py": {
        "torch": {
            "CrossEntropyLoss_16": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_18": {
                "variable": {
                    "value": "cosine_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_358": {
                "variable": {
                    "value": "w_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "w_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "StepLR_79": {
                "variable": {
                    "value": "self.training_op[scheduler]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.training_op['embed_optimizer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.85",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_194": {
                "variable": {
                    "value": "last_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.last_layer.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_227": {
                "variable": {
                    "value": "last_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.last_layer.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_265": {
                "variable": {
                    "value": "last_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.merge_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_296": {
                "variable": {
                    "value": "last_opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "self.merge_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "utils.parameter['lr']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_56": {
                "ndarray": {
                    "value": "result",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.class_map[int_label]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "save_66": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict(), 'client': self.model_name}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "from_numpy_129": {
                "variable": {
                    "value": "target_cce",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_trans_dict[self.user_id][targets.max(1)[1].numpy()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_157": {
                "variable": {
                    "value": "target_cce",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_trans_dict[self.user_id][targets.max(1)[1].numpy()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Adam_48": {
                "params": {
                    "value": "self.last_layer.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Adam_49": {
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "from_numpy_268": {
                "variable": {
                    "value": "targets",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_trans_dict[self.user_id][targets.max(1)[1].numpy()]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_341": {
                "input": {
                    "value": "torch.div(w_avg[k], len(w_list)).sub(w[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_357": {
                "input": {
                    "value": "w[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_365": {
                "tensors": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_398": {
                "input": {
                    "value": "w_avg[k].sub(w[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_341": {
                "input": {
                    "value": "w_avg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "len(w_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sub_341": {
                "input": {
                    "value": "w[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_364": {
                "input": {
                    "value": "w_list[idx][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dist_371": {
                "input": {
                    "value": "weights_flattened[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "w_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(w_param, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "dist_375": {
                "input": {
                    "value": "weights_flattened[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "w_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(w_param, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "reptile.py": {
        "torch": {
            "CrossEntropyLoss_18": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_20": {
                "variable": {
                    "value": "cosine_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_235": {
                "variable": {
                    "value": "w_flatten",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "w_param",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Adam_54": {
                "variable": {
                    "value": "self.training_op[optimizer]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "StepLR_57": {
                "variable": {
                    "value": "self.training_op[scheduler]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.training_op['optimizer']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "step_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "gamma": {
                    "value": "0.85",
                    "type": "float",
                    "possible_values": []
                }
            },
            "save_69": {
                "obj": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "{'model': self.model.state_dict(), 'client': self.model_name}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "filename",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "mul_216": {
                "input": {
                    "value": "torch.div(w_avg[k], len(w_list)).sub(w[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_234": {
                "input": {
                    "value": "w[key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_242": {
                "tensors": {
                    "value": "model_params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_275": {
                "input": {
                    "value": "w_avg[k].sub(w[k])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "sigma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.2",
                            "Method Argument"
                        ],
                        [
                            "0.1",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "div_216": {
                "input": {
                    "value": "w_avg[k]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "len(w_list)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sub_216": {
                "input": {
                    "value": "w[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "flatten_241": {
                "input": {
                    "value": "w_list[idx][key]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "dist_248": {
                "input": {
                    "value": "weights_flattened[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "w_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(w_param, dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "dist_252": {
                "input": {
                    "value": "weights_flattened[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "w_flatten",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat(w_param, dim=0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "Softplus_37": {
                "variable": {
                    "value": "softplus",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CosineSimilarity_38": {
                "variable": {
                    "value": "cosine_similarity",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_39": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_52": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.heter_data(filename, target=target)",
                            "Call"
                        ],
                        [
                            "data_loader.heter_data2(filename, target=target)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_loader.heter_data(filename, target=target)",
                            "Call"
                        ],
                        [
                            "data_loader.heter_data2(filename, target=target)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "train",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_available_40": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_80": {
                "variable": {
                    "value": "embed_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "chunck_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_81": {
                "variable": {
                    "value": "target_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logits'",
                            "Method Argument"
                        ],
                        [
                            "'logits'",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "chunck_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_90": {
                "variable": {
                    "value": "mask_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine_similarity(embed_split[0], embed_split[1]) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed_split[0], embed_split[1]) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed_split[0], embed_split[1]) * Expand",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sub_91": {
                "variable": {
                    "value": "pairwiseloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softplus(Phi)",
                            "Call"
                        ],
                        [
                            "softplus(Phi)",
                            "Call"
                        ],
                        [
                            "softplus(Phi)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(mask, Phi)",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, Phi)",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, Phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_91": {
                "variable": {
                    "value": "pairwiseloss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_102": {
                "variable": {
                    "value": "embed_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "chunk_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_103": {
                "variable": {
                    "value": "target_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logits'",
                            "Method Argument"
                        ],
                        [
                            "'logits'",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "chunk_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_110": {
                "variable": {
                    "value": "mask_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine_similarity(embed_split[0], embed_split[1]) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed_split[0], embed_split[1]) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed_split[0], embed_split[1]) * Expand",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sub_111": {
                "variable": {
                    "value": "pairwiseloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softplus(Phi)",
                            "Call"
                        ],
                        [
                            "softplus(Phi)",
                            "Call"
                        ],
                        [
                            "softplus(Phi)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(mask, Phi)",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, Phi)",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, Phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_111": {
                "variable": {
                    "value": "pairwiseloss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_85": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(target_split[0], target_split[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_87": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(target_split[0], target_split[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_107": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(target_split[0], target_split[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_109": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(target_split[0], target_split[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sub_118": {
                "variable": {
                    "value": "global_sim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softplus(phi_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "phi_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine_similarity(embed, sample_centers) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed, sample_centers) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed, sample_centers) * Expand",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_118": {
                "variable": {
                    "value": "global_sim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_142": {
                "variable": {
                    "value": "sample_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.type(torch.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "global_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sub_144": {
                "variable": {
                    "value": "global_sim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softplus(phi_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "phi_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine_similarity(embed, sample_centers) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed, sample_centers) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed, sample_centers) * Expand",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_144": {
                "variable": {
                    "value": "global_sim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "split_163": {
                "variable": {
                    "value": "embed_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "embed",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "chunck_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_164": {
                "variable": {
                    "value": "target_split",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'logits'",
                            "Method Argument"
                        ],
                        [
                            "'logits'",
                            "Method Argument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "chunck_size",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_171": {
                "variable": {
                    "value": "mask_phi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.cuda.FloatTensor)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(target_split[0], target_split[1]), dim=1).type(torch.FloatTensor)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "Phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine_similarity(embed_split[0], embed_split[1]) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed_split[0], embed_split[1]) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed_split[0], embed_split[1]) * Expand",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sub_172": {
                "variable": {
                    "value": "pairwiseloss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "soft_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "softplus(Phi)",
                            "Call"
                        ],
                        [
                            "softplus(Phi)",
                            "Call"
                        ],
                        [
                            "softplus(Phi)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "mask_phi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mul(mask, Phi)",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, Phi)",
                            "Call"
                        ],
                        [
                            "torch.mul(mask, Phi)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_172": {
                "variable": {
                    "value": "pairwiseloss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_182": {
                "variable": {
                    "value": "sample_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.type(torch.float64)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "global_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sub_184": {
                "variable": {
                    "value": "global_sim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "softplus(phi_1)",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "phi_1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cosine_similarity(embed, sample_centers) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed, sample_centers) * Expand",
                            "BinOp"
                        ],
                        [
                            "cosine_similarity(embed, sample_centers) * Expand",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_184": {
                "variable": {
                    "value": "global_sim_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_114": {
                "variable": {
                    "value": "sample_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.type(torch.cuda.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "global_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_116": {
                "variable": {
                    "value": "sample_centers",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target.type(torch.FloatTensor)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "global_center",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_168": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(target_split[0], target_split[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_170": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(target_split[0], target_split[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mul_85": {
                "input": {
                    "value": "target_split[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target_split[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_87": {
                "input": {
                    "value": "target_split[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target_split[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_107": {
                "input": {
                    "value": "target_split[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target_split[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_109": {
                "input": {
                    "value": "target_split[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target_split[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_168": {
                "input": {
                    "value": "target_split[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target_split[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_170": {
                "input": {
                    "value": "target_split[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "other": {
                    "value": "target_split[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    }
}