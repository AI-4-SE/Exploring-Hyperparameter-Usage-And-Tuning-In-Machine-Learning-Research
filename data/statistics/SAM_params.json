{
    "sam/sam.py": {
        "sklearn": {
            "scale_115": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "X": {
                    "value": "in_data[list_nodes].values",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "from_numpy_118": {
                "variable": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(in_data[list_nodes].values)",
                            "Call"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "th.from_numpy(data).to(device)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_130": {
                "variable": {
                    "value": "g_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(sam.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_144": {
                "variable": {
                    "value": "graph_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "graph_sampler.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_152": {
                "variable": {
                    "value": "_true",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_153": {
                "variable": {
                    "value": "_false",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_154": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nb_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(list_nodes)",
                            "Call"
                        ]
                    ]
                },
                "out": {
                    "value": "nb_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(list_nodes)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_156": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "nb_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(list_nodes)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_157": {
                "variable": {
                    "value": "noise_row",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "nb_var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(list_nodes)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_158": {
                "variable": {
                    "value": "data_iterator",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "data",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scale(in_data[list_nodes].values)",
                            "Call"
                        ],
                        [
                            "data.astype('float32')",
                            "Call"
                        ],
                        [
                            "th.from_numpy(data).to(device)",
                            "Call"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ],
                        [
                            "data",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sequential_44": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_85": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "from_numpy_124": {
                "variable": {
                    "value": "skeleton",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "skeleton.astype('float32')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_135": {
                "variable": {
                    "value": "d_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "discriminator.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_disc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.01",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BCEWithLogitsLoss_136": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_138": {
                "variable": {
                    "value": "criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "disc_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_149": {
                "variable": {
                    "value": "neuron_optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(neuron_sampler.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr_gen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_35": {
                "variable": {
                    "value": "skeleton",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[th.Tensor(skeleton), th.ones(1, nb_vars)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_88": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "nfeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "m": {
                    "value": "nfeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfeatures",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_76": {
                "in_features": {
                    "value": "nfeatures",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfeatures",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dnh",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_77": {
                "num_features": {
                    "value": "dnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dnh",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_78": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "in_features": {
                    "value": "dnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dnh",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_33": {
                "n": {
                    "value": "nb_vars + 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "m": {
                    "value": "nb_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Tanh_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_80": {
                "in_features": {
                    "value": "dnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dnh",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "dnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dnh",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm1d_81": {
                "num_features": {
                    "value": "dnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dnh",
                            "Method Argument"
                        ],
                        [
                            "200",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_82": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_187": {
                "tensors": {
                    "value": "[drawn_graph, noise_row]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_35": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "nb_vars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_shape[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "unbind_93": {
                "input": {
                    "value": "obs_data.unsqueeze(1) * (1 - self.mask) + input.unsqueeze(1) * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_206": {
                "input": {
                    "value": "th.exp(gen - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_207": {
                "input": {
                    "value": "th.exp(gen - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_207": {
                "input": {
                    "value": "gen - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_206": {
                "input": {
                    "value": "gen - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sam/utils/batchnorm.py": {
        "torch": {}
    },
    "sam/utils/graph.py": {
        "torch": {
            "ones_28": {
                "variable": {
                    "value": "ones_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "variable": {
                    "value": "zeros_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layers",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_61": {
                "variable": {
                    "value": "sample_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.layers(self.noise_graph_sampler).view(*self.graph_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "where_62": {
                "variable": {
                    "value": "sample_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "output_sampler > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.ones_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.zeros_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(*self.graph_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_93": {
                "variable": {
                    "value": "ones_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_96": {
                "variable": {
                    "value": "zeros_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_133": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(*self.graph_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_135": {
                "variable": {
                    "value": "self.v_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.where(th.eye(*self.graph_size) > 0, th.ones(*self.graph_size).fill_(1), th.zeros(*self.graph_size)).repeat(self.graph_size[1], 1, 1).transpose(0, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_176": {
                "variable": {
                    "value": "self.in_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(self.graph_size[0], self.k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_177": {
                "variable": {
                    "value": "self.out_weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(self.k, self.graph_size[1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_228": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.FloatTensor(*self.graph_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_236": {
                "variable": {
                    "value": "ones_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_239": {
                "variable": {
                    "value": "zeros_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_245": {
                "variable": {
                    "value": "sample_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * self.weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_247": {
                "variable": {
                    "value": "sample_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "self.weights > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.ones_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.zeros_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_182": {
                "variable": {
                    "value": "ones_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "zeros_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_199": {
                "variable": {
                    "value": "sample_soft",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "corr_weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(self.weights.unsqueeze(1) * (self.v_weights / self.v_weights.abs().sum(1, keepdim=True))).sum(0)",
                            "Call"
                        ],
                        [
                            "self.in_weights @ self.out_weights",
                            "BinOp"
                        ]
                    ]
                }
            },
            "where_200": {
                "variable": {
                    "value": "sample_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "corr_weights > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "self.ones_tensor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "self.zeros_tensor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_38": {
                "in_features": {
                    "value": "n_noises",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n_noises",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gnh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_40": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_41": {
                "in_features": {
                    "value": "gnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gnh",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gnh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_43": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "gnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gnh",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "gnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gnh",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_46": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "in_features": {
                    "value": "gnh",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gnh",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "graph_size * graph_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_119": {
                "input": {
                    "value": "2 * self.weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_135": {
                "condition": {
                    "value": "th.eye(*self.graph_size) > 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "th.ones(*self.graph_size).fill_(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "th.zeros(*self.graph_size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_135": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_161": {
                "input": {
                    "value": "2 * self.weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_213": {
                "input": {
                    "value": "2 * (self.in_weights @ self.out_weights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_259": {
                "input": {
                    "value": "2 * self.weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_24": {
                "n": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "eye_88": {
                "n": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_117": {
                "input": {
                    "value": "2 * self.weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_139": {
                "n": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_159": {
                "input": {
                    "value": "2 * self.weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_188": {
                "n": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_211": {
                "input": {
                    "value": "2 * (self.in_weights @ self.out_weights)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_232": {
                "n": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_257": {
                "input": {
                    "value": "2 * self.weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_150": {
                "tensors": {
                    "value": "[corr_weights.view(-1), -corr_weights.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_105": {
                "tensors": {
                    "value": "[self.weights.view(-1), -self.weights.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_196": {
                "tensors": {
                    "value": "[corr_weights.view(-1), -corr_weights.view(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_135": {
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_135": {
                "*size": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "eye_135": {
                "n": {
                    "value": "*self.graph_size",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "sam/utils/gumble_utils.py": {
        "torch": {
            "tensor_166": {
                "variable": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[0.1, 0.2, 0.3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_167": {
                "variable": {
                    "value": "stacked_logit",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[logits, -logits]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_169": {
                "variable": {
                    "value": "probability",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "2 * logits",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_177": {
                "variable": {
                    "value": "output_gumble_softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "stacked_logit.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_189": {
                "variable": {
                    "value": "output_gumble_sigmoid_v1",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "variable": {
                    "value": "output_gumble_sigmoid_v2",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "logits.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_35": {
                "input": {
                    "value": "y / tau",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "dims - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_91": {
                "input": {
                    "value": "y / tau",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "where_102": {
                "variable": {
                    "value": "y_hard",
                    "type": "variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "y_soft > 0.5",
                    "type": "Compare",
                    "possible_values": []
                },
                "x": {
                    "value": "ones_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ones_tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "zeros_tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zeros_tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_19": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_20": {
                "input": {
                    "value": "U + eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "rand_78": {
                "*size": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "logits.size()",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_81": {
                "input": {
                    "value": "1 - U",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_173": {
                "input": {
                    "value": "stacked_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "th.stack([logits, -logits], 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sam/utils/linear3d.py": {
        "torch": {
            "Parameter_52": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.Tensor(self.channels, self.in_features, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_54": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "th.Tensor(self.channels, self.out_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_71": {
                "variable": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input.unsqueeze(1).expand([input.shape[0], self.channels, self.in_features - 1]), noise.unsqueeze(2)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    }
}