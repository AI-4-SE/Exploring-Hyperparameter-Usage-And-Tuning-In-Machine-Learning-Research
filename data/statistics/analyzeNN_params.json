{
    "squeezeDet/src/demo.py": {
        "tensorflow": {
            "DEFINE_string_29": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"'image' or 'video'.\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "checkpoint",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/model_checkpoints/squeezeDet/model.ckpt-87000",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the model parameter file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "input_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/sample.png",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input image or video to be detected. Can process glob input such as ./data/00000*.png.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/out/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to dump output image or video.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "demo_net",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "squeezeDet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Neural net architecture.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_75": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model.model_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_181": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model.model_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_229": {
                "filename": {
                    "value": "FLAGS.out_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_230": {
                "dirname": {
                    "value": "FLAGS.out_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_77": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_183": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_77": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_183": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "squeezeDet/src/eval.py": {
        "tensorflow": {
            "DEFINE_string_26": {
                "name": {
                    "value": "dataset",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "KITTI",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Currently support PASCAL_VOC or KITTI dataset.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_28": {
                "name": {
                    "value": "data_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Root directory of data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_29": {
                "name": {
                    "value": "image_set",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "test",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Only used for VOC data.Can be train, trainval, val, or test",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_32": {
                "name": {
                    "value": "year",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "2007",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "VOC challenge year. 2007 or 2012Only used for VOC data",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_35": {
                "name": {
                    "value": "eval_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/bichen/logs/squeezeDet/eval",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory where to write event logs ",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_37": {
                "name": {
                    "value": "checkpoint_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/bichen/logs/squeezeDet/train",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the training checkpoint.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_integer_39": {
                "name": {
                    "value": "eval_interval_secs",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "60 * 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "help": {
                    "value": "How often to check if new cpt is saved.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_43": {
                "name": {
                    "value": "net",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "squeezeDet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Neural net architecture.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_45": {
                "name": {
                    "value": "gpu",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "0",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "gpu id.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_185": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_189": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_193": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_197": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_201": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_205": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model.model_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FileWriter_207": {
                "variable": {
                    "value": "summary_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "logdir": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "g",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Exists_244": {
                "filename": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_246": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_251": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_52": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_181": {
                "variable": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DeleteRecursively_245": {
                "dirname": {
                    "value": "FLAGS.eval_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_187": {
                "name": {
                    "value": "APs/mAP",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_191": {
                "name": {
                    "value": "timing/im_detect",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_195": {
                "name": {
                    "value": "timing/im_read",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_199": {
                "name": {
                    "value": "timing/post_proc",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "scalar_203": {
                "name": {
                    "value": "num_det_per_image",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_checkpoint_state_222": {
                "variable": {
                    "value": "ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "checkpoint_dir": {
                    "value": "FLAGS.checkpoint_path",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConfigProto_52": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_183": {
                "name": {
                    "value": "'APs/' + ap_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "ph",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "squeezeDet/src/my_demo.py": {
        "tensorflow": {
            "DEFINE_string_29": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"'image' or 'video'.\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "checkpoint",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "/tmp/bichen/logs/SqueezeDet/train/model.ckpt-500",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the model parameter file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_34": {
                "name": {
                    "value": "input_path",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/sample.png",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Input image or video to be detected. Can process glob input such as ./data/00000*.png.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_38": {
                "name": {
                    "value": "out_dir",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "./data/out/",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Directory to dump output image or video.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_40": {
                "name": {
                    "value": "demo_net",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "squeezeDet",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "Neural net architecture.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_75": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model.model_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Saver_181": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model.model_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "run_237": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_167": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Exists_229": {
                "filename": {
                    "value": "FLAGS.out_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MakeDirs_230": {
                "dirname": {
                    "value": "FLAGS.out_dir",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_77": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Session_183": {
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ConfigProto_77": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ConfigProto_183": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "squeezeDet/src/nets/resnet50_convDet.py": {
        "tensorflow": {
            "dropout_127": {
                "variable": {
                    "value": "dropout4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "res4f",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(res4e + branch2, 'relu')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "drop4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_22": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_36": {
                "filename": {
                    "value": "mc.PRETRAINED_MODEL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_47": {
                "name_or_scope": {
                    "value": "conv2_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_55": {
                "variable": {
                    "value": "res2a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "branch1 + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_60": {
                "variable": {
                    "value": "res2b",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res2a + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_65": {
                "variable": {
                    "value": "res2c",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res2b + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "conv3_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_75": {
                "variable": {
                    "value": "res3a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "branch1 + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_80": {
                "variable": {
                    "value": "res3b",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res3a + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_85": {
                "variable": {
                    "value": "res3c",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res3b + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_90": {
                "variable": {
                    "value": "res3d",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res3c + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_92": {
                "name_or_scope": {
                    "value": "conv4_x",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_100": {
                "variable": {
                    "value": "res4a",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "branch1 + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_105": {
                "variable": {
                    "value": "res4b",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4a + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_110": {
                "variable": {
                    "value": "res4c",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4b + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_115": {
                "variable": {
                    "value": "res4d",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4c + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_120": {
                "variable": {
                    "value": "res4e",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4d + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "relu_125": {
                "variable": {
                    "value": "res4f",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "res4e + branch2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_149": {
                "name_or_scope": {
                    "value": "res + layer_name + _branch2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_48": {
                "name_or_scope": {
                    "value": "res2a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "res2b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_61": {
                "name_or_scope": {
                    "value": "res2c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_68": {
                "name_or_scope": {
                    "value": "res3a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_76": {
                "name_or_scope": {
                    "value": "res3b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_81": {
                "name_or_scope": {
                    "value": "res3c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_86": {
                "name_or_scope": {
                    "value": "res3d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_93": {
                "name_or_scope": {
                    "value": "res4a",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_101": {
                "name_or_scope": {
                    "value": "res4b",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_106": {
                "name_or_scope": {
                    "value": "res4c",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_111": {
                "name_or_scope": {
                    "value": "res4d",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_116": {
                "name_or_scope": {
                    "value": "res4e",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_121": {
                "name_or_scope": {
                    "value": "res4f",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "squeezeDet/src/nets/squeezeDet.py": {
        "tensorflow": {
            "dropout_74": {
                "variable": {
                    "value": "dropout11",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fire11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fire_layer('fire11', fire10, s1x1=96, e1x1=384, e3x3=384, freeze=False)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "drop11",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_106": {
                "values": {
                    "value": "[ex1x1, ex3x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_name + '/concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_21": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_35": {
                "filename": {
                    "value": "mc.PRETRAINED_MODEL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "squeezeDet/src/nets/squeezeDetPlus.py": {
        "tensorflow": {
            "dropout_74": {
                "variable": {
                    "value": "dropout11",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "fire11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fire_layer('fire11', fire10, s1x1=384, e1x1=256, e3x3=256, freeze=False)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "drop11",
                    "type": "str",
                    "possible_values": []
                }
            },
            "concat_106": {
                "values": {
                    "value": "[ex1x1, ex3x3]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "layer_name + '/concat'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_21": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_35": {
                "filename": {
                    "value": "mc.PRETRAINED_MODEL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "squeezeDet/src/nets/vgg16_convDet.py": {
        "tensorflow": {
            "dropout_85": {
                "variable": {
                    "value": "dropout5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._conv_layer('conv5_3', conv5_2, filters=512, size=3, stride=1)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "self.keep_prob",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "drop6",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_22": {
                "device_name": {
                    "value": "'/gpu:{}'.format(gpu_id)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Exists_36": {
                "filename": {
                    "value": "mc.PRETRAINED_MODEL_PATH",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_41": {
                "name_or_scope": {
                    "value": "conv1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "conv2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_57": {
                "name_or_scope": {
                    "value": "conv3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_67": {
                "name_or_scope": {
                    "value": "conv4",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_77": {
                "name_or_scope": {
                    "value": "conv5",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "squeezeDet/src/nn_skeleton.py": {
        "tensorflow": {
            "get_collection_24": {
                "variable": {
                    "value": "losses",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_47": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "initializer",
                            "Method Argument"
                        ],
                        [
                            "initializer",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Attribute"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ],
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "multiply_68": {
                "variable": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.nn.l2_loss(var)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "wd",
                    "type": "variable",
                    "possible_values": [
                        [
                            "wd",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "weight_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_81": {
                "variable": {
                    "value": "self.ph_image_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.IMAGE_HEIGHT, mc.IMAGE_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_87": {
                "variable": {
                    "value": "self.ph_input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "box_mask",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self.ph_box_delta_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "box_delta_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_93": {
                "variable": {
                    "value": "self.ph_box_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "box_input",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "self.ph_labels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, mc.CLASSES]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "labels",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_100": {
                "variable": {
                    "value": "self.ious",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros((mc.BATCH_SIZE, mc.ANCHORS))",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "iou",
                    "type": "str",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "FIFOQueue_105": {
                "variable": {
                    "value": "self.FIFOQueue",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "mc.QUEUE_CAPACITY",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtypes": {
                    "value": "[tf.float32, tf.float32, tf.float32, tf.float32, tf.float32]",
                    "type": "List",
                    "possible_values": []
                },
                "shapes": {
                    "value": "[[mc.IMAGE_HEIGHT, mc.IMAGE_WIDTH, 3], [mc.ANCHORS, 1], [mc.ANCHORS, 4], [mc.ANCHORS, 4], [mc.ANCHORS, mc.CLASSES]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_122": {
                "variable": {
                    "value": "(self.image_input, self.input_mask, self.box_delta_input, self.box_input, self.labels)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self.FIFOQueue.dequeue()",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "capacity": {
                    "value": "mc.QUEUE_CAPACITY",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "add_n_327": {
                "variable": {
                    "value": "self.loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tf.get_collection('losses')",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "total_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Variable_333": {
                "variable": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "global_step",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exponential_decay_334": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "mc.LEARNING_RATE",
                    "type": "Attribute",
                    "possible_values": []
                },
                "global_step": {
                    "value": "self.global_step",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_steps": {
                    "value": "mc.DECAY_STEPS",
                    "type": "Attribute",
                    "possible_values": []
                },
                "decay_rate": {
                    "value": "mc.LR_DECAY_FACTOR",
                    "type": "Attribute",
                    "possible_values": []
                },
                "staircase": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MomentumOptimizer_344": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(mc.LEARNING_RATE, self.global_step, mc.DECAY_STEPS, mc.LR_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                },
                "momentum": {
                    "value": "mc.MOMENTUM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_366": {
                "variable": {
                    "value": "self.image_to_show",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, mc.IMAGE_HEIGHT, mc.IMAGE_WIDTH, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "image_to_show",
                    "type": "str",
                    "possible_values": []
                }
            },
            "image_370": {
                "variable": {
                    "value": "self.viz_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "sample_detection_results",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "self.image_to_show",
                    "type": "Attribute",
                    "possible_values": []
                },
                "collections": {
                    "value": "image_summary",
                    "type": "str",
                    "possible_values": []
                },
                "max_outputs": {
                    "value": "mc.BATCH_SIZE",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_29": {
                "name": {
                    "value": "l.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": [
                        [
                            "losses + [total_loss]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "add_to_collection_69": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(tf.nn.l2_loss(var), wd, name='weight_loss')",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_151": {
                "variable": {
                    "value": "self.pred_class_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "tf.nn.softmax(tf.reshape(preds[:, :, :, :num_class_probs], [-1, mc.CLASSES]))",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, mc.CLASSES]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_class_probs",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sigmoid_164": {
                "variable": {
                    "value": "self.pred_conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reshape(preds[:, :, :, num_class_probs:num_confidence_scores], [mc.BATCH_SIZE, mc.ANCHORS])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "pred_confidence_score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_173": {
                "variable": {
                    "value": "self.pred_box_delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensor": {
                    "value": "preds[:, :, :, num_confidence_scores:]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_delta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_180": {
                "variable": {
                    "value": "self.num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "num_objects",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_274": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.pred_class_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.reshape(self.pred_conf, [mc.BATCH_SIZE, mc.ANCHORS, 1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "final_class_prob",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_max_282": {
                "variable": {
                    "value": "self.det_probs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.pred_class_probs, tf.reshape(self.pred_conf, [mc.BATCH_SIZE, mc.ANCHORS, 1]), name='final_class_prob')",
                            "Call"
                        ],
                        [
                            "probs[order]",
                            "Subscript"
                        ],
                        [
                            "probs[filtered_idx]",
                            "Subscript"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "score",
                    "type": "str",
                    "possible_values": []
                }
            },
            "argmax_283": {
                "variable": {
                    "value": "self.det_class",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(self.pred_class_probs, tf.reshape(self.pred_conf, [mc.BATCH_SIZE, mc.ANCHORS, 1]), name='final_class_prob')",
                            "Call"
                        ],
                        [
                            "probs[order]",
                            "Subscript"
                        ],
                        [
                            "probs[filtered_idx]",
                            "Subscript"
                        ],
                        [
                            "probs",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "name": {
                    "value": "class_idx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truediv_292": {
                "variable": {
                    "value": "self.class_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum((self.labels * -tf.log(self.pred_class_probs + mc.EPSILON) + (1 - self.labels) * -tf.log(1 - self.pred_class_probs + mc.EPSILON)) * self.input_mask * mc.LOSS_COEF_CLASS)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "class_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_303": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_304": {
                "variable": {
                    "value": "self.conf_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reduce_sum(tf.square(self.ious - self.pred_conf) * (input_mask * mc.LOSS_COEF_CONF_POS / self.num_objects + (1 - input_mask) * mc.LOSS_COEF_CONF_NEG / (mc.ANCHORS - self.num_objects)), reduction_indices=[1])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "confidence_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "truediv_317": {
                "variable": {
                    "value": "self.bbox_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.reduce_sum(mc.LOSS_COEF_BBOX * tf.square(self.input_mask * (self.pred_box_delta - self.box_delta_input)))",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "self.num_objects",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "scalar_340": {
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.exponential_decay(mc.LEARNING_RATE, self.global_step, mc.DECAY_STEPS, mc.LR_DECAY_FACTOR, staircase=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "trainable_variables_353": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_op_361": {
                "variable": {
                    "value": "self.train_op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_441": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('kernels', shape=[size, size, int(channels), filters], wd=mc.WEIGHT_DECAY, initializer=kernel_val, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('kernels', shape=[size, size, int(channels), filters], wd=mc.WEIGHT_DECAY, initializer=kernel_init, trainable=not freeze)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "convolution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "batch_normalization_447": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding=padding, name='convolution')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(conv, mean=mean, variance=var, offset=beta, scale=gamma, variance_epsilon=mc.BATCH_NORM_EPSILON, name='batch_norm')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding=padding, name='convolution')",
                            "Call"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_device('mean', [filters], mean_val, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=initializer, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_variable_on_device(name, shape, initializer, trainable)",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "grads_vars",
                            "variable"
                        ],
                        [
                            "_variable_on_device('var', [filters], var_val, trainable=False)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_device('beta', [filters], beta_val, trainable=not freeze)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_device('gamma', [filters], gamma_val, trainable=not freeze)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "mc.BATCH_NORM_EPSILON",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_norm",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_539": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "kernel",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('kernels', shape=[size, size, int(channels), filters], wd=mc.WEIGHT_DECAY, initializer=kernel_val, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_with_weight_decay('kernels', shape=[size, size, int(channels), filters], wd=mc.WEIGHT_DECAY, initializer=kernel_init, trainable=not freeze)",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "convolution",
                    "type": "str",
                    "possible_values": []
                }
            },
            "bias_add_542": {
                "variable": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding=padding, name='convolution')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(conv, mean=mean, variance=var, offset=beta, scale=gamma, variance_epsilon=mc.BATCH_NORM_EPSILON, name='batch_norm')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding=padding, name='convolution')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_device('biases', [filters], bias_val, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_on_device('biases', [filters], bias_init, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_on_device('biases', [hiddens], bias_init)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bias_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "max_pool_580": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksize": {
                    "value": "[1, size, size, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ],
                        [
                            "'SAME'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "bias_add_680": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "tf.matmul(inputs, weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_device('biases', [filters], bias_val, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_on_device('biases', [filters], bias_init, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_on_device('biases', [hiddens], bias_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_68": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=initializer, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_variable_on_device(name, shape, initializer, trainable)",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "grads_vars",
                            "variable"
                        ],
                        [
                            "_variable_on_device('var', [filters], var_val, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "variable_scope_146": {
                "name_or_scope": {
                    "value": "interpret_output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_182": {
                "name_or_scope": {
                    "value": "bbox",
                    "type": "str",
                    "possible_values": []
                }
            },
            "unstack_184": {
                "variable": {
                    "value": "(delta_x, delta_y, delta_w, delta_h)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "value": {
                    "value": "self.pred_box_delta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "identity_192": {
                "variable": {
                    "value": "box_center_x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_x + delta_x * anchor_w",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_cx",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_194": {
                "variable": {
                    "value": "box_center_y",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_y + delta_y * anchor_h",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_cy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_196": {
                "variable": {
                    "value": "box_width",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_w * util.safe_exp(delta_w, mc.EXP_THRESH)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_width",
                    "type": "str",
                    "possible_values": []
                }
            },
            "identity_199": {
                "variable": {
                    "value": "box_height",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_h * util.safe_exp(delta_h, mc.EXP_THRESH)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_height",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_219": {
                "variable": {
                    "value": "xmins",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, xmins)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mc.IMAGE_WIDTH - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_xmin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_223": {
                "variable": {
                    "value": "ymins",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.maximum(0.0, ymins)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "mc.IMAGE_HEIGHT - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_ymin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_227": {
                "variable": {
                    "value": "xmaxs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(mc.IMAGE_WIDTH - 1.0, xmaxs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_xmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_231": {
                "variable": {
                    "value": "ymaxs",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.minimum(mc.IMAGE_HEIGHT - 1.0, ymaxs)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox_ymax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "transpose_235": {
                "variable": {
                    "value": "self.det_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(util.bbox_transform_inv([xmins, ymins, xmaxs, ymaxs]))",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "(1, 2, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "bbox",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_240": {
                "name_or_scope": {
                    "value": "IOU",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_271": {
                "name_or_scope": {
                    "value": "probability",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_289": {
                "name_or_scope": {
                    "value": "class_regression",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_300": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.class_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_302": {
                "name_or_scope": {
                    "value": "confidence_score_regression",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_313": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.conf_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_314": {
                "name": {
                    "value": "mean iou",
                    "type": "str",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_sum(self.ious) / self.num_objects",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_316": {
                "name_or_scope": {
                    "value": "bounding_box_regression",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_to_collection_324": {
                "name": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "self.bbox_loss",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_collection_327": {
                "key": {
                    "value": "losses",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_345": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_347": {
                "name_or_scope": {
                    "value": "clip_gradient",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_354": {
                "name": {
                    "value": "var.op.name",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable(name, initializer=initializer, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(name, shape, initializer=initializer, dtype=dtype, trainable=trainable)",
                            "Call"
                        ],
                        [
                            "_variable_on_device(name, shape, initializer, trainable)",
                            "Call"
                        ],
                        [
                            "tf.trainable_variables()",
                            "Call"
                        ],
                        [
                            "grads_vars",
                            "variable"
                        ],
                        [
                            "_variable_on_device('var', [filters], var_val, trainable=False)",
                            "Call"
                        ]
                    ]
                }
            },
            "control_dependencies_360": {
                "control_inputs": {
                    "value": "[apply_gradient_op]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_401": {
                "name_or_scope": {
                    "value": "conv_param_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "conv_param_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_414": {
                "variable": {
                    "value": "kernel_val",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_418": {
                "variable": {
                    "value": "mean_val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_419": {
                "variable": {
                    "value": "var_val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_420": {
                "variable": {
                    "value": "gamma_val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_421": {
                "variable": {
                    "value": "beta_val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "bias_add_445": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding=padding, name='convolution')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(conv, mean=mean, variance=var, offset=beta, scale=gamma, variance_epsilon=mc.BATCH_NORM_EPSILON, name='batch_norm')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding=padding, name='convolution')",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "biases",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_on_device('biases', [filters], bias_val, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_on_device('biases', [filters], bias_init, trainable=not freeze)",
                            "Call"
                        ],
                        [
                            "_variable_on_device('biases', [hiddens], bias_init)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "bias_add",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_513": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_name",
                            "Method Argument"
                        ],
                        [
                            "layer_name",
                            "Method Argument"
                        ],
                        [
                            "layer_name",
                            "Method Argument"
                        ],
                        [
                            "layer_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_521": {
                "variable": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(cw[conv_param_name][0], [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(cw[layer_name][0], [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "cw[layer_name][0]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(kernel_val, (1, 0))",
                            "Call"
                        ],
                        [
                            "np.reshape(np.transpose(np.reshape(kernel_val, (hiddens, input_shape[3], input_shape[1], input_shape[2])), (2, 3, 1, 0)), (dim, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_522": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bias_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cw[conv_param_name][1]",
                            "Subscript"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "cw[layer_name][1]",
                            "Subscript"
                        ],
                        [
                            "cw[layer_name][1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_545": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "conv_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(conv, biases, name='bias_add')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_579": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_name",
                            "Method Argument"
                        ],
                        [
                            "layer_name",
                            "Method Argument"
                        ],
                        [
                            "layer_name",
                            "Method Argument"
                        ],
                        [
                            "layer_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_621": {
                "name_or_scope": {
                    "value": "layer_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "layer_name",
                            "Method Argument"
                        ],
                        [
                            "layer_name",
                            "Method Argument"
                        ],
                        [
                            "layer_name",
                            "Method Argument"
                        ],
                        [
                            "layer_name",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_625": {
                "variable": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_664": {
                "variable": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "kernel_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.transpose(cw[conv_param_name][0], [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "tf.truncated_normal_initializer(stddev=stddev, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "np.transpose(cw[layer_name][0], [2, 3, 1, 0])",
                            "Call"
                        ],
                        [
                            "cw[layer_name][0]",
                            "Subscript"
                        ],
                        [
                            "np.transpose(kernel_val, (1, 0))",
                            "Call"
                        ],
                        [
                            "np.reshape(np.transpose(np.reshape(kernel_val, (hiddens, input_shape[3], input_shape[1], input_shape[2])), (2, 3, 1, 0)), (dim, -1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_665": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "bias_val",
                    "type": "variable",
                    "possible_values": [
                        [
                            "cw[conv_param_name][1]",
                            "Subscript"
                        ],
                        [
                            "tf.constant_initializer(0.0)",
                            "Call"
                        ],
                        [
                            "cw[layer_name][1]",
                            "Subscript"
                        ],
                        [
                            "cw[layer_name][1]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "relu_682": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.bias_add(tf.matmul(inputs, weights), biases)",
                            "Call"
                        ],
                        [
                            "tf.nn.relu(outputs, 'relu')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_745": {
                "name_or_scope": {
                    "value": "activation_summary",
                    "type": "str",
                    "possible_values": []
                }
            },
            "histogram_746": {
                "name": {
                    "value": "'activation_summary/' + layer_name",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "scalar_748": {
                "name": {
                    "value": "activation_summary/ + layer_name + /sparsity",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.nn.zero_fraction(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_750": {
                "name": {
                    "value": "activation_summary/ + layer_name + /average",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_mean(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_752": {
                "name": {
                    "value": "activation_summary/ + layer_name + /max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_max(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "scalar_754": {
                "name": {
                    "value": "activation_summary/ + layer_name + /min",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "tf.reduce_min(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_152": {
                "logits": {
                    "value": "tf.reshape(preds[:, :, :, :num_class_probs], [-1, mc.CLASSES])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_165": {
                "tensor": {
                    "value": "preds[:, :, :, num_class_probs:num_confidence_scores]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "variable_scope_183": {
                "name_or_scope": {
                    "value": "stretching",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_213": {
                "name_or_scope": {
                    "value": "trimming",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_243": {
                "variable": {
                    "value": "xmin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "xmin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_244": {
                "variable": {
                    "value": "ymin",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "ymin",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_245": {
                "variable": {
                    "value": "xmax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "xmax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "minimum_246": {
                "variable": {
                    "value": "ymax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "ymax",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_248": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmax - xmin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_w",
                    "type": "str",
                    "possible_values": []
                }
            },
            "maximum_249": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "ymax - ymin",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "inter_h",
                    "type": "str",
                    "possible_values": []
                }
            },
            "multiply_250": {
                "variable": {
                    "value": "intersection",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, xmax - xmin, name='inter_w')",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.maximum(0.0, ymax - ymin, name='inter_h')",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "intersection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_253": {
                "variable": {
                    "value": "w1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box1[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "w1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_254": {
                "variable": {
                    "value": "h1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box1[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box1[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "h1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_255": {
                "variable": {
                    "value": "w2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box2[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "w2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "subtract_256": {
                "variable": {
                    "value": "h2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "box2[3]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "box2[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "name": {
                    "value": "h2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_276": {
                "tensor": {
                    "value": "self.pred_conf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_293": {
                "input_tensor": {
                    "value": "(self.labels * -tf.log(self.pred_class_probs + mc.EPSILON) + (1 - self.labels) * -tf.log(1 - self.pred_class_probs + mc.EPSILON)) * self.input_mask * mc.LOSS_COEF_CLASS",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_305": {
                "input_tensor": {
                    "value": "tf.square(self.ious - self.pred_conf) * (input_mask * mc.LOSS_COEF_CONF_POS / self.num_objects + (1 - input_mask) * mc.LOSS_COEF_CONF_NEG / (mc.ANCHORS - self.num_objects))",
                    "type": "BinOp",
                    "possible_values": []
                },
                "reduction_indices": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_318": {
                "input_tensor": {
                    "value": "mc.LOSS_COEF_BBOX * tf.square(self.input_mask * (self.pred_box_delta - self.box_delta_input))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "histogram_358": {
                "name": {
                    "value": "var.op.name + '/gradients'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "data": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_vars",
                            "variable"
                        ]
                    ]
                }
            },
            "constant_initializer_417": {
                "variable": {
                    "value": "bias_val",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "relu_466": {
                "features": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding=padding, name='convolution')",
                            "Call"
                        ],
                        [
                            "tf.nn.bias_add(conv, biases, name='bias_add')",
                            "Call"
                        ],
                        [
                            "tf.nn.batch_normalization(conv, mean=mean, variance=var, offset=beta, scale=gamma, variance_epsilon=mc.BATCH_NORM_EPSILON, name='batch_norm')",
                            "Call"
                        ],
                        [
                            "tf.nn.conv2d(inputs, kernel, [1, stride, stride, 1], padding=padding, name='convolution')",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_initializer_525": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_527": {
                "variable": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_529": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_668": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_initializer_670": {
                "variable": {
                    "value": "kernel_init",
                    "type": "variable",
                    "possible_values": []
                },
                "stddev": {
                    "value": "stddev",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ],
                        [
                            "0.001",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_initializer_672": {
                "variable": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_680": {
                "a": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(inputs, [-1, dim])",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_variable_with_weight_decay('weights', shape=[dim, hiddens], wd=mc.WEIGHT_DECAY, initializer=kernel_init)",
                            "Call"
                        ]
                    ]
                }
            },
            "zero_fraction_749": {
                "value": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_mean_751": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_max_753": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_min_755": {
                "input_tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_153": {
                "tensor": {
                    "value": "preds[:, :, :, :num_class_probs]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, mc.CLASSES]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_220": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "xmins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.bbox_transform([box_center_x, box_center_y, box_width, box_height])",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.maximum(0.0, xmins), mc.IMAGE_WIDTH - 1.0, name='bbox_xmin')",
                            "Call"
                        ]
                    ]
                }
            },
            "maximum_224": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "ymins",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.bbox_transform([box_center_x, box_center_y, box_width, box_height])",
                            "Call"
                        ],
                        [
                            "tf.minimum(tf.maximum(0.0, ymins), mc.IMAGE_HEIGHT - 1.0, name='bbox_ymin')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_228": {
                "x": {
                    "value": "mc.IMAGE_WIDTH - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "xmaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.bbox_transform([box_center_x, box_center_y, box_width, box_height])",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(mc.IMAGE_WIDTH - 1.0, xmaxs), 0.0, name='bbox_xmax')",
                            "Call"
                        ]
                    ]
                }
            },
            "minimum_232": {
                "x": {
                    "value": "mc.IMAGE_HEIGHT - 1.0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "y": {
                    "value": "ymaxs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "util.bbox_transform([box_center_x, box_center_y, box_width, box_height])",
                            "Call"
                        ],
                        [
                            "tf.maximum(tf.minimum(mc.IMAGE_HEIGHT - 1.0, ymaxs), 0.0, name='bbox_ymax')",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_236": {
                "values": {
                    "value": "util.bbox_transform_inv([xmins, ymins, xmaxs, ymaxs])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_242": {
                "name_or_scope": {
                    "value": "intersection",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_252": {
                "name_or_scope": {
                    "value": "union",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_261": {
                "tensor": {
                    "value": "self.input_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[mc.BATCH_SIZE, mc.ANCHORS]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_sum_314": {
                "input_tensor": {
                    "value": "self.ious",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_by_norm_349": {
                "t": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "grads_vars",
                            "variable"
                        ]
                    ]
                },
                "clip_norm": {
                    "value": "mc.MAX_GRAD_NORM",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unstack_265": {
                "value": {
                    "value": "self.det_boxes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unstack_266": {
                "value": {
                    "value": "self.box_input",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_306": {
                "x": {
                    "value": "self.ious - self.pred_conf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_319": {
                "x": {
                    "value": "self.input_mask * (self.pred_box_delta - self.box_delta_input)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_294": {
                "x": {
                    "value": "self.pred_class_probs + mc.EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_295": {
                "x": {
                    "value": "1 - self.pred_class_probs + mc.EPSILON",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "squeezeDet/src/train.py": {
        "tensorflow": {}
    },
    "squeezeDet/src/utils/util.py": {
        "tensorflow": {
            "to_float_225": {
                "variable": {
                    "value": "lin_region",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "lin_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w > thresh",
                            "Compare"
                        ]
                    ]
                }
            },
            "exp_228": {
                "variable": {
                    "value": "exp_out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.where(lin_bool, tf.zeros_like(w), w)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_171": {
                "name_or_scope": {
                    "value": "bbox_transform",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_185": {
                "name_or_scope": {
                    "value": "bbox_transform_inv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_223": {
                "name_or_scope": {
                    "value": "safe_exponential",
                    "type": "str",
                    "possible_values": []
                }
            },
            "where_228": {
                "condition": {
                    "value": "lin_bool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "w > thresh",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "tf.zeros_like(w)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_228": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "xx2 - xx1",
                            "BinOp"
                        ],
                        [
                            "w",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "squeezedet.py": {
        "tensorflow": {
            "DEFINE_string_29": {
                "name": {
                    "value": "mode",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "image",
                    "type": "str",
                    "possible_values": []
                },
                "help": {
                    "value": "\"'image' or 'video'.\"",
                    "type": "str",
                    "possible_values": []
                }
            },
            "DEFINE_string_31": {
                "name": {
                    "value": "checkpoint",
                    "type": "str",
                    "possible_values": []
                },
                "default": {
                    "value": "str('/home/tommaso/Desktop/logs/SqueezeDet/train/model.ckpt-2000')",
                    "type": "Call",
                    "possible_values": []
                },
                "help": {
                    "value": "Path to the model parameter file.",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Saver_47": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "var_list": {
                    "value": "model.model_params",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Session_48": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf.ConfigProto(allow_soft_placement=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Graph_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConfigProto_48": {
                "allow_soft_placement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    }
}