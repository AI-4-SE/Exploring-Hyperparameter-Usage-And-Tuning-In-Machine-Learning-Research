{
    "datautils.py": {
        "sklearn": {
            "make_moons_51": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "int(num_examples * 1.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_52": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_58": {
                "variable": {
                    "value": "(unsupervised_idxs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(len(train_y))",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "supervised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "train_y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_test_split(x, y, train_size=num_examples, random_state=seed)",
                            "Call"
                        ],
                        [
                            "train_test_split(x, y, train_size=num_examples, random_state=seed)",
                            "Call"
                        ]
                    ]
                }
            },
            "make_circles_54": {
                "variable": {
                    "value": "(x, y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "n_samples": {
                    "value": "int(num_examples * 1.5)",
                    "type": "Call",
                    "possible_values": []
                },
                "noise": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                },
                "factor": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_55": {
                "variable": {
                    "value": "(train_x, test_x, train_y, test_y)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*arrays_1": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": []
                },
                "train_size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "train_test_split_90": {
                "variable": {
                    "value": "(idxs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(len(trainset))",
                    "type": "Call",
                    "possible_values": []
                },
                "train_size": {
                    "value": "num_examples",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "random_state": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "42",
                            "Method Argument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "utils.tonp(trainset.targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "train_test_split_98": {
                "variable": {
                    "value": "(unsupervised_idxs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "*arrays_0": {
                    "value": "np.arange(len(trainset.targets))",
                    "type": "Call",
                    "possible_values": []
                },
                "test_size": {
                    "value": "supervised",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "Method Argument"
                        ]
                    ]
                },
                "stratify": {
                    "value": "trainset.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_121": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root=data_root, train=False, download=True, transform=test_transform)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(test_x[..., None, None]), torch.LongTensor(test_y))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "test_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "test_bs",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "TensorDataset_70": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(train_x[..., None, None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_72": {
                "variable": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(test_x[..., None, None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_114": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root=data_root, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(train_x[..., None, None]), torch.LongTensor(train_y))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_bs",
                            "Method Argument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "shuffle",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_118": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torchvision.datasets.MNIST(root=data_root, train=True, download=True, transform=train_transform)",
                            "Call"
                        ],
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(train_x[..., None, None]), torch.LongTensor(train_y))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "train_bs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "train_bs",
                            "Method Argument"
                        ]
                    ]
                },
                "sampler": {
                    "value": "sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "NoneType"
                        ],
                        [
                            "ImbalancedDatasetSampler(trainset, sup_weight=sup_sample_weight)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "nw",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_like_37": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "datasets.make_moons(n_samples=int(num_examples * 1.5), noise=0.1, random_state=seed)",
                            "Call"
                        ],
                        [
                            "datasets.make_circles(n_samples=int(num_examples * 1.5), noise=0.1, factor=0.2, random_state=seed)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_63": {
                "obj": {
                    "value": "{'train_x': train_x, 'train_y': train_y, 'test_x': test_x, 'test_y': test_y}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(logs_root, 'data.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "multinomial_175": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "self.num_samples",
                    "type": "Attribute",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "get-embeddings.py": {
        "sklearn": {},
        "torch": {
            "device_88": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Categorical_108": {
                "variable": {
                    "value": "yprior",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "torch.zeros((args.ssl_nclasses,)).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_111": {
                "variable": {
                    "value": "ssl_flow",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "ssl_flow.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_116": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "flow.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_92": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_93": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_99": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_100": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_25": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prior_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.prior.log_prob_full(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_25": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_170": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_88": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_108": {
                "*size": {
                    "value": "(args.ssl_nclasses,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_121": {
                "f": {
                    "value": "os.path.join(args.pretrained, 'model.torch')",
                    "type": "Call",
                    "possible_values": []
                },
                "map_location": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "utils.py": {
        "sklearn": {
            "MiniBatchKMeans_149": {
                "variable": {
                    "value": "kmeans",
                    "type": "variable",
                    "possible_values": []
                },
                "n_clusters": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k in range(k)",
                            "Call"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "dataloader.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "numel_82": {
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parameters",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "get-embeddings-unsup.py": {
        "torch": {
            "device_60": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_85": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "flow.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "manual_seed_70": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_71": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_77": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_101": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_89": {
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/coupling.py": {
        "torch": {
            "Parameter_57": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sigmoid_108": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_123": {
                "variable": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Embedding_202": {
                "variable": {
                    "value": "self.factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "nfactors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "nfactors",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_12": {
                "input": {
                    "value": "scale + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_27": {
                "input": {
                    "value": "scale + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.softplus(-s - 2.0)",
                            "UnaryOp"
                        ],
                        [
                            "logs * (1 - self.mask)",
                            "BinOp"
                        ],
                        [
                            "-F.softplus(-s - 2.0)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_113": {
                "input": {
                    "value": "logs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-F.softplus(-s - 2.0)",
                            "UnaryOp"
                        ],
                        [
                            "logs * (1 - self.mask)",
                            "BinOp"
                        ],
                        [
                            "-F.softplus(-s - 2.0)",
                            "UnaryOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_16": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x2).split(x1.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scale + 2.0) + eps",
                            "BinOp"
                        ],
                        [
                            "net(x2).split(x1.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scale + 2.0) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_16": {
                "input": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_18": {
                "input": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x2).split(x1.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scale + 2.0) + eps",
                            "BinOp"
                        ],
                        [
                            "net(x2).split(x1.size(1), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scale + 2.0) + eps",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_18": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softplus_70": {
                "input": {
                    "value": "-s - 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_83": {
                "input": {
                    "value": "s + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_106": {
                "input": {
                    "value": "-s - 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_152": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_162": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_180": {
                "tensors": {
                    "value": "[x2, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "[x1, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_183": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_193": {
                "tensors": {
                    "value": "[x1, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_194": {
                "tensors": {
                    "value": "[x2, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_196": {
                "tensors": {
                    "value": "[x1, x2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_105": {
                "tensors": {
                    "value": "[x1, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_122": {
                "tensors": {
                    "value": "[x1, y]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "models/distributions.py": {
        "torch": {
            "cholesky_112": {
                "variable": {
                    "value": "self.cov_factors[k].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(covf, covf.t())",
                            "Call"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_150": {
                "variable": {
                    "value": "self.logsigma",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((dim,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_151": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((dim,))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "softplus_154": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.logsigma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_186": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(k, dim) * np.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_187": {
                "variable": {
                    "value": "self.cov_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "covariances",
                    "type": "variable",
                    "possible_values": [
                        [
                            "covariances",
                            "Call"
                        ],
                        [
                            "torch.zeros((k, dim))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_188": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([1.0 / k] * k)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_207": {
                "variable": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.get_logpi()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_225": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.cov_factors",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rand_83": {
                "variable": {
                    "value": "covars",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.base_ditributions)",
                            "Call"
                        ],
                        [
                            "np.random.choice(len(self.weights), p=utils.tonp(self.weights))",
                            "Call"
                        ],
                        [
                            "k in range(self.k)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_84": {
                "variable": {
                    "value": "covars",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(k, dim, dim)",
                            "Call"
                        ],
                        [
                            "torch.matmul(covars, covars.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "covars.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ParameterList_85": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(m) for m in torch.randn(k, dim)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_86": {
                "variable": {
                    "value": "self.cov_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.cholesky(cov)) for cov in covars]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_87": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0 / k] * k)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ParameterList_90": {
                "variable": {
                    "value": "self.means",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(m) for m in means]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ParameterList_91": {
                "variable": {
                    "value": "self.cov_factors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "parameters": {
                    "value": "[nn.Parameter(torch.cholesky(cov)) for cov in covariances]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Parameter_92": {
                "variable": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.FloatTensor([1.0 / k] * k)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_107": {
                "variable": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "torch.diag(covf)",
                            "Call"
                        ],
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((self.sn_dim,)).to(covf.device), covf])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "covf.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_125": {
                "tensors": {
                    "value": "[torch.mm(covf, covf.t()) for covf in self.cov_factors]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "log_softmax_195": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_200": {
                "variable": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros((self.sn_dim,)).to(m.device), m]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_220": {
                "tensors": {
                    "value": "[self.log_prob(x, k=k) for k in range(self.k)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "transpose_220": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_237": {
                "variable": {
                    "value": "self.means.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "means",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.randn(k, dim) * np.sqrt(2)",
                            "BinOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_239": {
                "variable": {
                    "value": "self.cov_factors.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "covars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(k, dim, dim)",
                            "Call"
                        ],
                        [
                            "torch.matmul(covars, covars.transpose(1, 2))",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_29": {
                "variable": {
                    "value": "_t",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[ens, logp]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "logsumexp_30": {
                "variable": {
                    "value": "ens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_t",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack([ens, logp])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_99": {
                "input": {
                    "value": "self.weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_106": {
                "variable": {
                    "value": "covf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "torch.diag(covf)",
                            "Call"
                        ],
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((self.sn_dim,)).to(covf.device), covf])",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_150": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_151": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_183": {
                "variable": {
                    "value": "covariances",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(k, dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "covf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros((self.sn_dim,)).to(covf.device), covf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "exp_204": {
                "variable": {
                    "value": "scale",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covf * 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_18": {
                "*size": {
                    "value": "(k,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_23": {
                "input": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.base_ditributions, self.weights)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_108": {
                "loc": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((self.sn_dim,)).to(m.device), m])",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(covf, covf.t())",
                            "Call"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_116": {
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.get_logpi())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "mm_125": {
                "input": {
                    "value": "covf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "torch.diag(covf)",
                            "Call"
                        ],
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((self.sn_dim,)).to(covf.device), covf])",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "covf.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_133": {
                "input": {
                    "value": "p.weights[k]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_180": {
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.base_ditributions)",
                            "Call"
                        ],
                        [
                            "np.random.choice(len(self.weights), p=utils.tonp(self.weights))",
                            "Call"
                        ],
                        [
                            "k in range(self.k)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_235": {
                "input": {
                    "value": "pi",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.exp(self.get_logpi())",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_54": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_67": {
                "variable": {
                    "value": "res[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "res[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_85": {
                "data": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((self.sn_dim,)).to(m.device), m])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_86": {
                "data": {
                    "value": "torch.cholesky(cov)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_90": {
                "data": {
                    "value": "m",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "zip(self.means, self.cov_factors)",
                            "Call"
                        ],
                        [
                            "torch.cat([torch.zeros((self.sn_dim,)).to(m.device), m])",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_91": {
                "data": {
                    "value": "torch.cholesky(cov)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_200": {
                "*size": {
                    "value": "(self.sn_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_52": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "stack_71": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "randn_85": {
                "*size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "len(self.base_ditributions)",
                            "Call"
                        ],
                        [
                            "np.random.choice(len(self.weights), p=utils.tonp(self.weights))",
                            "Call"
                        ],
                        [
                            "k in range(self.k)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "k",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "out": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cholesky_86": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(covf, covf.t())",
                            "Call"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cholesky_91": {
                "input": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.mm(covf, covf.t())",
                            "Call"
                        ],
                        [
                            "cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_202": {
                "*size": {
                    "value": "(self.sn_dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "stack_69": {
                "tensors": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "models/flows.py": {
        "torch": {
            "Sequential_199": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, channels, 1, padding=0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_215": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_233": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "variable": {
                    "value": "self.modules_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[DummyCond(ToLogits()) if cond else ToLogits()]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[ToLogits(), convf(1), MaskedCouplingLayer([1, 28, 28], 'checkerboard0', get_net(1, 64)), ActNorm(1), convf(1), MaskedCouplingLayer([1, 28, 28], 'checkerboard1', get_net(1, 64)), ActNorm(1), convf(1), MaskedCouplingLayer([1, 28, 28], 'checkerboard0', get_net(1, 64)), ActNorm(1), SpaceToDepth(2), convf(4), CouplingLayer(lambda : get_net(2, 64)), ActNorm(4), convf(4), CouplingLayer(lambda : get_net(2, 64)), ActNorm(4), FactorOut(), convf(2), MaskedCouplingLayer([2, 14, 14], 'checkerboard0', get_net(2, 64)), ActNorm(2), convf(2), MaskedCouplingLayer([2, 14, 14], 'checkerboard1', get_net(2, 64)), ActNorm(2), convf(2), MaskedCouplingLayer([2, 14, 14], 'checkerboard0', get_net(2, 64)), ActNorm(2), SpaceToDepth(2), convf(8), CouplingLayer(lambda : get_net(4, 64)), ActNorm(8), convf(8), CouplingLayer(lambda : get_net(4, 64)), ActNorm(8), FactorOut(), convf(4), MaskedCouplingLayer([4, 7, 7], 'checkerboard0', get_net(4, 64)), ActNorm(4), convf(4), MaskedCouplingLayer([4, 7, 7], 'checkerboard1', get_net(4, 64)), ActNorm(4), convf(4), MaskedCouplingLayer([4, 7, 7], 'checkerboard0', get_net(4, 64)), ActNorm(4), convf(4), CouplingLayer(lambda : get_net(2, 64)), ActNorm(4), convf(4), CouplingLayer(lambda : get_net(2, 64)), ActNorm(4)]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "modules + [nn.ReLU(), nn.Conv2d(channels, channels, 1)]",
                            "BinOp"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "modules",
                            "Method Argument"
                        ],
                        [
                            "modules",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_22": {
                "variable": {
                    "value": "log_det_jac",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, x.reshape((x.shape[0], -1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_46": {
                "variable": {
                    "value": "log_det_jac",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.shape[0],)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_53": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, x.reshape((x.shape[0], -1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Embedding_70": {
                "variable": {
                    "value": "self.embeddings",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "num_cat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "num_cat",
                            "Method Argument"
                        ]
                    ]
                },
                "embedding_dim": {
                    "value": "emb_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ],
                        [
                            "emb_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_73": {
                "variable": {
                    "value": "l",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.embeddings.weight.data.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Sequential_169": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_190": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Sequential_393": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_200": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_206": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_216": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_217": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_223": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_224": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_234": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_235": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_245": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_246": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_254": {
                "*args": {
                    "value": "nn.Conv2d(in_channels, hidden_channels, k, padding=int(k == 3))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_478": {
                "*args": {
                    "value": "nn.Conv2d(1, 64, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logsumexp_143": {
                "input": {
                    "value": "logp_joint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_prob_full(x)",
                            "Call"
                        ],
                        [
                            "self.log_prob_full(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_159": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_160": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_166": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_167": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_182": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_183": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_188": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_255": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "k in range(k_factor)",
                            "Call"
                        ],
                        [
                            "k in range(k_factor)",
                            "Call"
                        ],
                        [
                            "k in range(k_factor)",
                            "Call"
                        ],
                        [
                            "3",
                            "Method Argument"
                        ]
                    ]
                },
                "padding": {
                    "value": "int(k == 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ReLU_256": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_257": {
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_258": {
                "inplace": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_394": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_395": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "1",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "channels - channels % 2",
                            "BinOp"
                        ],
                        [
                            "in_channels",
                            "variable"
                        ],
                        [
                            "1",
                            "int"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_401": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_402": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_479": {
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_480": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_481": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_482": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_483": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logsumexp_147": {
                "input": {
                    "value": "logp_joint",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.log_prob_full(x)",
                            "Call"
                        ],
                        [
                            "self.log_prob_full(x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "(x.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_50": {
                "*size": {
                    "value": "(x.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "models/invertconv.py": {
        "torch": {
            "cat_76": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.ones(size - v.size(0), device=v.device), v]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_77": {
                "variable": {
                    "value": "I",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size or v.size(0)",
                            "BoolOp"
                        ],
                        [
                            "size or max((v.size(0) for v in vectors))",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ger_78": {
                "variable": {
                    "value": "outer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.ones(size - v.size(0), device=v.device), v])",
                            "Call"
                        ],
                        [
                            "vectors",
                            "variable"
                        ],
                        [
                            "self.vectors",
                            "Attribute"
                        ],
                        [
                            "v / (torch.norm(v) + 1e-16)",
                            "BinOp"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "vec2": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.ones(size - v.size(0), device=v.device), v])",
                            "Call"
                        ],
                        [
                            "vectors",
                            "variable"
                        ],
                        [
                            "self.vectors",
                            "Attribute"
                        ],
                        [
                            "v / (torch.norm(v) + 1e-16)",
                            "BinOp"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "eye_98": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "size or v.size(0)",
                            "BoolOp"
                        ],
                        [
                            "size or max((v.size(0) for v in vectors))",
                            "BoolOp"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vectors[0].device",
                            "Attribute"
                        ]
                    ]
                }
            },
            "Parameter_43": {
                "variable": {
                    "value": "self.W",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(features, features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "eye_48": {
                "variable": {
                    "value": "self.W.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_100": {
                "variable": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(size, device=device)",
                            "Call"
                        ],
                        [
                            "torch.mm(Q, householder_matrix(v, size=size))",
                            "Call"
                        ],
                        [
                            "super()._get_w()",
                            "Call"
                        ],
                        [
                            "super()._get_w().to(self.s_factor)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "householder_matrix(v, size=size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_152": {
                "variable": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((features, features))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_54": {
                "input": {
                    "value": "self.W.double()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dot_79": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.ones(size - v.size(0), device=v.device), v])",
                            "Call"
                        ],
                        [
                            "vectors",
                            "variable"
                        ],
                        [
                            "self.vectors",
                            "Attribute"
                        ],
                        [
                            "v / (torch.norm(v) + 1e-16)",
                            "BinOp"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.ones(size - v.size(0), device=v.device), v])",
                            "Call"
                        ],
                        [
                            "vectors",
                            "variable"
                        ],
                        [
                            "self.vectors",
                            "Attribute"
                        ],
                        [
                            "v / (torch.norm(v) + 1e-16)",
                            "BinOp"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "vec",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(f)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.s_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((features,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_157": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(self.s_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_161": {
                "input": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "diag_173": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softplus(self.s_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_177": {
                "input": {
                    "value": "self.r",
                    "type": "Attribute",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_26": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_w().to(x)",
                            "Call"
                        ],
                        [
                            "W.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self._get_w_inv()",
                            "Call"
                        ],
                        [
                            "W.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_31": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "W",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._get_w().to(x)",
                            "Call"
                        ],
                        [
                            "W.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ],
                        [
                            "self._get_w_inv()",
                            "Call"
                        ],
                        [
                            "W.unsqueeze(-1).unsqueeze(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_76": {
                "*size": {
                    "value": "size - v.size(0)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "device": {
                    "value": "v.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_148": {
                "variable": {
                    "value": "self.s_factor",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones((features,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "*size": {
                    "value": "(features, features)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "diag_159": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.s_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_175": {
                "variable": {
                    "value": "R",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.s_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "inverse_178": {
                "input": {
                    "value": "R.double()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "no_grad_123": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "(features,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softplus_157": {
                "input": {
                    "value": "self.s_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_166": {
                "input": {
                    "value": "F.softplus(self.s_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "softplus_173": {
                "input": {
                    "value": "self.s_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "norm_124": {
                "input": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([torch.ones(size - v.size(0), device=v.device), v])",
                            "Call"
                        ],
                        [
                            "vectors",
                            "variable"
                        ],
                        [
                            "self.vectors",
                            "Attribute"
                        ],
                        [
                            "v / (torch.norm(v) + 1e-16)",
                            "BinOp"
                        ],
                        [
                            "v",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_148": {
                "*size": {
                    "value": "(features,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "log_168": {
                "input": {
                    "value": "torch.abs(self.s_factor)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "slogdet_57": {
                "input": {
                    "value": "self.W.double()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_166": {
                "input": {
                    "value": "self.s_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_168": {
                "input": {
                    "value": "self.s_factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/normalization.py": {
        "torch": {
            "Parameter_16": {
                "variable": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_17": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(num_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_18": {
                "variable": {
                    "value": "self.requires_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ByteTensor(1)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_44": {
                "input": {
                    "value": "self.logs.view(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_32": {
                "input": {
                    "value": "torch.sqrt(var) + 1e-06",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_53": {
                "input": {
                    "value": "-self.logs.view(*size)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_59": {
                "input": {
                    "value": "-self.logs.view(*size)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_32": {
                "input": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_.var(1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/realnvp.py": {
        "torch": {
            "from_numpy_74": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array([[0, 1], [1, 0]] * 3).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_89": {
                "variable": {
                    "value": "covars",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "args.gmm_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_90": {
                "variable": {
                    "value": "covars",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covars",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.rand(args.gmm_k, 2, 2)",
                            "Call"
                        ],
                        [
                            "torch.matmul(covars, covars.transpose(1, 2))",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "covars.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_15": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(np.array([[0, 1], [1, 0]] * 3).astype(np.float32))",
                            "Call"
                        ],
                        [
                            "masks",
                            "Method Argument"
                        ]
                    ]
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ModuleList_16": {
                "variable": {
                    "value": "self.t",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nett() for _ in range(len(masks))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_17": {
                "variable": {
                    "value": "self.s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nets() for _ in range(len(masks))]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_71": {
                "variable": {
                    "value": "prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "torch.zeros(2).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "torch.eye(2).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_100": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones((1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_162": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*modules",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_171": {
                "variable": {
                    "value": "self.scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor([1.0])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_204": {
                "variable": {
                    "value": "self.mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "mask[None]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_232": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(w_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "conv2d_235": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.g(z)",
                            "Call"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x - t) * torch.exp(-s)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, self.weight[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, torch.inverse(self.weight)[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "m(x, log_det_jac, z)",
                            "Call"
                        ],
                        [
                            "z[:, self.latent_len:].view([z.shape[0]] + self.x_shape)",
                            "Call"
                        ],
                        [
                            "m.g(x, z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "self.f(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.net1(x), self.net2(x)], dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "self.weight[:, :, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_240": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.g(z)",
                            "Call"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x - t) * torch.exp(-s)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, self.weight[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, torch.inverse(self.weight)[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "m(x, log_det_jac, z)",
                            "Call"
                        ],
                        [
                            "z[:, self.latent_len:].view([z.shape[0]] + self.x_shape)",
                            "Call"
                        ],
                        [
                            "m.g(x, z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "self.f(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.net1(x), self.net2(x)], dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "torch.inverse(self.weight)[:, :, None, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_247": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones((channels,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_248": {
                "variable": {
                    "value": "self.id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(channels)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "conv2d_254": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.g(z)",
                            "Call"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x - t) * torch.exp(-s)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, self.weight[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, torch.inverse(self.weight)[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "m(x, log_det_jac, z)",
                            "Call"
                        ],
                        [
                            "z[:, self.latent_len:].view([z.shape[0]] + self.x_shape)",
                            "Call"
                        ],
                        [
                            "m.g(x, z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "self.f(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.net1(x), self.net2(x)], dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w[..., None, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "conv2d_261": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.g(z)",
                            "Call"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x - t) * torch.exp(-s)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, self.weight[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, torch.inverse(self.weight)[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "m(x, log_det_jac, z)",
                            "Call"
                        ],
                        [
                            "z[:, self.latent_len:].view([z.shape[0]] + self.x_shape)",
                            "Call"
                        ],
                        [
                            "m.g(x, z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "self.f(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.net1(x), self.net2(x)], dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w[..., None, None]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "Parameter_268": {
                "variable": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros((dim,))",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Parameter_269": {
                "variable": {
                    "value": "self.cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.eye(dim)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MultivariateNormal_272": {
                "variable": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "self.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.cov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_279": {
                "variable": {
                    "value": "self.modules_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "modules",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "modules + [nn.ReLU(), nn.ReflectionPad2d(1), WNConv2d(channels, channels, 3)]",
                            "BinOp"
                        ],
                        [
                            "modules",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_287": {
                "variable": {
                    "value": "log_det_jac",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-torch.log(x) - torch.log(1 - x) + np.log(1 - self.alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_297": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, x.reshape((x.shape[0], -1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_308": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.g(z)",
                            "Call"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x - t) * torch.exp(-s)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, self.weight[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, torch.inverse(self.weight)[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "m(x, log_det_jac, z)",
                            "Call"
                        ],
                        [
                            "z[:, self.latent_len:].view([z.shape[0]] + self.x_shape)",
                            "Call"
                        ],
                        [
                            "m.g(x, z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "self.f(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.net1(x), self.net2(x)], dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Sequential_323": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_369": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_408": {
                "variable": {
                    "value": "self.net1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, channels, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_415": {
                "variable": {
                    "value": "self.net2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_channels, channels, 3, padding=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_425": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.net1(x), self.net2(x)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_518": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ReflectionPad2d(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_582": {
                "variable": {
                    "value": "log_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.prior.log_prob(z, k=k) for k in range(self.prior.k)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "*args": {
                    "value": "nn.Linear(2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_65": {
                "*args": {
                    "value": "nn.Linear(2, 32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_91": {
                "*size": {
                    "value": "args.gmm_k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_106": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input - mean) / (var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "input * self.weight[None, :, None, None] + self.bias[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "weight": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.weight / (torch.norm(self.weight) + self.eps) * self.scale",
                            "BinOp"
                        ],
                        [
                            "self.id - 2 * v[:, None] @ v[None] / (v @ v)",
                            "BinOp"
                        ],
                        [
                            "self.id - 2 * v[:, None] @ v[None] / (v @ v)",
                            "BinOp"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "stride": {
                    "value": "self.stride",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "self.padding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dilation": {
                    "value": "self.dilation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "groups": {
                    "value": "self.groups",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_129": {
                "variable": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(input - mean) / (var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "input * self.weight[None, :, None, None] + self.bias[None, :, None, None]",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_130": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(input - mean) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "(0, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_216": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s[i](x_) * (1 - self.mask[i])",
                            "BinOp"
                        ],
                        [
                            "self.s[i](z_) * (1 - self.mask[i])",
                            "BinOp"
                        ],
                        [
                            "x[:, :k]",
                            "Subscript"
                        ],
                        [
                            "self.net(x1)",
                            "Call"
                        ],
                        [
                            "(1 - self.mask) * s",
                            "BinOp"
                        ],
                        [
                            "self.net(x1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "(1, 2, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_58": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_59": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_60": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_65": {
                "in_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_66": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_67": {
                "in_features": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_71": {
                "*size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_72": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_100": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ReLU_152": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_153": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_158": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_159": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "logdet_236": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_247": {
                "*size": {
                    "value": "(channels,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_248": {
                "n": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_268": {
                "*size": {
                    "value": "(dim,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "eye_269": {
                "n": {
                    "value": "dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32 ** 2 * 3",
                            "BinOp"
                        ],
                        [
                            "28 ** 2",
                            "BinOp"
                        ],
                        [
                            "784",
                            "int"
                        ],
                        [
                            "int(np.prod(in_shape))",
                            "Call"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ],
                        [
                            "dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_288": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_324": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_334": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_335": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_336": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_370": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_375": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_376": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_377": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_409": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_410": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_411": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_412": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_413": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_416": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_417": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_418": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_419": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_420": {
                "in_channels": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ],
                        [
                            "in_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_519": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_524": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_525": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReflectionPad2d_526": {
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_150": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "BatchNorm2d_156": {
                "num_features": {
                    "value": "channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "64",
                            "int"
                        ],
                        [
                            "32",
                            "int"
                        ],
                        [
                            "32",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ],
                        [
                            "channels",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_177": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s[i](x_) * (1 - self.mask[i])",
                            "BinOp"
                        ],
                        [
                            "self.s[i](z_) * (1 - self.mask[i])",
                            "BinOp"
                        ],
                        [
                            "x[:, :k]",
                            "Subscript"
                        ],
                        [
                            "self.net(x1)",
                            "Call"
                        ],
                        [
                            "(1 - self.mask) * s",
                            "BinOp"
                        ],
                        [
                            "self.net(x1)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_222": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "inverse_240": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_37": {
                "input": {
                    "value": "-s",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_105": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_287": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "z",
                            "variable"
                        ],
                        [
                            "x_ + (1 - self.mask[i]) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "self.g(z)",
                            "Call"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x * torch.exp(s) + t)",
                            "BinOp"
                        ],
                        [
                            "x1 + (1 - self.mask) * (x - t) * torch.exp(-s)",
                            "BinOp"
                        ],
                        [
                            "F.conv2d(x, self.weight[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, torch.inverse(self.weight)[:, :, None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "F.conv2d(x, w[..., None, None])",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "m(x, log_det_jac, z)",
                            "Call"
                        ],
                        [
                            "z[:, self.latent_len:].view([z.shape[0]] + self.x_shape)",
                            "Call"
                        ],
                        [
                            "m.g(x, z)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "self.f(x)",
                            "Call"
                        ],
                        [
                            "torch.cat([self.net1(x), self.net2(x)], dim=1)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "exp_215": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s[i](x_) * (1 - self.mask[i])",
                            "BinOp"
                        ],
                        [
                            "self.s[i](z_) * (1 - self.mask[i])",
                            "BinOp"
                        ],
                        [
                            "x[:, :k]",
                            "Subscript"
                        ],
                        [
                            "self.net(x1)",
                            "Call"
                        ],
                        [
                            "(1 - self.mask) * s",
                            "BinOp"
                        ],
                        [
                            "self.net(x1)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_294": {
                "*size": {
                    "value": "(x.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_28": {
                "input": {
                    "value": "s",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.s[i](x_) * (1 - self.mask[i])",
                            "BinOp"
                        ],
                        [
                            "self.s[i](z_) * (1 - self.mask[i])",
                            "BinOp"
                        ],
                        [
                            "x[:, :k]",
                            "Subscript"
                        ],
                        [
                            "self.net(x1)",
                            "Call"
                        ],
                        [
                            "(1 - self.mask) * s",
                            "BinOp"
                        ],
                        [
                            "self.net(x1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "models/utils.py": {
        "torch": {
            "stack_29": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stack",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t_t.contiguous().view(batch_size, d_height, d_depth) for t_t in t_1]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_43": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "stacks",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[t_t.reshape(batch_size, input_height, output_width, output_depth) for t_t in spl]",
                            "ListComp"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "transpose_43": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "permute_43": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dims": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_43": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.size()",
                            "Call"
                        ],
                        [
                            "output.size()",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "output_height",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(input_height * self.block_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_76": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, x[:, :k].view((x.shape[0], -1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_81": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z[:, -k:].view([x.shape[0]] + self.out_shape), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_106": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z, x[:, :k].view((x.shape[0], -1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_111": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[z[:, -k:].view([x.shape[0]] + self.out_shape), x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sigmoid_130": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.rand(list(shape) + [self.dim])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_141": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.rand(list(shape) + [self.dim])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_166": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.rand(list(shape) + [self.dim])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "rand_200": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "list(shape) + [self.dim]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_125": {
                "input": {
                    "value": "-torch.log(x) - torch.log(1 - x) + np.log(1 - self.alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_140": {
                "input": {
                    "value": "-F.softplus(-x) - F.softplus(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_161": {
                "input": {
                    "value": "-torch.log(x) - torch.log(1 - x) + np.log(1 - self.alpha)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sum_197": {
                "input": {
                    "value": "-F.softplus(-x) - F.softplus(x)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_126": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_145": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_162": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_201": {
                "input": {
                    "value": "1 - x",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_140": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softplus_197": {
                "input": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_125": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.rand(list(shape) + [self.dim])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_161": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat([z[:, -k:].view([x.shape[0]] + self.out_shape), x], dim=1)",
                            "Call"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "x * (1 - self.alpha) + self.alpha * 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.log(x) - torch.log(1 - x)",
                            "BinOp"
                        ],
                        [
                            "torch.sigmoid(x)",
                            "Call"
                        ],
                        [
                            "(x - self.alpha * 0.5) / (1.0 - self.alpha)",
                            "BinOp"
                        ],
                        [
                            "torch.rand(list(shape) + [self.dim])",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "train-discriminator.py": {
        "torch": {
            "device_24": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "TensorDataset_41": {
                "variable": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(emb_train - emb_train.mean(0)[None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "TensorDataset_42": {
                "variable": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "torch.FloatTensor(emb_test - emb_test.mean(0)[None])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_44": {
                "variable": {
                    "value": "trainloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(emb_train - emb_train.mean(0)[None]), torch.LongTensor(y_train))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_45": {
                "variable": {
                    "value": "testloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.utils.data.TensorDataset(torch.FloatTensor(emb_test - emb_test.mean(0)[None]), torch.LongTensor(y_test))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_48": {
                "variable": {
                    "value": "net",
                    "type": "variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(args.dim, 256)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_65": {
                "variable": {
                    "value": "opt",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cross_entropy_75": {
                "variable": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "p",
                    "type": "variable",
                    "possible_values": [
                        [
                            "net(x)",
                            "Call"
                        ],
                        [
                            "net(x)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainloader",
                            "variable"
                        ],
                        [
                            "y.to(device)",
                            "Call"
                        ],
                        [
                            "map(lambda a: a.to(device), next(iter(testloader)))",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_49": {
                "in_features": {
                    "value": "args.dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_52": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Dropout_53": {
                "p": {
                    "value": "0.3",
                    "type": "float",
                    "possible_values": []
                }
            },
            "LeakyReLU_54": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "len(np.unique(y_train))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "train-flow-ssl.py": {
        "torch": {
            "device_67": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda:0 if torch.cuda.is_available() else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "Categorical_98": {
                "variable": {
                    "value": "yprior",
                    "type": "variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "torch.FloatTensor(c / c.sum()).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataParallel_107": {
                "variable": {
                    "value": "flow",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "flow.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adamax_116": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "parameters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[{'params': [p for p in model.parameters() if p.requires_grad], 'weight_decay': args.weight_decay}]",
                            "List"
                        ]
                    ]
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_num_threads_70": {
                "int": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "manual_seed_79": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_80": {
                "seed": {
                    "value": "args.data_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_87": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_88": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_111": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'model_init.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_21": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prior_full",
                    "type": "variable",
                    "possible_values": [
                        [
                            "model.prior.log_prob_full(z)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_21": {
                "variable": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_144": {
                "variable": {
                    "value": "log_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(x.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_151": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(elbo.size(0),)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "is_available_67": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_127": {
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_194": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'model.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_195": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.root, 'optimizer.torch')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_163": {
                "variable": {
                    "value": "cl_loss",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logp_full",
                            "variable"
                        ]
                    ]
                },
                "target": {
                    "value": "y[y != -1].to(prediction.device)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "no_grad_180": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}