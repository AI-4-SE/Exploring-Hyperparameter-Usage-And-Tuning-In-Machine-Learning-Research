{
    "diagnostics/Inception_score.py": {
        "sklearn": {
            "GaussianMixture_7": {
                "variable": {
                    "value": "gmm",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "args.numModes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "diag",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "diagnostics/marginal_distribution.py": {
        "sklearn": {
            "GridSearchCV_20": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "KernelDensity(kernel='gaussian')",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "{'bandwidth': bandwidths}",
                    "type": "Dict",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KernelDensity_20": {
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "diagnostics/negative_log_probability.py": {
        "sklearn": {
            "GridSearchCV_7": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "KernelDensity(kernel='gaussian')",
                    "type": "Call",
                    "possible_values": []
                },
                "param_grid": {
                    "value": "{'bandwidth': bandwidths}",
                    "type": "Dict",
                    "possible_values": []
                },
                "cv": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "KernelDensity_7": {
                "kernel": {
                    "value": "gaussian",
                    "type": "str",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/utils/metrics.py": {
        "sklearn": {
            "MLPClassifier_54": {
                "variable": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "hidden_layer_sizes": {
                    "value": "(10 * ndim, 10 * ndim)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "1000",
                    "type": "int",
                    "possible_values": []
                },
                "solver": {
                    "value": "adam",
                    "type": "str",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "KFold_65": {
                "variable": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_splits": {
                    "value": "n_folds",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "random_state": {
                    "value": "seed",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cross_val_score_66": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "estimator": {
                    "value": "clf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "MLPClassifier(activation='relu', hidden_layer_sizes=(10 * ndim, 10 * ndim), max_iter=1000, solver='adam', random_state=seed)",
                            "Call"
                        ]
                    ]
                },
                "X": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((X, Y))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.concatenate((np.zeros((X.shape[0],)), np.ones((Y.shape[0],))))",
                            "Call"
                        ]
                    ]
                },
                "cv": {
                    "value": "shuffle",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "KFold(n_splits=n_folds, shuffle=True, random_state=seed)",
                            "Call"
                        ]
                    ]
                },
                "scoring": {
                    "value": "scoring",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "median_89": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.cat((xx, xy, yy)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "median_115": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.cat((xx, xy, yy)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_40": {
                "variable": {
                    "value": "X_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(X - X_mean) / X_std",
                            "BinOp"
                        ],
                        [
                            "X + noise_scale * torch.randn(X.shape)",
                            "BinOp"
                        ],
                        [
                            "X.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_41": {
                "variable": {
                    "value": "X_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(X - X_mean) / X_std",
                            "BinOp"
                        ],
                        [
                            "X + noise_scale * torch.randn(X.shape)",
                            "BinOp"
                        ],
                        [
                            "X.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_69": {
                "ndarray": {
                    "value": "np.atleast_1d(scores)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_130": {
                "input": {
                    "value": "mmd_square",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2 * (kxx + kyy - kxy)",
                            "BinOp"
                        ],
                        [
                            "kxx - 2 * kxy + kyy",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tril_indices_80": {
                "variable": {
                    "value": "ix",
                    "type": "Variable",
                    "possible_values": []
                },
                "row": {
                    "value": "m",
                    "type": "Variable",
                    "possible_values": []
                },
                "col": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2500",
                            "Constant"
                        ]
                    ]
                },
                "offset": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_89": {
                "input": {
                    "value": "torch.cat((xx, xy, yy))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_92": {
                "input": {
                    "value": "torch.exp(c * a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_109": {
                "input": {
                    "value": "(a[None, ...] - b[:, None, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_115": {
                "input": {
                    "value": "torch.cat((xx, xy, yy))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_118": {
                "input": {
                    "value": "torch.exp(c * a)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_151": {
                "*size": {
                    "value": "n",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "2500",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "5",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_46": {
                "*size": {
                    "value": "X.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_47": {
                "*size": {
                    "value": "Y.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_77": {
                "input": {
                    "value": "(a[None, ...] - b[:, None, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_77": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "reshape_81": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_89": {
                "tensors": {
                    "value": "(xx, xy, yy)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_92": {
                "input": {
                    "value": "c * a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "(xx, xy, yy)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_118": {
                "input": {
                    "value": "c * a",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_81": {
                "input": {
                    "value": "(a[None, ...] - b[:, None, :]) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/Ricker.py": {
        "sklearn": {
            "PolynomialFeatures_78": {
                "variable": {
                    "value": "polynomial_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "degree": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LinearRegression_80": {
                "variable": {
                    "value": "model_",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        },
        "torch": {
            "reshape_14": {
                "variable": {
                    "value": "log_n_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(thetas), self.args.numTime + 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_16": {
                "variable": {
                    "value": "thetas_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "t_21": {
                "variable": {
                    "value": "log_n_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_n_t",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([0.0] * thetas.shape[0]).reshape(-1, thetas.shape[0]).to(self.args.device)",
                            "Call"
                        ],
                        [
                            "torch.cat((log_n_t, (thetas_t[0] + log_n_t[-1] - torch.exp(log_n_t[-1]) + thetas_t[1] * torch.randn(thetas.shape[0]).to(self.args.device)).reshape(1, -1)))",
                            "Call"
                        ],
                        [
                            "torch.t(log_n_t)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_45": {
                "variable": {
                    "value": "sumstats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sumstats, torch.mean(sim_output, axis=1).reshape(1, -1).to(self.args.device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_46": {
                "variable": {
                    "value": "sumstats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sumstats, torch.sum(sim_output == 0, axis=1, dtype=torch.float).reshape(1, -1).to(self.args.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_19": {
                "variable": {
                    "value": "log_n_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(log_n_t, (thetas_t[0] + log_n_t[-1] - torch.exp(log_n_t[-1]) + thetas_t[1] * torch.randn(thetas.shape[0]).to(self.args.device)).reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_55": {
                "variable": {
                    "value": "sumstats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sumstats, autocov(sim_output, lag=k + 1).to(self.args.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "sumstats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sumstats, torch.Tensor(betas[k]).to(self.args.device).reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "sumstats",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(sumstats, torch.Tensor(gammas[k]).to(self.args.device).reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "t_90": {
                "input": {
                    "value": "sumstats",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([[]]).to(self.args.device)",
                            "Call"
                        ],
                        [
                            "torch.cat((sumstats, torch.mean(sim_output, axis=1).reshape(1, -1).to(self.args.device)), dim=1)",
                            "Call"
                        ],
                        [
                            "torch.cat((sumstats, torch.sum(sim_output == 0, axis=1, dtype=torch.float).reshape(1, -1).to(self.args.device)))",
                            "Call"
                        ],
                        [
                            "torch.cat((sumstats, autocov(sim_output, lag=k + 1).to(self.args.device)))",
                            "Call"
                        ],
                        [
                            "torch.cat((sumstats, torch.Tensor(betas[k]).to(self.args.device).reshape(1, -1)))",
                            "Call"
                        ],
                        [
                            "torch.cat((sumstats, torch.Tensor(gammas[k]).to(self.args.device).reshape(1, -1)))",
                            "Call"
                        ]
                    ]
                }
            },
            "Poisson_25": {
                "variable": {
                    "value": "result[i][j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "rate": {
                    "value": "thetas_t[2][i] * torch.exp(log_n_t[i][j])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "t_33": {
                "input": {
                    "value": "torch.Tensor(np.quantile(res.t().cpu().detach().numpy(), 1.0 / (self.args.xDim - 1) * np.arange(self.args.xDim), axis=0)).to(self.args.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_45": {
                "input": {
                    "value": "sim_output",
                    "type": "Variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_45": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_47": {
                "input": {
                    "value": "sim_output == 0",
                    "type": "Compare",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_47": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_50": {
                "input": {
                    "value": "x[:, :-lag]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_72": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_88": {},
            "reshape_88": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_33": {},
            "exp_25": {
                "input": {
                    "value": "log_n_t[i][j]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_19": {
                "input": {
                    "value": "log_n_t[-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "randn_19": {
                "*size": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "diagnostics/2d_likelihood.py": {
        "torch": {
            "exp_9": {
                "variable": {
                    "value": "estimatedLikelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "netLikelihood.log_prob(inputs=observation[:args.xDim].repeat(test_thetas.shape[0], 1), context=test_thetas.to(args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "diagnostics/base.py": {
        "torch": {
            "Tensor_21": {
                "variable": {
                    "value": "test_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_7": {
                "variable": {
                    "value": "thetaDomain",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(thetaDomain, torch.Tensor([[simulation.min[i].item(), simulation.max[i].item()]]))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_8": {}
        }
    },
    "diagnostics/groundtruth_inputs.py": {
        "torch": {
            "Tensor_41": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_35": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_35": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_37": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(true_thetas, torch.Tensor(theta).reshape(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_53": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_80": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_83": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_37": {},
            "reshape_37": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_86": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_89": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_92": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_95": {
                "variable": {
                    "value": "true_thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "inference/likelihood_learning.py": {
        "torch": {
            "no_grad_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__18": {
                "parameters": {
                    "value": "self.netLikelihood.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "inference/posterior_learning.py": {
        "torch": {
            "no_grad_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__20": {
                "parameters": {
                    "value": "self.netPosterior.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "inference/train.py": {
        "torch": {
            "randperm_8": {
                "variable": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.args.simulation_budget_per_round",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_42": {
                "variable": {
                    "value": "self.train_loader_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "torch.cat((self.training_theta, self.training_x, self.training_mask), 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_10": {
                "variable": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_15": {
                "variable": {
                    "value": "self.training_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.training_theta.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ones_20": {
                "variable": {
                    "value": "self.validation_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.validation_theta.shape[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_27": {
                "variable": {
                    "value": "self.training_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.training_theta, self.thetas[permutation[int(self.args.validationRatio * self.args.simulation_budget_per_round):]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "self.training_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.training_x, self.simulated_output[permutation[int(self.args.validationRatio * self.args.simulation_budget_per_round):]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_31": {
                "variable": {
                    "value": "self.training_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.training_mask, torch.zeros((int((1 - self.args.validationRatio) * self.thetas.shape[0]), 1)).to(self.args.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_32": {
                "variable": {
                    "value": "self.validation_theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.validation_theta, self.thetas[permutation[:int(self.args.validationRatio * self.args.simulation_budget_per_round)]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "self.validation_x",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.validation_x, self.simulated_output[permutation[:int(self.args.validationRatio * self.args.simulation_budget_per_round)]])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_36": {
                "variable": {
                    "value": "self.validation_mask",
                    "type": "Attribute",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.validation_mask, torch.zeros((int(self.args.validationRatio * self.thetas.shape[0]), 1)).to(self.args.device))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_42": {
                "tensors": {
                    "value": "(self.training_theta, self.training_x, self.training_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_31": {
                "*size": {
                    "value": "(int((1 - self.args.validationRatio) * self.thetas.shape[0]), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "zeros_36": {
                "*size": {
                    "value": "(int(self.args.validationRatio * self.thetas.shape[0]), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "loss/apt_loss.py": {
        "torch": {
            "multinomial_79": {
                "variable": {
                    "value": "choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(batch_size, batch_size) * (1 - torch.eye(batch_size)) / (batch_size - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_atoms - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_83": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta[:, None, :], contrasting_theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size * num_atoms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Tensor_92": {
                "variable": {
                    "value": "log_prob_prior",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logsumexp_99": {
                "input": {
                    "value": "unnormalized_log_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_prob_posterior - log_prob_prior",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ones_77": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "eye_77": {
                "n": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "neural_nets/neural_likelihood.py": {
        "torch": {
            "Adam_11": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netLikelihood.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lrLikelihood",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/neural_posterior.py": {
        "torch": {
            "max_8": {
                "input": {
                    "value": "torch.abs(self.sim.min)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_13": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "netPosterior.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.lrPosterior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "abs_8": {
                "input": {
                    "value": "self.sim.min",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "neural_nets/nsf.py": {
        "torch": {
            "Identity_9": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_70": {
                "variable": {
                    "value": "embedding_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_theta)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/distributions/base.py": {
        "torch": {
            "as_tensor_33": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(inputs)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_35": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torchutils.repeat_rows(context, num_reps=num_samples)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_63": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torchutils.repeat_rows(context, num_reps=num_samples)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "as_tensor_116": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "torchutils.repeat_rows(context, num_reps=num_samples)",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(context)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_77": {
                "tensors": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[self._sample(batch_size, context) for _ in range(num_batches)]",
                            "ListComp"
                        ],
                        [
                            "self.sample(num_samples, context=context)",
                            "Call"
                        ],
                        [
                            "torchutils.merge_leading_dims(samples, num_dims=2)",
                            "Call"
                        ],
                        [
                            "torchutils.split_leading_dim(samples, shape=[-1, num_samples])",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/distributions/discrete.py": {
        "torch": {
            "sigmoid_61": {
                "variable": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._context_encoder(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_66": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context_size * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "sigmoid_72": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._context_encoder(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "softplus_54": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._context_encoder(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ],
                        [
                            "self._compute_params(context)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/distributions/mixture.py": {
        "torch": {}
    },
    "nflows/distributions/normal.py": {
        "torch": {
            "exp_112": {
                "variable": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params[..., split:].reshape(params.shape[0], *self._shape)",
                            "Call"
                        ],
                        [
                            "self.log_std_.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_118": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context_size * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_145": {
                "variable": {
                    "value": "self.mean_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(shape).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_146": {
                "variable": {
                    "value": "self.log_std_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(shape).reshape(1, -1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_192": {
                "variable": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_stds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "params[..., split:].reshape(params.shape[0], *self._shape)",
                            "Call"
                        ],
                        [
                            "self.log_std_.to(self.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_198": {
                "variable": {
                    "value": "noise",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context_size * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_37": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context_size * num_samples",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "randn_33": {
                "*size": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_42": {
                "*size": {
                    "value": "self._shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_45": {
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "*self._shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "exp_101": {
                "input": {
                    "value": "-log_stds",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_145": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_145": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_146": {
                "*size": {
                    "value": "shape",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_146": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_181": {
                "input": {
                    "value": "-log_stds",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/distributions/uniform.py": {
        "torch": {
            "tensor_40": {
                "variable": {
                    "value": "A_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, 1, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tensor_44": {
                "variable": {
                    "value": "A",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[1.0, -1, 0], [0, 1, 0], [0, 0, 1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_50": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.tensor([0.01, 0.5, 1, 0.01])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_53": {
                "variable": {
                    "value": "self._gaussian",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(torch.tensor([0.01, 0.5, 1, 0.01]))",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "covariance",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "sigma ** 2 * torch.eye(4)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cat_83": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(samples)",
                            "Call"
                        ],
                        [
                            "samples[:sample_shape[0], ...]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Uniform_28": {
                "low": {
                    "value": "low",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "high",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_50": {
                "data": {
                    "value": "[0.01, 0.5, 1, 0.01]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_52": {
                "n": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_57": {
                "input": {
                    "value": "torch.erf((2 - mean) / sigma) - torch.erf((-5 - mean) / sigma)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_56": {
                "*size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_76": {
                "input": {
                    "value": "uniform_log_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._uniform.log_prob(candidate_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "erf_58": {
                "input": {
                    "value": "(-5 - mean) / sigma",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isinf_79": {
                "input": {
                    "value": "uniform_log_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._uniform.log_prob(candidate_samples)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/flows/autoregressive.py": {
        "torch": {}
    },
    "nflows/flows/base.py": {
        "torch": {}
    },
    "nflows/flows/realnvp.py": {
        "torch": {
            "ones_44": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/nn/nde/made.py": {
        "torch": {
            "arange_16": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "in_features + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_116": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_173": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[linear_0, linear_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_183": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_263": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_softmax_337": {
                "variable": {
                    "value": "log_mixture_coefficients",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_340": {
                "variable": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.logsumexp(log_mixture_coefficients - 0.5 * (np.log(2 * np.pi) + 2 * torch.log(stds) + ((inputs[..., None] - means) / stds) ** 2), dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "linear_74": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_100": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_149": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_154": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm1d(features, eps=0.001) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_362": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_57": {
                "variable": {
                    "value": "min_in_degree",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_degrees",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_59": {
                "variable": {
                    "value": "out_degrees",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "min_in_degree",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(in_degrees).item()",
                            "Call"
                        ],
                        [
                            "min(min_in_degree, autoregressive_features - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "autoregressive_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[out_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_175": {
                "input": {
                    "value": "self.degrees >= in_degrees",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "softplus_338": {
                "input": {
                    "value": "unconstrained_stds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logsumexp_341": {
                "input": {
                    "value": "log_mixture_coefficients - 0.5 * (np.log(2 * np.pi) + 2 * torch.log(stds) + ((inputs[..., None] - means) / stds) ** 2)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "no_grad_360": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "log_softmax_375": {
                "variable": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Categorical_378": {
                "variable": {
                    "value": "component_distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log_softmax(logits, dim=-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_393": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_396": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_410": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out": {
                    "value": "self.hidden_features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_413": {
                "input": {
                    "value": "torch.exp(torch.Tensor([1 - self.epsilon])) - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_415": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_417": {
                "*size": {
                    "value": "self.features * self.num_mixture_components",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_155": {
                "num_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softplus_376": {
                "input": {
                    "value": "unconstrained_stds",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_414": {
                "input": {
                    "value": "torch.Tensor([1 - self.epsilon])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_385": {
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_346": {
                "input": {
                    "value": "stds",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softplus(unconstrained_stds) + self.epsilon",
                            "BinOp"
                        ],
                        [
                            "F.softplus(unconstrained_stds) + self.epsilon",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/nn/nets/mlp.py": {
        "torch": {
            "Linear_39": {
                "variable": {
                    "value": "self._input_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "np.prod(in_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_sizes[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ModuleList_40": {
                "variable": {
                    "value": "self._hidden_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(in_size, out_size) for (in_size, out_size) in zip(hidden_sizes[:-1], hidden_sizes[1:])]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_46": {
                "variable": {
                    "value": "self._output_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_sizes[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out_features": {
                    "value": "np.prod(out_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_42": {
                "in_features": {
                    "value": "in_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/nn/nets/resnet.py": {
        "torch": {
            "rand_212": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "rand_213": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "channels // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "height",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "width",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_31": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Linear(features, features) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_34": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ResidualBlock(features=hidden_features, context_features=context_features, activation=activation, dropout_probability=dropout_probability, use_batch_norm=use_batch_norm) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_92": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_130": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.Conv2d(channels, channels, kernel_size=3, padding=1) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_133": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_183": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[ConvResidualBlock(channels=hidden_channels, context_channels=context_channels, activation=activation, dropout_probability=dropout_probability, use_batch_norm=use_batch_norm) for _ in range(num_blocks)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Conv2d_195": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_26": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm1d(features, eps=0.001) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_30": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "glu_51": {
                "variable": {
                    "value": "temps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((temps, self.context_layer(context)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_75": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features + context_features",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_79": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Conv2d_119": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "context_channels",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ModuleList_127": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm2d(channels, eps=0.001) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "glu_150": {
                "variable": {
                    "value": "temps",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.cat((temps, self.context_layer(context)), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_170": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels + context_channels",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_177": {
                "variable": {
                    "value": "self.initial_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "hidden_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_32": {
                "in_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_51": {
                "tensors": {
                    "value": "(temps, self.context_layer(context))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_98": {
                "tensors": {
                    "value": "(inputs, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_131": {
                "in_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_150": {
                "tensors": {
                    "value": "(temps, self.context_layer(context))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_203": {
                "tensors": {
                    "value": "(inputs, context)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_27": {
                "num_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "num_features": {
                    "value": "channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/autoregressive.py": {
        "torch": {
            "randn_439": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_440": {
                "variable": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "24",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_like_48": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.randn(16, 10)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_107": {
                "variable": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softplus(unconstrained_scale) + self._epsilon",
                            "BinOp"
                        ],
                        [
                            "F.softplus(unconstrained_scale) + self._epsilon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_118": {
                "variable": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softplus(unconstrained_scale) + self._epsilon",
                            "BinOp"
                        ],
                        [
                            "F.softplus(unconstrained_scale) + self._epsilon",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_106": {
                "input": {
                    "value": "unconstrained_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "autoregressive_params[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "softplus_117": {
                "input": {
                    "value": "unconstrained_scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "autoregressive_params[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/base.py": {
        "torch": {
            "ModuleList_42": {
                "variable": {
                    "value": "self._transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "transforms",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_53": {
                "variable": {
                    "value": "total_logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ModuleList_91": {
                "variable": {
                    "value": "self._transforms",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_171": {
                "variable": {
                    "value": "total_logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_177": {
                "variable": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "all_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(all_outputs, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_202": {
                "variable": {
                    "value": "total_logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cat_211": {
                "variable": {
                    "value": "tmp_concat_inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_chunk, hiddens]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_160": {
                "variable": {
                    "value": "(outputs, hiddens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "transform_outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "self._split_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/coupling.py": {
        "torch": {
            "as_tensor_32": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(mask)",
                            "Call"
                        ]
                    ]
                }
            },
            "arange_44": {
                "variable": {
                    "value": "features_vector",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "empty_like_99": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "empty_like_130": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_168": {
                "variable": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(unconstrained_scale + 2) + 0.001",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(shift)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_175": {
                "variable": {
                    "value": "log_scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(unconstrained_scale + 2) + 0.001",
                            "BinOp"
                        ],
                        [
                            "torch.ones_like(shift)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_like_194": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "shift",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "transform_params[:, :self.num_transform_features, ...]",
                            "Subscript"
                        ],
                        [
                            "transform_params",
                            "Name"
                        ]
                    ]
                }
            },
            "sigmoid_163": {
                "input": {
                    "value": "unconstrained_scale + 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/linear.py": {
        "torch": {
            "Parameter_40": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_168": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_183": {
                "variable": {
                    "value": "(outputs, lu)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "eye_215": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "solve_216": {
                "variable": {
                    "value": "(weight_inv, lu)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_217": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.log(torch.abs(torch.diag(lu)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_49": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.cache.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_68": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs - self.bias",
                    "type": "BinOp",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.cache.inverse",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_153": {
                "variable": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torchutils.random_orthogonal(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_155": {
                "variable": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.empty(features, features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_204": {
                "input": {
                    "value": "self._weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_40": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_170": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "sum_187": {
                "input": {
                    "value": "torch.log(torch.abs(torch.diag(lu)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_188": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ],
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_217": {
                "input": {
                    "value": "torch.abs(torch.diag(lu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_50": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_69": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_155": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_187": {
                "input": {
                    "value": "torch.abs(torch.diag(lu))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_217": {
                "input": {
                    "value": "torch.diag(lu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "abs_187": {
                "input": {
                    "value": "torch.diag(lu)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_217": {
                "input": {
                    "value": "lu",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "diag_187": {
                "input": {
                    "value": "lu",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/lu.py": {
        "torch": {
            "Parameter_24": {
                "variable": {
                    "value": "self.lower_entries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_triangular_entries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_25": {
                "variable": {
                    "value": "self.upper_entries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_triangular_entries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_26": {
                "variable": {
                    "value": "self.unconstrained_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "linear_65": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upper_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ]
                    ]
                }
            },
            "linear_66": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(inputs, upper)",
                            "Call"
                        ],
                        [
                            "F.linear(outputs, lower, self.bias)",
                            "Call"
                        ],
                        [
                            "inputs - self.bias",
                            "BinOp"
                        ],
                        [
                            "outputs.t()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lower_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triangular_solve_80": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "outputs.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lower_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "unitriangular": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triangular_solve_83": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.linear(inputs, upper)",
                            "Call"
                        ],
                        [
                            "F.linear(outputs, lower, self.bias)",
                            "Call"
                        ],
                        [
                            "inputs - self.bias",
                            "BinOp"
                        ],
                        [
                            "outputs.t()",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upper_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "unitriangular": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_109": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triangular_solve_110": {
                "variable": {
                    "value": "(lower_inverse, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "lower",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.lower_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "unitriangular": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "triangular_solve_113": {
                "variable": {
                    "value": "(weight_inverse, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "lower_inverse",
                    "type": "Variable",
                    "possible_values": []
                },
                "A": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.upper_entries.new_zeros(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "unitriangular": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_128": {
                "input": {
                    "value": "torch.log(self.upper_diag)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "n_triangular_entries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(features - 1) * features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_25": {
                "*size": {
                    "value": "n_triangular_entries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(features - 1) * features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_26": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_120": {
                "input": {
                    "value": "self.unconstrained_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_128": {
                "input": {
                    "value": "self.upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/made.py": {
        "torch": {
            "arange_14": {
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "in_features + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dropout_113": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_170": {
                "variable": {
                    "value": "self.linear_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[linear_0, linear_1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Dropout_180": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "dropout_probability",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ],
                        [
                            "0.0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ModuleList_264": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "blocks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "linear_72": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "self.weight * self.mask",
                    "type": "BinOp",
                    "possible_values": []
                },
                "bias": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "BatchNorm1d_97": {
                "variable": {
                    "value": "self.batch_norm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_146": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ]
                    ]
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "self.batch_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[nn.BatchNorm1d(features, eps=0.001) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Linear_240": {
                "variable": {
                    "value": "self.context_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "context_features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "min_55": {
                "variable": {
                    "value": "min_in_degree",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "in_degrees",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randint_57": {
                "variable": {
                    "value": "out_degrees",
                    "type": "Variable",
                    "possible_values": []
                },
                "low": {
                    "value": "min_in_degree",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(in_degrees).item()",
                            "Call"
                        ],
                        [
                            "min(min_in_degree, autoregressive_features - 1)",
                            "Call"
                        ]
                    ]
                },
                "high": {
                    "value": "autoregressive_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "size": {
                    "value": "[out_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "all_172": {
                "input": {
                    "value": "self.degrees >= in_degrees",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "BatchNorm1d_152": {
                "num_features": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(in_degrees)",
                            "Call"
                        ],
                        [
                            "len(in_degrees)",
                            "Call"
                        ]
                    ]
                },
                "eps": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "arange_66": {
                "start": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/nonlinearities.py": {
        "torch": {
            "tanh_20": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_21": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - outputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_60": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_61": {
                "variable": {
                    "value": "outputs[mask_middle]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs[mask_middle]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_like_65": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_66": {
                "variable": {
                    "value": "logabsdet[mask_middle]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "1 - outputs[mask_middle] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_67": {
                "variable": {
                    "value": "logabsdet[mask_right]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.alpha / inputs[mask_right]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_68": {
                "variable": {
                    "value": "logabsdet[mask_left]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "-self.alpha / inputs[mask_left]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_79": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_like_86": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_105": {
                "variable": {
                    "value": "self.log_negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(self.negative_slope)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_108": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "leaky_relu_115": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                },
                "negative_slope": {
                    "value": "1 / self.negative_slope",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_134": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "clamp_144": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.eps",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "1 - self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_165": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "sigmoid_170": {
                "variable": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "tan_190": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "np.pi * (inputs - 0.5)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_220": {
                "variable": {
                    "value": "self.unnormalized_pdf",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_265": {
                "variable": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_322": {
                "variable": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_323": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_324": {
                "variable": {
                    "value": "self.unnorm_derivatives_left",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_325": {
                "variable": {
                    "value": "self.unnorm_derivatives_right",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_128": {
                "variable": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor([temperature])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_267": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins + 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_269": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.randn(*shape, num_bins - 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_393": {
                "variable": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_394": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_400": {
                "variable": {
                    "value": "self.unnormalized_derivatives",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant * torch.ones(*shape, num_derivatives)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_404": {
                "variable": {
                    "value": "self.unnormalized_widths",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_405": {
                "variable": {
                    "value": "self.unnormalized_heights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(*shape, num_bins)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_410": {
                "variable": {
                    "value": "self.unnormalized_derivatives",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(*shape, num_derivatives)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_28": {
                "input": {
                    "value": "(1 + inputs) / (1 - inputs)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_29": {
                "input": {
                    "value": "1 - inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_62": {
                "input": {
                    "value": "self.beta * inputs[mask_right]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_80": {
                "input": {
                    "value": "(1 + inputs[mask_middle]) / (1 - inputs[mask_middle])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_83": {
                "input": {
                    "value": "inputs[mask_right] / self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_87": {
                "input": {
                    "value": "1 - inputs[mask_middle] ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "as_tensor_105": {
                "data": {
                    "value": "self.negative_slope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_167": {
                "input": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(context)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_167": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_220": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_265": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_322": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_323": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "randn_324": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_325": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_26": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_26": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_63": {
                "input": {
                    "value": "-self.beta * inputs[mask_left]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_84": {
                "input": {
                    "value": "-inputs[mask_left] / self.alpha",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_128": {},
            "softplus_136": {
                "input": {
                    "value": "-inputs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_141": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_141": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_146": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log1p_146": {
                "input": {
                    "value": "-inputs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_172": {
                "input": {
                    "value": "gate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sigmoid(context)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(context)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_172": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "atan_180": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_182": {
                "input": {
                    "value": "1 + inputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "min_187": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_187": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.temperature * inputs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(inputs, self.eps, 1 - self.eps)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_267": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_269": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_393": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "zeros_394": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_404": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_405": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_bins",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ],
                        [
                            "10",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "rand_411": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_derivatives",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_bins - 1 if self.tails == 'linear' else num_bins + 1",
                            "IfExp"
                        ],
                        [
                            "num_bins - 1 if self.tails == 'linear' else num_bins + 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_136": {
                "input": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_150": {
                "input": {
                    "value": "self.temperature * outputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_192": {
                "input": {
                    "value": "1 + outputs ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_401": {
                "*size": {
                    "value": "*shape",
                    "type": "Starred",
                    "possible_values": []
                },
                "out": {
                    "value": "num_derivatives",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_bins - 1 if self.tails == 'linear' else num_bins + 1",
                            "IfExp"
                        ],
                        [
                            "num_bins - 1 if self.tails == 'linear' else num_bins + 1",
                            "IfExp"
                        ]
                    ]
                }
            },
            "log_148": {
                "input": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softplus_149": {
                "input": {
                    "value": "-self.temperature * outputs",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/normalization.py": {
        "torch": {
            "Parameter_88": {
                "variable": {
                    "value": "self.unconstrained_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "constant * torch.ones(features)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Parameter_89": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_158": {
                "variable": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_159": {
                "variable": {
                    "value": "self.shift",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_163": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_218": {
                "variable": {
                    "value": "self.initialized.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_91": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_92": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softplus_96": {
                "input": {
                    "value": "self.unconstrained_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_115": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_116": {
                "input": {
                    "value": "logabsdet_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(self.weight) - 0.5 * torch.log(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "-torch.log(self.weight) + 0.5 * torch.log(self.running_var + self.eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_116": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sum_139": {
                "input": {
                    "value": "logabsdet_",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(self.weight) - 0.5 * torch.log(var + self.eps)",
                            "BinOp"
                        ],
                        [
                            "-torch.log(self.weight) + 0.5 * torch.log(self.running_var + self.eps)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_139": {
                "*size": {
                    "value": "inputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "tensor_157": {
                "data": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_158": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_159": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_88": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sqrt_131": {
                "input": {
                    "value": "self.running_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_136": {
                "input": {
                    "value": "self.running_var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_183": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_186": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_186": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_199": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_202": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_216": {
                "input": {
                    "value": "std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.std(dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_112": {
                "input": {
                    "value": "var + self.eps",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_183": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_199": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_202": {
                "input": {
                    "value": "self.log_scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/orthogonal.py": {
        "torch": {
            "Parameter_59": {
                "variable": {
                    "value": "self.q_vectors",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "qv",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tile(torch.eye(num_transforms // 2, features), 0, 2)",
                            "Call"
                        ],
                        [
                            "torch.cat((qv, torch.zeros(1, features)))",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_79": {
                "variable": {
                    "value": "squared_norms",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_vectors ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_86": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "arange_95": {
                "variable": {
                    "value": "reverse_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_transforms - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_108": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_48": {
                "variable": {
                    "value": "order_index",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "qv",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(qv, torch.zeros(1, features))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ger_83": {
                "variable": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "temp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "outputs @ q_vector",
                            "BinOp"
                        ],
                        [
                            "torch.ger(temp, 2.0 / squared_norm * q_vector)",
                            "Call"
                        ]
                    ]
                },
                "vec2": {
                    "value": "2.0 / squared_norm * q_vector",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "index_select_53": {
                "input": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "a.repeat(*repeat_idx)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": []
                },
                "index": {
                    "value": "order_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor(np.concatenate([init_dim * np.arange(n_tile) + i for i in range(init_dim)])).long()",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_55": {
                "n": {
                    "value": "num_transforms // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "m": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_57": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/permutations.py": {
        "torch": {
            "index_select_42": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ],
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "index": {
                    "value": "permutation",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_43": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "argsort_29": {
                "input": {
                    "value": "self._permutation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_59": {
                "n": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "arange_68": {
                "start": {
                    "value": "features - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/qr.py": {
        "torch": {
            "Parameter_21": {
                "variable": {
                    "value": "self.upper_entries",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(n_triangular_entries)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_22": {
                "variable": {
                    "value": "self.log_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_38": {
                "variable": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "exp_40": {
                "variable": {
                    "value": "upper[self.diag_indices[0], self.diag_indices[1]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self.log_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_56": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ]
                    ]
                }
            },
            "triangular_solve_78": {
                "variable": {
                    "value": "(outputs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "outputs.t()",
                    "type": "Call",
                    "possible_values": []
                },
                "A": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "eye_103": {
                "variable": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "m": {
                    "value": "self.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "triangular_solve_104": {
                "variable": {
                    "value": "(upper_inv, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "b": {
                    "value": "identity",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(self.features, self.features)",
                            "Call"
                        ]
                    ]
                },
                "A": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(self.features, self.features)",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ],
                        [
                            "self._create_upper()",
                            "Call"
                        ]
                    ]
                },
                "upper": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sum_114": {
                "input": {
                    "value": "self.log_upper_diag",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_21": {
                "*size": {
                    "value": "n_triangular_entries",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(features - 1) * features // 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_22": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_60": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_81": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/reshape.py": {
        "torch": {
            "zeros_49": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_68": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/splines/cubic.py": {
        "torch": {
            "zeros_like_33": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_34": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_98": {
                "variable": {
                    "value": "widths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_widths",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_101": {
                "variable": {
                    "value": "cumwidths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "widths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_width + (1 - min_bin_width * num_bins) * widths",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_103": {
                "variable": {
                    "value": "cumwidths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumwidths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cumsum(widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cumwidths, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_105": {
                "variable": {
                    "value": "heights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_heights",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_108": {
                "variable": {
                    "value": "cumheights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_heights, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_height + (1 - min_bin_height * num_bins) * heights",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_110": {
                "variable": {
                    "value": "cumheights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumheights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cumsum(heights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cumheights, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "min_113": {
                "variable": {
                    "value": "min_something_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(slopes[..., :-1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_119": {
                "variable": {
                    "value": "min_something",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_something_1",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.min(torch.abs(slopes[..., :-1]), torch.abs(slopes[..., 1:]))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_131": {
                "variable": {
                    "value": "derivatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[derivatives_left, derivatives, derivatives_right]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_171": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "atan2_190": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(discriminant[three_roots_mask])",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "-depressed_1[three_roots_mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cos_195": {
                "variable": {
                    "value": "cubic_root_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.atan2(torch.sqrt(discriminant[three_roots_mask]), -depressed_1[three_roots_mask])",
                            "Call"
                        ],
                        [
                            "theta / 3.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_196": {
                "variable": {
                    "value": "cubic_root_2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.atan2(torch.sqrt(discriminant[three_roots_mask]), -depressed_1[three_roots_mask])",
                            "Call"
                        ],
                        [
                            "theta / 3.0",
                            "BinOp"
                        ]
                    ]
                }
            },
            "stack_220": {
                "variable": {
                    "value": "roots",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[root_1, root_2, root_3]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_221": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[root1_mask, root2_mask, root3_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "gather_223": {
                "variable": {
                    "value": "outputs[three_roots_mask]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "roots",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([root_1, root_2, root_3], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "mask_index",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.argsort(masks, dim=-1, descending=True)[..., 0][..., None]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_253": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "3 * inputs_a * shifted_inputs.pow(2) + 2 * inputs_b * shifted_inputs + inputs_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "abs_113": {
                "input": {
                    "value": "slopes[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "min_83": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_83": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_122": {
                "input": {
                    "value": "unnorm_derivatives_left",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sigmoid_125": {
                "input": {
                    "value": "unnorm_derivatives_right",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sign_129": {
                "input": {
                    "value": "slopes[..., 1:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_191": {
                "input": {
                    "value": "discriminant[three_roots_mask]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_202": {
                "input": {
                    "value": "-depressed_2[three_roots_mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_237": {
                "input": {
                    "value": "3 * inputs_a * shifted_outputs.pow(2) + 2 * inputs_b * shifted_outputs + inputs_c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argsort_222": {
                "input": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.stack([root1_mask, root2_mask, root3_mask], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "sqrt_233": {
                "input": {
                    "value": "b.pow(2) - 4 * a * c",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_176": {
                "input": {
                    "value": "-discriminant[one_root_mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_180": {
                "input": {
                    "value": "-discriminant[one_root_mask]",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/splines/linear.py": {
        "torch": {
            "zeros_like_15": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_16": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_54": {
                "variable": {
                    "value": "pdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_pdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_56": {
                "variable": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_pdf, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_58": {
                "variable": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cumsum(pdf, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cdf, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "linspace_64": {
                "variable": {
                    "value": "bin_boundaries",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "steps": {
                    "value": "num_bins + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_79": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "(inputs - input_offsets) / input_slopes",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "cdf.gather(-1, bin_idx[..., None])[..., 0]",
                            "Subscript"
                        ],
                        [
                            "outputs + alpha * input_pdfs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "outputs * (right - left) + left",
                            "BinOp"
                        ],
                        [
                            "outputs * (top - bottom) + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "floor_85": {
                "variable": {
                    "value": "bin_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bin_pos",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs * num_bins",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_94": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "(inputs - input_offsets) / input_slopes",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "cdf.gather(-1, bin_idx[..., None])[..., 0]",
                            "Subscript"
                        ],
                        [
                            "outputs + alpha * input_pdfs",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "outputs * (right - left) + left",
                            "BinOp"
                        ],
                        [
                            "outputs * (top - bottom) + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "min_44": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_44": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_81": {
                "input": {
                    "value": "input_slopes",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "slopes.gather(-1, inv_bin_idx)[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "log_97": {
                "input": {
                    "value": "input_pdfs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "pdf.gather(-1, bin_idx[..., None])[..., 0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/splines/quadratic.py": {
        "torch": {
            "zeros_like_25": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_like_26": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_81": {
                "variable": {
                    "value": "widths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_widths",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_110": {
                "variable": {
                    "value": "bin_left_cdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(heights[..., :-1] + heights[..., 1:]) / 2 * widths",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_114": {
                "variable": {
                    "value": "bin_left_cdf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bin_left_cdf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cumsum((heights[..., :-1] + heights[..., 1:]) / 2 * widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(bin_left_cdf, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cumsum_116": {
                "variable": {
                    "value": "bin_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "widths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_width + (1 - min_bin_width * num_bins) * widths",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_118": {
                "variable": {
                    "value": "bin_locations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "bin_locations",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cumsum(widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(bin_locations, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "cat_101": {
                "variable": {
                    "value": "unnorm_heights_exp",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[constant, unnorm_heights_exp, constant]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_141": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "alpha * input_bin_widths + input_bin_locations",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "a * alpha.pow(2) + b * alpha + c",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "outputs * (right - left) + left",
                            "BinOp"
                        ],
                        [
                            "outputs * (top - bottom) + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "clamp_148": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros_like(inputs)",
                            "Call"
                        ],
                        [
                            "alpha * input_bin_widths + input_bin_locations",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "a * alpha.pow(2) + b * alpha + c",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(outputs, 0, 1)",
                            "Call"
                        ],
                        [
                            "outputs * (right - left) + left",
                            "BinOp"
                        ],
                        [
                            "outputs * (top - bottom) + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_149": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "alpha * (input_right_heights - input_left_heights) + input_left_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_84": {
                "input": {
                    "value": "unnormalized_heights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "(unnorm_heights_exp[..., :-1] + unnorm_heights_exp[..., 1:]) / 2 * widths",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "min_66": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_66": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(inputs - bottom) / (top - bottom)",
                            "BinOp"
                        ],
                        [
                            "(inputs - left) / (right - left)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_93": {
                "input": {
                    "value": "(unnorm_heights_exp[..., :-1] + unnorm_heights_exp[..., 1:]) / 2 * widths[..., 1:-1]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_142": {
                "input": {
                    "value": "alpha * (input_right_heights - input_left_heights) + input_left_heights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_139": {
                "input": {
                    "value": "b.pow(2) - 4 * a * c_",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/splines/rational_quadratic.py": {
        "torch": {
            "zeros_like_29": {
                "variable": {
                    "value": "outputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_like_30": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "softmax_93": {
                "variable": {
                    "value": "widths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_widths",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_95": {
                "variable": {
                    "value": "cumwidths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "widths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_width + (1 - min_bin_width * num_bins) * widths",
                            "BinOp"
                        ],
                        [
                            "cumwidths[..., 1:] - cumwidths[..., :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_96": {
                "variable": {
                    "value": "cumwidths",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumwidths",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cumsum(widths, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cumwidths, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ],
                        [
                            "(right - left) * cumwidths + left",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "softmax_104": {
                "variable": {
                    "value": "heights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_heights",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cumsum_106": {
                "variable": {
                    "value": "cumheights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "heights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.softmax(unnormalized_heights, dim=-1)",
                            "Call"
                        ],
                        [
                            "min_bin_height + (1 - min_bin_height * num_bins) * heights",
                            "BinOp"
                        ],
                        [
                            "cumheights[..., 1:] - cumheights[..., :-1]",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_107": {
                "variable": {
                    "value": "cumheights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "cumheights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cumsum(heights, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.pad(cumheights, pad=(1, 0), mode='constant', value=0.0)",
                            "Call"
                        ],
                        [
                            "(top - bottom) * cumheights + bottom",
                            "BinOp"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_33": {
                "variable": {
                    "value": "unnormalized_derivatives",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "unnormalized_derivatives",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(unnormalized_derivatives, pad=(1, 1))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softplus_102": {
                "input": {
                    "value": "unnormalized_derivatives",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.pad(unnormalized_derivatives, pad=(1, 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "min_83": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "max_83": {
                "input": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_156": {
                "input": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_177": {
                "input": {
                    "value": "denominator",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ],
                        [
                            "input_delta + (input_derivatives + input_derivatives_plus_one - 2 * input_delta) * theta_one_minus_theta",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_142": {
                "input": {
                    "value": "discriminant",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "b.pow(2) - 4 * a * c",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "nflows/transforms/standard.py": {
        "torch": {
            "zeros_17": {
                "variable": {
                    "value": "logabsdet",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "inputs.size(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_41": {
                "input": {
                    "value": "self._scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "numel_52": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "nflows/transforms/svd.py": {
        "torch": {
            "randn_133": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "Parameter_29": {
                "variable": {
                    "value": "self.unconstrained_diagonal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_104": {
                "variable": {
                    "value": "diagonal",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_116": {
                "variable": {
                    "value": "diagonal_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.reciprocal(self.diagonal)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_45": {
                "input": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_127": {
                "input": {
                    "value": "self.log_diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "5",
                            "Constant"
                        ]
                    ]
                }
            },
            "softplus_41": {
                "input": {
                    "value": "self.unconstrained_diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_72": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_94": {
                "*size": {
                    "value": "outputs.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reciprocal_116": {
                "input": {
                    "value": "self.diagonal",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "nflows/utils/torchutils.py": {
        "torch": {
            "slogdet_62": {
                "variable": {
                    "value": "(_, res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_72": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "qr_73": {
                "variable": {
                    "value": "(q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_97": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_110": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_124": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multinomial_127": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(features).float()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features // 2 if features % 2 == 0 else features // 2 + 1",
                            "IfExp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_156": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_157": {
                "variable": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_24": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "reduce_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(num_batch_dims, x.ndimension()))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_30": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Size(shape) + x.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "torch.Size([-1]) + x.shape[num_dims:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_42": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Size(shape) + x.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "torch.Size([-1]) + x.shape[num_dims:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsumexp_171": {
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum(a * b, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "c + d",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "numel_85": {
                "input": {
                    "value": "parameter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_136": {
                "input": {
                    "value": "inputs[..., None] >= bin_locations",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_141": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_141": {
                "input": {
                    "value": "torch.log(torch.abs(x)) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_165": {
                "n": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_168": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_141": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_158": {
                "input": {
                    "value": "-bound",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_158": {
                "input": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([bound])",
                            "Call"
                        ],
                        [
                            "1 - 0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_141": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sampler/Metropolis_Hastings_Sampler.py": {
        "torch": {
            "rand_13": {
                "variable": {
                    "value": "thetas",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(num_chains, self.args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "clamp_18": {
                "variable": {
                    "value": "thetas_intermediate",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas + proposal_std * torch.randn((num_chains, self.args.thetaDim)).to(self.args.device)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_19": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_chains",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_19": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_56": {
                "variable": {
                    "value": "masks",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(masks, mask.reshape(1, -1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_63": {
                "variable": {
                    "value": "mcmc_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(mcmc_samples, thetas)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_29": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_chains",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_29": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "rand_38": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_chains",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "reshape_38": {
                "variable": {
                    "value": "rand",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randn_18": {
                "*size": {
                    "value": "(num_chains, self.args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "randn_28": {
                "*size": {
                    "value": "(num_chains, self.args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "sum_59": {
                "input": {
                    "value": "masks[-100:, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_20": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(x=observation, theta=self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate).reshape(-1) + torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate).reshape(-1)).to(self.args.device) - netLikelihood.log_prob(x=observation, theta=self.sim.min + (self.sim.max - self.sim.min) * thetas).reshape(-1) - torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas).reshape(-1)).to(self.args.device), torch.Tensor([0.0] * num_chains).to(self.args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "randn_37": {
                "*size": {
                    "value": "(num_chains, self.args.thetaDim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "min_21": {
                "input": {
                    "value": "netLikelihood.log_prob(x=observation, theta=self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate).reshape(-1) + torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate).reshape(-1)).to(self.args.device) - netLikelihood.log_prob(x=observation, theta=self.sim.min + (self.sim.max - self.sim.min) * thetas).reshape(-1) - torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas).reshape(-1)).to(self.args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_30": {
                "input": {
                    "value": "torch.min(netLikelihood.log_prob(context=self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate, inputs=observation).reshape(-1) + torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate).reshape(-1)).to(self.args.device) - netLikelihood.log_prob(context=self.sim.min + (self.sim.max - self.sim.min) * thetas.to(self.args.device), inputs=observation).reshape(-1) - torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas).reshape(-1)).to(self.args.device), torch.Tensor([0.0] * num_chains).to(self.args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_31": {
                "input": {
                    "value": "netLikelihood.log_prob(context=self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate, inputs=observation).reshape(-1) + torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate).reshape(-1)).to(self.args.device) - netLikelihood.log_prob(context=self.sim.min + (self.sim.max - self.sim.min) * thetas.to(self.args.device), inputs=observation).reshape(-1) - torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas).reshape(-1)).to(self.args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_39": {
                "input": {
                    "value": "torch.min(netLikelihood(context=self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate, inputs=observation).reshape(-1) + torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate).reshape(-1)).to(self.args.device) - netLikelihood(context=self.sim.min + (self.sim.max - self.sim.min) * thetas.to(self.args.device), inputs=observation).reshape(-1) - torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas).reshape(-1)).to(self.args.device), torch.Tensor([0.0] * num_chains).to(self.args.device))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_40": {
                "input": {
                    "value": "netLikelihood(context=self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate, inputs=observation).reshape(-1) + torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas_intermediate).reshape(-1)).to(self.args.device) - netLikelihood(context=self.sim.min + (self.sim.max - self.sim.min) * thetas.to(self.args.device), inputs=observation).reshape(-1) - torch.Tensor(self.prior.eval(self.sim.min + (self.sim.max - self.sim.min) * thetas).reshape(-1)).to(self.args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Tensor_32": {},
            "Tensor_43": {}
        }
    },
    "sampler/prior.py": {
        "torch": {}
    },
    "sampler/sample_from_exact_likelihood.py": {
        "torch": {}
    },
    "sampler/sample_from_neural_likelihood.py": {
        "torch": {}
    },
    "sampler/sample_from_neural_posterior.py": {
        "torch": {
            "Tensor_39": {
                "variable": {
                    "value": "thetas",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "isfinite_69": {
                "variable": {
                    "value": "are_within_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior.log_prob(candidates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_110": {
                "tensors": {
                    "value": "accepted",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/examples/minimal.py": {
        "torch": {
            "ones_9": {
                "variable": {
                    "value": "x_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_10": {
                "variable": {
                    "value": "prior_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_11": {
                "variable": {
                    "value": "prior_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultivariateNormal_14": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "prior_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "prior_cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(num_dim)",
                            "Call"
                        ],
                        [
                            "torch.eye(num_dim)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_27": {
                "variable": {
                    "value": "x_o",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "num_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "prior_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "num_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "eye_29": {
                "variable": {
                    "value": "prior_cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_dim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "3",
                            "Constant"
                        ],
                        [
                            "3",
                            "Constant"
                        ]
                    ]
                }
            },
            "MultivariateNormal_32": {
                "variable": {
                    "value": "prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "prior_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(num_dim)",
                            "Call"
                        ],
                        [
                            "torch.zeros(num_dim)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "prior_cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(num_dim)",
                            "Call"
                        ],
                        [
                            "torch.eye(num_dim)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/abc/abc_base.py": {
        "torch": {
            "mean_68": {
                "input": {
                    "value": "(xo - x) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_70": {
                "input": {
                    "value": "xo - x",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_72": {
                "input": {
                    "value": "abs(xo - x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/abc/mcabc.py": {
        "torch": {
            "argsort_110": {
                "variable": {
                    "value": "sort_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.distance(self.x_o, x)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_117": {
                "*size": {
                    "value": "theta_accepted.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/abc/smcabc.py": {
        "torch": {
            "log_146": {
                "variable": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / num_particles * ones(num_particles)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "argsort_241": {
                "variable": {
                    "value": "sortidx",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.distance(self.x_o, x)",
                            "Call"
                        ],
                        [
                            "torch.unique(distances)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_329": {
                "variable": {
                    "value": "new_particles",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_particles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_particles)",
                            "Call"
                        ],
                        [
                            "[particles]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_330": {
                "variable": {
                    "value": "new_log_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_log_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_log_weights)",
                            "Call"
                        ],
                        [
                            "new_log_weights - torch.logsumexp(new_log_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "[self._calculate_new_log_weights(torch.cat(new_particles), particles, log_weights)]",
                            "List"
                        ],
                        [
                            "[log_weights]",
                            "List"
                        ]
                    ]
                }
            },
            "cat_331": {
                "variable": {
                    "value": "new_distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "new_distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_distances)",
                            "Call"
                        ],
                        [
                            "[distances]",
                            "List"
                        ]
                    ]
                }
            },
            "unique_352": {
                "variable": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.distance(self.x_o, x)",
                            "Call"
                        ],
                        [
                            "torch.unique(distances)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_385": {
                "variable": {
                    "value": "log_weighted_sum",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[torch.logsumexp(old_log_weights + kernel_log_prob(new_particle), dim=0) for new_particle in new_particles]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Multinomial_402": {
                "variable": {
                    "value": "multi",
                    "type": "Variable",
                    "possible_values": []
                },
                "probs": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logsumexp_334": {
                "input": {
                    "value": "new_log_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_log_weights)",
                            "Call"
                        ],
                        [
                            "new_log_weights - torch.logsumexp(new_log_weights, dim=0)",
                            "BinOp"
                        ],
                        [
                            "[self._calculate_new_log_weights(torch.cat(new_particles), particles, log_weights)]",
                            "List"
                        ],
                        [
                            "[log_weights]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isfinite_428": {
                "variable": {
                    "value": "is_within_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior.log_prob(parms_perturbed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_434": {
                "tensors": {
                    "value": "parameters",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "log_521": {
                "variable": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1 / num_particles * ones(num_particles)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isfinite_246": {
                "input": {
                    "value": "initial_epsilon",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "distances[sortidx][num_particles - 1]",
                            "Subscript"
                        ],
                        [
                            "100000000.0",
                            "Constant"
                        ]
                    ]
                }
            },
            "cumsum_354": {
                "input": {
                    "value": "distances",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.distance(self.x_o, x)",
                            "Call"
                        ],
                        [
                            "torch.unique(distances)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "where_406": {
                "condition": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multi.sample(sample_shape=(num_samples,))",
                            "Call"
                        ],
                        [
                            "self.sample_from_population_with_weights(particles, weights, num_samples=num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_453": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multi.sample(sample_shape=(num_samples,))",
                            "Call"
                        ],
                        [
                            "self.sample_from_population_with_weights(particles, weights, num_samples=num_samples)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_453": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_488": {
                "loc": {
                    "value": "thetas",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "self.kernel_variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_146": {
                "*size": {
                    "value": "num_particles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "particles.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "exp_176": {
                "input": {
                    "value": "all_log_weights[pop_idx - 1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_278": {
                "input": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(1 / num_particles * ones(num_particles))",
                            "Call"
                        ],
                        [
                            "torch.log(1 / num_particles * ones(num_particles))",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_387": {
                "input": {
                    "value": "old_log_weights + kernel_log_prob(new_particle)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tensor_464": {
                "variable": {
                    "value": "parameter_ranges",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[max(theta_column) - min(theta_column) for theta_column in samples.T]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_513": {
                "input": {
                    "value": "torch.exp(2.0 * log_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "exp_519": {
                "input": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.log(1 / num_particles * ones(num_particles))",
                            "Call"
                        ],
                        [
                            "torch.log(1 / num_particles * ones(num_particles))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_357": {
                "condition": {
                    "value": "distances_cdf >= quantile",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "matmul_458": {
                "input": {
                    "value": "mean.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mean(samples, dim=0).unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_477": {
                "data": {
                    "value": "[max(theta_column) - min(theta_column) for theta_column in samples.T]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "exp_513": {
                "input": {
                    "value": "2.0 * log_weights",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ones_521": {
                "*size": {
                    "value": "num_particles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "particles.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "matmul_456": {
                "input": {
                    "value": "samples.T",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "multi.sample(sample_shape=(num_samples,))",
                            "Call"
                        ],
                        [
                            "self.sample_from_population_with_weights(particles, weights, num_samples=num_samples)",
                            "Call"
                        ]
                    ]
                }
            },
            "diag_471": {
                "input": {
                    "value": "parameter_ranges",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "tensor([max(theta_column) - min(theta_column) for theta_column in samples.T])",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_314": {
                "tensors": {
                    "value": "new_particles",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(new_particles)",
                            "Call"
                        ],
                        [
                            "[particles]",
                            "List"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/base.py": {
        "torch": {
            "SummaryWriter_314": {
                "log_dir": {
                    "value": "logdir",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Path(get_log_root(), simulator, method, datetime.now().isoformat().replace(':', '_'))",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_381": {
                "input": {
                    "value": "quantity",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "all_381": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "median_403": {
                "variable": {
                    "value": "median_observation_distance",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sqrt(torch.sum((x_bank - x_o.reshape(1, -1)) ** 2, dim=-1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_404": {
                "input": {
                    "value": "torch.sum((x_bank - x_o.reshape(1, -1)) ** 2, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_404": {
                "input": {
                    "value": "(x_bank - x_o.reshape(1, -1)) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/posteriors/base_posterior.py": {
        "torch": {
            "numel_265": {
                "variable": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_314": {
                "variable": {
                    "value": "initial_params",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[init_fn() for _ in range(num_chains)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_378": {
                "variable": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "all_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "np.stack(all_samples).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_769": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(torch.as_tensor(theta))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_216": {
                "data": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(torch.as_tensor(theta))",
                            "Call"
                        ],
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_317": {
                "mode": {
                    "value": "track_gradients",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "mcmc_method != 'slice' and mcmc_method != 'slice_np'",
                            "BoolOp"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/posteriors/direct_posterior.py": {
        "torch": {
            "no_grad_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "as_tensor_430": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "isfinite_432": {
                "variable": {
                    "value": "is_within_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.prior.log_prob(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "isfinite_458": {
                "variable": {
                    "value": "within_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_prob_prior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prior.log_prob(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_168": {
                "variable": {
                    "value": "is_prior_finite",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._prior.log_prob(theta)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_170": {
                "variable": {
                    "value": "masked_log_prob",
                    "type": "Variable",
                    "possible_values": []
                },
                "condition": {
                    "value": "is_prior_finite",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.isfinite(self._prior.log_prob(theta))",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "unnorm_log_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.net.log_prob(theta, x)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "torch.tensor(float('-inf'), dtype=torch.float32).to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "where_460": {
                "condition": {
                    "value": "within_prior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.isfinite(log_prob_prior)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "log_prob_posterior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-self.posterior_nn.log_prob(inputs=theta, context=self.x)",
                            "UnaryOp"
                        ]
                    ]
                },
                "y": {
                    "value": "log_prob_prior",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.prior.log_prob(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "set_grad_enabled_164": {
                "mode": {
                    "value": "track_gradients",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_173": {
                "data": {
                    "value": "float('-inf')",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_177": {
                "input": {
                    "value": "self.leakage_correction(x=batched_first_of_batch(x))",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/posteriors/likelihood_based_posterior.py": {
        "torch": {
            "as_tensor_289": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_113": {
                "mode": {
                    "value": "track_gradients",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/posteriors/ratio_based_posterior.py": {
        "torch": {
            "as_tensor_333": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.as_tensor(theta, dtype=torch.float32)",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(theta)",
                            "Call"
                        ],
                        [
                            "next(iter(theta.values()))",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(theta)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_grad_enabled_114": {
                "mode": {
                    "value": "track_gradients",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_339": {
                "tensors": {
                    "value": "(theta, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_339": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_367": {
                "tensors": {
                    "value": "(theta, x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_367": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_115": {
                "tensors": {
                    "value": "(theta, x.to(device))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snle/snle_base.py": {
        "torch": {
            "randperm_218": {
                "variable": {
                    "value": "permuted_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_227": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_230": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(x, theta)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(training_batch_size, num_training_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(train_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(x, theta)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(training_batch_size, num_validation_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(val_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_244": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self._posterior.net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_234": {
                "indices": {
                    "value": "train_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_241": {
                "indices": {
                    "value": "val_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mean_260": {
                "input": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._posterior.net.log_prob(theta_batch, context=x_batch)",
                            "Call"
                        ],
                        [
                            "self._posterior.net.log_prob(theta_batch, context=x_batch)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_grad_norm__263": {
                "parameters": {
                    "value": "self._posterior.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_max_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snpe/snpe_a.py": {
        "torch": {}
    },
    "sbi/inference/snpe/snpe_b.py": {
        "torch": {
            "exp_91": {
                "input": {
                    "value": "log_prob_prior - log_prob_proposal",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snpe/snpe_base.py": {
        "torch": {
            "randperm_289": {
                "variable": {
                    "value": "permuted_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_total_examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_299": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "theta.to(device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_303": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(theta.to(device), x.to(device), prior_masks.to(device))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(training_batch_size, num_training_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(train_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_309": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(theta.to(device), x.to(device), prior_masks.to(device))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "min(training_batch_size, num_validation_examples)",
                    "type": "Call",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(val_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_317": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self._posterior.net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "tensor_222": {
                "variable": {
                    "value": "acceptance_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "float('nan')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_334": {
                "variable": {
                    "value": "batch_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self._loss(theta_batch, x_batch, masks_batch, proposal, calibration_kernel)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_156": {
                "*size": {
                    "value": "[len(x)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_307": {
                "indices": {
                    "value": "train_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_314": {
                "indices": {
                    "value": "val_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_351": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "clip_grad_norm__341": {
                "parameters": {
                    "value": "self._posterior.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_max_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snpe/snpe_c.py": {
        "torch": {
            "multinomial_351": {
                "variable": {
                    "value": "choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ones(batch_size, batch_size) * (1 - eye(batch_size)) / (batch_size - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_atoms - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_356": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta[:, None, :], contrasting_theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_356": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size * num_atoms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "inverse_537": {
                "variable": {
                    "value": "covariances_pp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "precisions_pp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "precisions_p_rep + precisions_d_rep",
                            "BinOp"
                        ],
                        [
                            "precisions_pp - self._maybe_z_scored_prior.precision_matrix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logdet_622": {
                "variable": {
                    "value": "logdet_covariances_pp",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "covariances_pp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.inverse(precisions_pp)",
                            "Call"
                        ]
                    ]
                }
            },
            "logsumexp_698": {
                "input": {
                    "value": "weights + constant + log_det + exponent",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mv_230": {
                "variable": {
                    "value": "self.prec_m_prod_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self._maybe_z_scored_prior.precision_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "vec": {
                    "value": "self._maybe_z_scored_prior.loc",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "logsumexp_692": {
                "input": {
                    "value": "logits_pp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._logits_proposal_posterior(means_pp, precisions_pp, covariances_pp, logits_p, means_p, precisions_p, logits_d, means_d, precisions_d)",
                            "Call"
                        ],
                        [
                            "logit_factors + log_sqrt_det_ratio + exponent",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "log_693": {
                "input": {
                    "value": "torch.tensor([2 * pi])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_694": {
                "input": {
                    "value": "torch.det(precisions_pp)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MultivariateNormal_276": {
                "variable": {
                    "value": "self._maybe_z_scored_prior",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "almost_zero_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(self._prior.mean - estim_prior_mean) / estim_prior_std",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "torch.diag(almost_one_std)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sqrt_280": {
                "variable": {
                    "value": "range_",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "almost_one_std * 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "logsumexp_375": {
                "input": {
                    "value": "unnormalized_log_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "log_prob_posterior - log_prob_prior",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "logsumexp_426": {
                "input": {
                    "value": "logits_p",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logsumexp_432": {
                "input": {
                    "value": "logits_d",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logdet_623": {
                "input": {
                    "value": "precisions_p",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "logdet_624": {
                "input": {
                    "value": "precisions_d",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_693": {
                "data": {
                    "value": "[2 * pi]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "det_694": {
                "input": {
                    "value": "precisions_pp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "precisions_p_rep + precisions_d_rep",
                            "BinOp"
                        ],
                        [
                            "precisions_pp - self._maybe_z_scored_prior.precision_matrix",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sqrt_273": {
                "input": {
                    "value": "self._prior.variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_349": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "diag_277": {
                "input": {
                    "value": "almost_one_std",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.sqrt(self._prior.variance) / estim_prior_std",
                            "BinOp"
                        ]
                    ]
                }
            },
            "eye_349": {
                "n": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/snre/snre_a.py": {
        "torch": {
            "sigmoid_144": {
                "variable": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._classifier_logits(theta, x, num_atoms)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_144": {
                "variable": {
                    "value": "likelihood",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_155": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2 * batch_size",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BCELoss_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sbi/inference/snre/snre_b.py": {
        "torch": {
            "logsumexp_150": {
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self._classifier_logits(theta, x, num_atoms)",
                            "Call"
                        ],
                        [
                            "logits.reshape(batch_size, num_atoms)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "mean_152": {
                "input": {
                    "value": "log_prob",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "logits[:, 0] - torch.logsumexp(logits, dim=-1)",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/inference/snre/snre_base.py": {
        "torch": {
            "randperm_231": {
                "variable": {
                    "value": "permuted_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "num_examples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "len(theta)",
                            "Call"
                        ]
                    ]
                }
            },
            "TensorDataset_245": {
                "variable": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "DataLoader_248": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(theta, x)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "clipped_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(training_batch_size, num_validation_examples)",
                            "Call"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(train_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "data.TensorDataset(theta, x)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "clipped_batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "min(training_batch_size, num_validation_examples)",
                            "Call"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "sampler": {
                    "value": "SubsetRandomSampler(val_indices)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_262": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "list(self._posterior.net.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "learning_rate",
                    "type": "Variable",
                    "possible_values": []
                },
                "betas": {
                    "value": "(0.5, 0.999)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "1e-05",
                    "type": "float",
                    "possible_values": []
                }
            },
            "multinomial_321": {
                "variable": {
                    "value": "choices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ones(batch_size, batch_size) * (1 - eye(batch_size)) / (batch_size - 1)",
                            "BinOp"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_atoms - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_325": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(theta[:, None, :], contrasting_theta)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_325": {
                "variable": {
                    "value": "atomic_theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_size * num_atoms",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_329": {
                "variable": {
                    "value": "theta_and_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(atomic_theta, repeated_x)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_252": {
                "indices": {
                    "value": "train_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_259": {
                "indices": {
                    "value": "val_indices",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_292": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ones_319": {
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "out": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "clip_grad_norm__282": {
                "parameters": {
                    "value": "self._posterior.net.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "clip_max_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "eye_319": {
                "n": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta.shape[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/mcmc/init_strategy.py": {
        "torch": {
            "cat_34": {
                "variable": {
                    "value": "log_weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[potential_fn(init_param_candidates[i, :]).detach() for i in range(init_strategy_num_candidates)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "from_numpy_47": {
                "ndarray": {
                    "value": "idxs.astype(int)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/mcmc/slice.py": {
        "torch": {
            "full_92": {
                "variable": {
                    "value": "self._width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "size": {
                    "value": "(self._num_dimensions,)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "self._initial_width",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_126": {
                "n": {
                    "value": "self._num_dimensions",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "log_166": {
                "input": {
                    "value": "torch.rand(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "rand_166": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_169": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_187": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_195": {
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "tensors": {
                    "value": "(params[self._site_name].view(-1)[:dim], x.reshape(1), params[self._site_name].view(-1)[dim + 1:])",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "unsqueeze_148": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/neural_nets/classifier.py": {
        "torch": {
            "Linear_99": {
                "variable": {
                    "value": "neural_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "x_numel + y_numel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_105": {
                "variable": {
                    "value": "neural_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_140": {
                "variable": {
                    "value": "neural_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(x_numel + y_numel, hidden_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_154": {
                "variable": {
                    "value": "neural_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_206": {
                "variable": {
                    "value": "neural_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "input_layer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_21": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.embedding_net_x(t[:, :self.dim_x]), self.embedding_net_y(t[:, self.dim_x:self.dim_x + self.dim_y])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Identity_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "embedding_net_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_59": {
                "variable": {
                    "value": "embedding_net_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_73": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_117": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_165": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_166": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_141": {
                "in_features": {
                    "value": "x_numel + y_numel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_142": {
                "num_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_143": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_144": {
                "in_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm1d_145": {
                "num_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_146": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_147": {
                "in_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/neural_nets/flow.py": {
        "torch": {
            "Identity_23": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_56": {
                "variable": {
                    "value": "embedding_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_85": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_139": {
                "variable": {
                    "value": "embedding_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Identity_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_220": {
                "variable": {
                    "value": "embedding_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/neural_nets/mdn.py": {
        "torch": {
            "Identity_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_49": {
                "variable": {
                    "value": "embedding_net",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "standardizing_net(batch_y)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_55": {
                "*args": {
                    "value": "nn.Linear(y_numel, hidden_features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "in_features": {
                    "value": "y_numel",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "embedding_net(batch_y[:1]).numel()",
                            "Call"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_57": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_58": {
                "p": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_60": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_62": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sbi/simulators/linear_gaussian.py": {
        "torch": {
            "cholesky_54": {
                "variable": {
                    "value": "chol_factor",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "likelihood_cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "MultivariateNormal_95": {
                "variable": {
                    "value": "posterior_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "product_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mv(torch.mm(s2, inv_s1s2), mu1) + torch.mv(torch.mm(s1, inv_s1s2), mu2)",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "product_cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.mm(torch.mm(s1, inv_s1s2), s2)",
                            "Call"
                        ]
                    ]
                }
            },
            "MultivariateNormal_139": {
                "variable": {
                    "value": "prior_dist",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "prior_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "covariance_matrix": {
                    "value": "prior_cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "posterior_samples",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(posterior_samples, relevant_prior_samples)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_175": {
                "variable": {
                    "value": "posterior",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "likelihood_mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x_o - likelihood_shift",
                            "BinOp"
                        ],
                        [
                            "x_o - likelihood_shift",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "likelihood_cov",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "inverse_207": {
                "variable": {
                    "value": "inv_s1s2",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s1 + s2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mm_215": {
                "input": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "inv_s1s2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.inverse(s1 + s2)",
                            "Call"
                        ]
                    ]
                }
            },
            "isfinite_185": {
                "variable": {
                    "value": "is_in_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior.log_prob(candidate_samples)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_191": {
                "tensors": {
                    "value": "samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "mv_210": {
                "input": {
                    "value": "torch.mm(s1, inv_s1s2)",
                    "type": "Call",
                    "possible_values": []
                },
                "vec": {
                    "value": "mu2",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "randn_like_23": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta[:, :-num_discarded_dims]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "mm_56": {
                "input": {
                    "value": "chol_factor",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cholesky(likelihood_cov)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "torch.randn_like(theta).T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_210": {
                "input": {
                    "value": "s2",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "inv_s1s2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.inverse(s1 + s2)",
                            "Call"
                        ]
                    ]
                }
            },
            "mm_211": {
                "input": {
                    "value": "s1",
                    "type": "Variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "inv_s1s2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.inverse(s1 + s2)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_like_56": {
                "input": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "theta[:, :-num_discarded_dims]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/simulators/simutils.py": {
        "torch": {
            "tensor_54": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "split_58": {
                "variable": {
                    "value": "batches",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "sim_batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_88": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "simulation_outputs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Parallel(n_jobs=num_workers)((delayed(simulator)(batch) for batch in tqdm(batches, disable=not show_progress_bars, desc=f'Running {num_sims} simulations in {len(batches)} batches.', total=len(batches))))",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/types.py": {
        "torch": {}
    },
    "sbi/user_input/user_input_checks.py": {
        "torch": {
            "as_tensor_449": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "atleast_2d(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_388": {
                "data": {
                    "value": "simulator(theta.numpy())",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_393": {
                "data": {
                    "value": "simulator(theta)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "float32",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/user_input/user_input_checks_utils.py": {
        "torch": {
            "as_tensor_179": {
                "variable": {
                    "value": "self.dims_per_dist",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "[d.sample().numel() for d in self.dists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "sum_180": {
                "variable": {
                    "value": "self.ndims",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(self.dims_per_dist)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_227": {
                "variable": {
                    "value": "sample",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[d.sample(sample_shape) for d in self.dists]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "as_tensor_41": {
                "data": {
                    "value": "self.custom_prior.log_prob(value)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_46": {
                "data": {
                    "value": "self.custom_prior.sample(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mean_56": {
                "variable": {
                    "value": "self.custom_prior.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.as_tensor(self.custom_prior.sample((1000,)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_77": {
                "data": {
                    "value": "self.custom_prior.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_81": {
                "data": {
                    "value": "self.custom_prior.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_105": {
                "data": {
                    "value": "self.prior_scipy.logpdf(x=value)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_108": {
                "data": {
                    "value": "self.prior_scipy.rvs(size=sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_142": {
                "data": {
                    "value": "self.prior.log_prob(value)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_145": {
                "data": {
                    "value": "self.prior.sample(sample_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_149": {
                "data": {
                    "value": "self.prior.mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "as_tensor_153": {
                "data": {
                    "value": "self.prior.variance",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.return_type",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_254": {
                "tensors": {
                    "value": "log_probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_254": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_281": {
                "tensors": {
                    "value": "[d.mean for d in self.dists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "cat_285": {
                "tensors": {
                    "value": "[d.variance for d in self.dists]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "as_tensor_57": {
                "data": {
                    "value": "self.custom_prior.sample((1000,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "std_67": {
                "input": {
                    "value": "torch.as_tensor(self.custom_prior.sample((1000,)))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "as_tensor_67": {
                "data": {
                    "value": "self.custom_prior.sample((1000,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "as_tensor_180": {
                "data": {
                    "value": "self.dims_per_dist",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/utils/conditional_density.py": {
        "torch": {
            "linspace_49": {
                "variable": {
                    "value": "theta_grid_dim1",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "float(limits[dim1, 0] + eps_margins1)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "float(limits[dim1, 1] - eps_margins1)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "resolution",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "linspace_54": {
                "variable": {
                    "value": "theta_grid_dim2",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "float(limits[dim2, 0] + eps_margins2)",
                    "type": "Call",
                    "possible_values": []
                },
                "end": {
                    "value": "float(limits[dim2, 1] - eps_margins2)",
                    "type": "Call",
                    "possible_values": []
                },
                "steps": {
                    "value": "resolution",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_143": {
                "variable": {
                    "value": "average_correlations",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.stack(correlation_matrices)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_147": {
                "variable": {
                    "value": "av_correlation_matrix",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(len(subset), len(subset))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "triu_indices_148": {
                "variable": {
                    "value": "triu_indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "row": {
                    "value": "len(subset)",
                    "type": "Call",
                    "possible_values": []
                },
                "col": {
                    "value": "len(subset)",
                    "type": "Call",
                    "possible_values": []
                },
                "offset": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_251": {
                "variable": {
                    "value": "expected_val",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "f(*grids) * probs",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_253": {
                "variable": {
                    "value": "limits_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "limits[:, 1] - limits[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "prod_294": {
                "variable": {
                    "value": "limits_diff",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "limits[:, 1] - limits[:, 0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "repeat_interleave_68": {
                "variable": {
                    "value": "repeated_condition[:, dim2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "theta_grid_dim2",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.linspace(float(limits[dim2, 0] + eps_margins2), float(limits[dim2, 1] - eps_margins2), resolution)",
                            "Call"
                        ]
                    ]
                },
                "repeats": {
                    "value": "resolution",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "reshape_73": {
                "variable": {
                    "value": "log_probs_on_grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_probs_on_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "density.log_prob(repeated_condition)",
                            "Call"
                        ],
                        [
                            "density.log_prob(repeated_condition)",
                            "Call"
                        ],
                        [
                            "torch.reshape(log_probs_on_grid, (resolution, resolution))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(resolution, resolution)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "exp_76": {
                "input": {
                    "value": "log_probs_on_grid - torch.max(log_probs_on_grid)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_272": {
                "variable": {
                    "value": "marginal_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "sum_273": {
                "variable": {
                    "value": "marginal_y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_143": {
                "tensors": {
                    "value": "correlation_matrices",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "triu_152": {
                "input": {
                    "value": "av_correlation_matrix",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros((len(subset), len(subset)))",
                            "Call"
                        ],
                        [
                            "torch.triu(av_correlation_matrix) + torch.tril(av_correlation_matrix.T)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tril_152": {
                "input": {
                    "value": "av_correlation_matrix.T",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_178": {
                "input": {
                    "value": "variance_x * variance_y",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "linspace_247": {
                "start": {
                    "value": "lim[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "end": {
                    "value": "lim[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "steps": {
                    "value": "prob.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "meshgrid_250": {
                "*tensors": {
                    "value": "x_values_over_which_we_integrate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[torch.linspace(lim[0], lim[1], prob.shape[0]) for (lim, prob) in zip(limits, probs)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "sum_295": {
                "input": {
                    "value": "probs",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ],
                        [
                            "ensure_theta_batched(probs)",
                            "Call"
                        ]
                    ]
                }
            },
            "max_76": {
                "input": {
                    "value": "log_probs_on_grid",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "density.log_prob(repeated_condition)",
                            "Call"
                        ],
                        [
                            "density.log_prob(repeated_condition)",
                            "Call"
                        ],
                        [
                            "torch.reshape(log_probs_on_grid, (resolution, resolution))",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_123": {
                "tensors": {
                    "value": "[_compute_corrcoeff(eval_conditional_density(density, cond, limits, dim1=dim1, dim2=dim2, resolution=resolution), limits[[dim1, dim2]]) for dim1 in subset for dim2 in subset if dim1 < dim2]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "sbi/utils/get_nn_models.py": {
        "torch": {
            "Identity_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_102": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Identity_178": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "sbi/utils/plot.py": {
        "torch": {
            "as_tensor_222": {
                "variable": {
                    "value": "limits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "limits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[limits[0] for _ in range(dim)]",
                            "ListComp"
                        ],
                        [
                            "limits",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(limits)",
                            "Call"
                        ],
                        [
                            "[opts['limits'][0] for _ in range(dim)]",
                            "ListComp"
                        ],
                        [
                            "opts['limits']",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(limits)",
                            "Call"
                        ],
                        [
                            "limits.cpu().detach()",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_413": {
                "variable": {
                    "value": "limits",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "limits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[limits[0] for _ in range(dim)]",
                            "ListComp"
                        ],
                        [
                            "limits",
                            "Name"
                        ],
                        [
                            "torch.as_tensor(limits)",
                            "Call"
                        ],
                        [
                            "[opts['limits'][0] for _ in range(dim)]",
                            "ListComp"
                        ],
                        [
                            "opts['limits']",
                            "Subscript"
                        ],
                        [
                            "torch.as_tensor(limits)",
                            "Call"
                        ],
                        [
                            "limits.cpu().detach()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/utils/pyroutils.py": {
        "torch": {}
    },
    "sbi/utils/sbiutils.py": {
        "torch": {
            "mean_76": {
                "variable": {
                    "value": "t_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_t[is_valid_t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_77": {
                "variable": {
                    "value": "t_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_t[is_valid_t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_114": {
                "variable": {
                    "value": "t_mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_t[is_valid_t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_130": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "isnan_249": {
                "variable": {
                    "value": "x_is_nan",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_249": {
                "variable": {
                    "value": "x_is_nan",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isinf_250": {
                "variable": {
                    "value": "x_is_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.reshape(batch_size, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_250": {
                "variable": {
                    "value": "x_is_inf",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "std_116": {
                "variable": {
                    "value": "t_std",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "batch_t[is_valid_t]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isfinite_189": {
                "variable": {
                    "value": "are_within_prior",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "prior.log_prob(candidates)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_257": {
                "variable": {
                    "value": "is_valid_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_322": {
                "tensors": {
                    "value": "[t for (t, r) in zip(data, data_round_indices) if r >= starting_round_index]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "einsum_357": {
                "equation": {
                    "value": "bci, bci -> bc",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "vector",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "einsum_376": {
                "equation": {
                    "value": "bcij,bcj -> bci",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "matrix",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "cat_230": {
                "tensors": {
                    "value": "accepted",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "as_tensor_230": {
                "data": {
                    "value": "acceptance_rate",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "(num_samples - num_remaining) / num_sampled_total",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "sbi/utils/torchutils.py": {
        "torch": {
            "slogdet_104": {
                "variable": {
                    "value": "(_, res)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "randn_114": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "size",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "qr_115": {
                "variable": {
                    "value": "(q, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_139": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_152": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "zeros_166": {
                "variable": {
                    "value": "mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_167": {
                "variable": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "multinomial_169": {
                "variable": {
                    "value": "indices",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.ones(features).float()",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "num_samples",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features // 2 if features % 2 == 0 else features // 2 + 1",
                            "IfExp"
                        ]
                    ]
                },
                "replacement": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Tensor_198": {
                "variable": {
                    "value": "max_value",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_199": {
                "variable": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_66": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "reduce_dims",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(range(num_batch_dims, x.ndimension()))",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_72": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Size(shape) + x.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "torch.Size([-1]) + x.shape[num_dims:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "reshape_84": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Size(shape) + x.shape[1:]",
                            "BinOp"
                        ],
                        [
                            "torch.Size([-1]) + x.shape[num_dims:]",
                            "BinOp"
                        ]
                    ]
                }
            },
            "logsumexp_213": {
                "input": {
                    "value": "c",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "-0.5 * torch.sum(a * b, dim=-1)",
                            "BinOp"
                        ],
                        [
                            "c + d",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_33": {
                "t": {
                    "value": "torch.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_47": {
                "*size": {
                    "value": "(1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "numel_127": {
                "input": {
                    "value": "parameter",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "model.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_178": {
                "input": {
                    "value": "inputs[..., None] >= bin_locations",
                    "type": "Compare",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sign_183": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_183": {
                "input": {
                    "value": "torch.log(torch.abs(x)) / 3.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eye_207": {
                "n": {
                    "value": "D",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "sum_210": {
                "input": {
                    "value": "a * b",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "from_numpy_290": {
                "variable": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arys[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(arr)",
                            "Call"
                        ]
                    ]
                }
            },
            "as_tensor_319": {
                "data": {
                    "value": "arr",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "arys[0]",
                            "Subscript"
                        ],
                        [
                            "torch.from_numpy(arr)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "float32",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_41": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Uniform_239": {
                "low": {
                    "value": "low",
                    "type": "Variable",
                    "possible_values": []
                },
                "high": {
                    "value": "high",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "set_default_tensor_type_43": {
                "t": {
                    "value": "torch.cuda.FloatTensor",
                    "type": "str",
                    "possible_values": []
                }
            },
            "log_183": {
                "input": {
                    "value": "torch.abs(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log1p_200": {
                "input": {
                    "value": "-bound",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_200": {
                "input": {
                    "value": "bound",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.Tensor([bound])",
                            "Call"
                        ],
                        [
                            "1 - 0.001",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "abs_183": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "x.unsqueeze(1)",
                            "Call"
                        ],
                        [
                            "x.expand(shape[0], num_reps, *shape[1:])",
                            "Call"
                        ],
                        [
                            "torch.randn(size, size)",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "simulators/Cosine.py": {
        "torch": {
            "cos_9": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas * 5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_13": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cos(thetas * 5 * np.pi)",
                            "Call"
                        ],
                        [
                            "torch.cos(context * 5 * np.pi)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1 * torch.eye(2).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], 2, 2).to(self.args.device)",
                            "BinOp"
                        ],
                        [
                            "0.1 * torch.eye(2).repeat(context.shape[0], 1).reshape(context.shape[0], 2, 2).to(self.args.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_21": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context * 5 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "MultivariateNormal_25": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.cos(thetas * 5 * np.pi)",
                            "Call"
                        ],
                        [
                            "torch.cos(context * 5 * np.pi)",
                            "Call"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "0.1 * torch.eye(2).repeat(thetas.shape[0], 1).reshape(thetas.shape[0], 2, 2).to(self.args.device)",
                            "BinOp"
                        ],
                        [
                            "0.1 * torch.eye(2).repeat(context.shape[0], 1).reshape(context.shape[0], 2, 2).to(self.args.device)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_27": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_11": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_11": {
                "input": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_23": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_23": {
                "input": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/Encoder_network.py": {
        "torch": {
            "Conv2d_18": {
                "variable": {
                    "value": "self.enc_conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_24": {
                "variable": {
                    "value": "self.enc_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "variable": {
                    "value": "self.enc_conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "variable": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_latent",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_44": {
                "variable": {
                    "value": "self.z_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_latent",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "self.dec_linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "num_latent",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_52": {
                "variable": {
                    "value": "self.dec_deconv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_58": {
                "variable": {
                    "value": "self.dec_deconv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_64": {
                "variable": {
                    "value": "self.dec_deconv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "randn_72": {
                "variable": {
                    "value": "eps",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "z_mu.size(0)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "z_mu.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "leaky_relu_81": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_linear_1(encoded)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_85": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_linear_1(encoded)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_89": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_linear_1(encoded)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_103": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_linear_1(encoded)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_107": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_linear_1(encoded)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_111": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_linear_1(encoded)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_114": {
                "variable": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_linear_1(encoded)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 64, 2, 2)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_1(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.dec_deconv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_75": {
                "input": {
                    "value": "z_log_var / 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/Encoder_pre_training.py": {
        "torch": {
            "device_41": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "args.device if torch.cuda.is_available() else 'cpu'",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_90": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='data', train=True, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root='data', train=True, transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ],
                        [
                            "datasets.SVHN(root='data', split='train', transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "datasets.MNIST(root='data', train=False, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "datasets.FashionMNIST(root='data', train=False, transform=transforms.ToTensor())",
                            "Call"
                        ],
                        [
                            "datasets.SVHN(root='data', split='test', transform=transforms.ToTensor(), download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_118": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "manual_seed_107": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_108": {
                "seed": {
                    "value": "args.random_seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_150": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "param_dir + '/model.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "randn_178": {
                "variable": {
                    "value": "rand_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "n_images",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "15",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "args.num_latent",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_41": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "binary_cross_entropy_132": {
                "variable": {
                    "value": "pixelwise_bce",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "decoded",
                    "type": "Variable",
                    "possible_values": []
                },
                "target": {
                    "value": "features",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "features.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "sum",
                    "type": "str",
                    "possible_values": []
                }
            },
            "load_169": {
                "f": {
                    "value": "param_dir + '/model.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "device_163": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_191": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_131": {
                "input": {
                    "value": "z_log_var",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/Generator_network.py": {
        "torch": {
            "Sequential_18": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_26": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(128, 64, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_51": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(self.input_dim, 64, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(128 * (self.input_size // 4) * (self.input_size // 4), 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_101": {
                "variable": {
                    "value": "self.G_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.G.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrG",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Adam_102": {
                "variable": {
                    "value": "self.D_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.D.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lrD",
                    "type": "Attribute",
                    "possible_values": []
                },
                "betas": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "rand_109": {
                "variable": {
                    "value": "self.sample_z_",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "DataLoader_252": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data/mnist', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "rand_219": {
                "variable": {
                    "value": "sample_z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "save_235": {
                "obj": {
                    "value": "self.G.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.param_dir + '/G.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "save_236": {
                "obj": {
                    "value": "self.D.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "self.param_dir + '/D.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_258": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST('data/fashion-mnist', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_20": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "num_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_27": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_30": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_31": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_52": {
                "in_channels": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_53": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Conv2d_54": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_55": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_56": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_59": {
                "in_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_60": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_61": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Linear_62": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_120": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_120": {
                "*size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "rand_136": {
                "variable": {
                    "value": "z_",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, self.z_dim)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_151": {
                "variable": {
                    "value": "D_fake_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "D_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(G_)",
                            "Call"
                        ],
                        [
                            "self.D(G_)",
                            "Call"
                        ]
                    ]
                }
            },
            "rand_154": {
                "variable": {
                    "value": "alpha",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(self.batch_size, 1, 1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "load_244": {
                "f": {
                    "value": "self.param_dir + '/G.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_245": {
                "f": {
                    "value": "self.param_dir + '/D.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "DataLoader_262": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('data/cifar10', train=True, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "no_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "DataLoader_266": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.SVHN('data/svhn', split=split, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_144": {
                "input": {
                    "value": "D_real",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x_)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_270": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.STL10('data/stl10', split=split, download=True, transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_163": {
                "outputs": {
                    "value": "pred_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x_hat)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * x_.data + (1 - alpha) * G_.data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(pred_hat.size()).cuda()",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grad_166": {
                "outputs": {
                    "value": "pred_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(x_hat)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "x_hat",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "alpha * x_.data + (1 - alpha) * G_.data",
                            "BinOp"
                        ]
                    ]
                },
                "grad_outputs": {
                    "value": "torch.ones(pred_hat.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "create_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mean_182": {
                "input": {
                    "value": "D_fake",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.D(G_)",
                            "Call"
                        ],
                        [
                            "self.D(G_)",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_274": {
                "variable": {
                    "value": "data_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.LSUN('data/lsun', classes=['bedroom_train'], transform=transform)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_163": {
                "*size": {
                    "value": "pred_hat.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_166": {
                "*size": {
                    "value": "pred_hat.size()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/Generator_pre_training.py": {
        "torch": {
            "manual_seed_78": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_79": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/Image.py": {
        "torch": {
            "Sequential_21": {
                "variable": {
                    "value": "self.fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(self.input_dim, 1024)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_29": {
                "variable": {
                    "value": "self.deconv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(128, 64, 4, 2, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_58": {
                "variable": {
                    "value": "self.enc_conv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_64": {
                "variable": {
                    "value": "self.enc_conv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_70": {
                "variable": {
                    "value": "self.enc_conv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_76": {
                "variable": {
                    "value": "self.z_mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.xDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_84": {
                "variable": {
                    "value": "self.z_log_var",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "64 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.xDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.dec_linear_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.xDim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "64 * 2 * 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_92": {
                "variable": {
                    "value": "self.dec_deconv_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(2, 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_98": {
                "variable": {
                    "value": "self.dec_deconv_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(4, 4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_104": {
                "variable": {
                    "value": "self.dec_deconv_3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(6, 6)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "stride": {
                    "value": "(3, 3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "leaky_relu_112": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.main_2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_116": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.main_2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_120": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.main_2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_129": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.main_2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_133": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.main_2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "leaky_relu_137": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.fc(input)",
                            "Call"
                        ],
                        [
                            "x.view(-1, 128, self.input_size // 4, self.input_size // 4)",
                            "Call"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_1(features)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_2(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.enc_conv_3(x)",
                            "Call"
                        ],
                        [
                            "F.leaky_relu(x)",
                            "Call"
                        ],
                        [
                            "self.main_2(h)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_140": {
                "variable": {
                    "value": "representation",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.z_mean(x.view(-1, 64 * 2 * 2)), self.z_log_var(x.view(-1, 64 * 2 * 2)))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_152": {
                "variable": {
                    "value": "self.main",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(3, 64, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_166": {
                "variable": {
                    "value": "self.linear_mu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "xDim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_167": {
                "variable": {
                    "value": "self.linear_log_sigma_sq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "xDim",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_193": {
                "variable": {
                    "value": "self.main_1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(xDim, 512)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_199": {
                "variable": {
                    "value": "self.main_2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.ConvTranspose2d(128, 256, 4, 2, 1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_241": {
                "variable": {
                    "value": "res",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(self.mu, self.log_sigma_sq)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_22": {
                "in_features": {
                    "value": "self.input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm1d_23": {
                "num_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_25": {
                "in_features": {
                    "value": "1024",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "BatchNorm1d_26": {
                "num_features": {
                    "value": "128 * (self.input_size // 4) * (self.input_size // 4)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_30": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_32": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_33": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "self.output_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Tanh_34": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_153": {
                "in_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_154": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_155": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_156": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_157": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_158": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_160": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_161": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_162": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_163": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_164": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_194": {
                "in_features": {
                    "value": "xDim",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_196": {
                "in_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ConvTranspose2d_200": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_201": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_202": {
                "num_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_203": {
                "in_channels": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_204": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_205": {
                "num_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_206": {
                "in_channels": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ReLU_207": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_208": {
                "num_features": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_209": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Sigmoid_210": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_256": {
                "f": {
                    "value": "os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) + '/generator_parameters/MNIST_WGAN_GP_Generator.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_268": {
                "f": {
                    "value": "os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) + '/generator_parameters/MNIST_Summary_Statistics.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_258": {
                "f": {
                    "value": "os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) + '/generator_parameters/FASHION-MNIST_WGAN_GP_Generator.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_271": {
                "f": {
                    "value": "os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) + '/generator_parameters/FASHION-MNIST_Summary_Statistics.pt'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_261": {
                "f": {
                    "value": "os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) + '/generator_parameters/SVHN_WGAN_GP_Generator.pkl'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "load_275": {
                "f": {
                    "value": "os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))) + '/generator_parameters/SVHN_Summary_Statistics.pth'",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/MG1.py": {
        "torch": {
            "reshape_12": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "thetas.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_13": {
                "variable": {
                    "value": "thetas",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "thetas.repeat(100, 1)",
                            "Call"
                        ],
                        [
                            "torch.t(thetas).to(self.args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_15": {
                "variable": {
                    "value": "a",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "thetas.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_16": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "thetas.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_17": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "thetas.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "t_28": {
                "variable": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.Tensor(np.quantile(y_t.cpu().detach().numpy(), 1.0 / (self.args.xDim - 1) * np.arange(self.args.xDim), axis=0)).to(self.args.device)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_24": {
                "variable": {
                    "value": "y_t",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_t, obs)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "mean_33": {
                "input": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.t(torch.Tensor(np.quantile(y_t.cpu().detach().numpy(), 1.0 / (self.args.xDim - 1) * np.arange(self.args.xDim), axis=0)).to(self.args.device)).detach()",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_33": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Exponential_21": {
                "rate": {
                    "value": "thetas[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_21": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "max_22": {
                "input": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.zeros(1, thetas.shape[1]).to(self.args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "Tensor_28": {}
        }
    },
    "simulators/Poisson.py": {
        "torch": {
            "cat_146": {
                "variable": {
                    "value": "result",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(result, torch.Tensor(self.poissonSingleSimulation(thetas[k].cpu().detach().numpy())).reshape(-1))",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Tensor_146": {},
            "reshape_146": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/SLCP_16.py": {
        "torch": {
            "tanh_12": {
                "variable": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "thetas[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_12": {
                "variable": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_13": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(diag1 ** 2, corr * diag1 * diag2, corr * diag1 * diag2, diag2 ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_13": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_15": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "thetas[:, :2] ** 2",
                            "BinOp"
                        ],
                        [
                            "context[:, :2] ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov + 1e-06 * torch.eye(2).to(self.args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_24": {
                "variable": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "context[:, 4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reshape_24": {
                "variable": {
                    "value": "corr",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_25": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(diag1 ** 2, corr * diag1 * diag2, corr * diag1 * diag2, diag2 ** 2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_25": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MultivariateNormal_27": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "thetas[:, :2] ** 2",
                            "BinOp"
                        ],
                        [
                            "context[:, :2] ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov + 1e-06 * torch.eye(2).to(self.args.device)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "eye_15": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "eye_27": {
                "n": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/SLCP_256.py": {
        "torch": {
            "eye_11": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "thetas.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultivariateNormal_13": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "thetas ** 2",
                            "BinOp"
                        ],
                        [
                            "context ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(thetas.shape[1]).to(self.args.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(context.shape[1]).to(self.args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "eye_21": {
                "variable": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "context.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "MultivariateNormal_23": {
                "variable": {
                    "value": "distribution",
                    "type": "Variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "thetas ** 2",
                            "BinOp"
                        ],
                        [
                            "context ** 2",
                            "BinOp"
                        ]
                    ]
                },
                "covariance_matrix": {
                    "value": "cov",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.eye(thetas.shape[1]).to(self.args.device)",
                            "Call"
                        ],
                        [
                            "torch.eye(context.shape[1]).to(self.args.device)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_24": {
                "variable": {
                    "value": "ll",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "context.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "simulators/base.py": {
        "torch": {}
    },
    "utils/input_range.py": {
        "torch": {
            "Tensor_6": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_7": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_10": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_11": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_14": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_15": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_18": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_19": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_22": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_23": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_26": {
                "variable": {
                    "value": "min",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Tensor_27": {
                "variable": {
                    "value": "max",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "utils/true_input.py": {
        "torch": {
            "zeros_20": {
                "*size": {
                    "value": "args.thetaDim",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_20": {
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "shape": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    }
}