{
    "utils/MOOD.py": {
        "sklearn": {
            "roc_curve_305": {
                "variable": {
                    "value": "(fpr, tpr, thresh)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "y_true": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(maxIndexTemp).cuda())",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones_like(T_score), np.zeros_like(F_score)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones_like(T_score), np.zeros_like(F_score)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones_like(T_score), np.zeros_like(F_score)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.max(F.softmax(pres[i], dim=1).detach().cpu().numpy(), axis=1)",
                            "Call"
                        ],
                        [
                            "T * torch.log(torch.sum(torch.exp(pres[i].detach().cpu().type(torch.DoubleTensor)) / T, dim=1)).numpy()",
                            "BinOp"
                        ],
                        [
                            "np.max(nnOutputs, axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([T_score, F_score], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([T_score, F_score], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([T_score, F_score], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "average_precision_score_296": {
                "y_true": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(maxIndexTemp).cuda())",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones_like(T_score), np.zeros_like(F_score)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones_like(T_score), np.zeros_like(F_score)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones_like(T_score), np.zeros_like(F_score)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.max(F.softmax(pres[i], dim=1).detach().cpu().numpy(), axis=1)",
                            "Call"
                        ],
                        [
                            "T * torch.log(torch.sum(torch.exp(pres[i].detach().cpu().type(torch.DoubleTensor)) / T, dim=1)).numpy()",
                            "BinOp"
                        ],
                        [
                            "np.max(nnOutputs, axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([T_score, F_score], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([T_score, F_score], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([T_score, F_score], axis=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "roc_auc_score_300": {
                "y_true": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Variable(torch.LongTensor(maxIndexTemp).cuda())",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones_like(T_score), np.zeros_like(F_score)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones_like(T_score), np.zeros_like(F_score)], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([np.ones_like(T_score), np.zeros_like(F_score)], axis=0)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.max(F.softmax(pres[i], dim=1).detach().cpu().numpy(), axis=1)",
                            "Call"
                        ],
                        [
                            "T * torch.log(torch.sum(torch.exp(pres[i].detach().cpu().type(torch.DoubleTensor)) / T, dim=1)).numpy()",
                            "BinOp"
                        ],
                        [
                            "np.max(nnOutputs, axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate([T_score, F_score], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([T_score, F_score], axis=0)",
                            "Call"
                        ],
                        [
                            "np.concatenate([T_score, F_score], axis=0)",
                            "Call"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "from_numpy_16": {
                "variable": {
                    "value": "MEAN",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(MEAN)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_17": {
                "variable": {
                    "value": "STD",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.array(STD)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_44": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ge_61": {
                "variable": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_65": {
                "variable": {
                    "value": "tempInputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "inputs.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "-noiseMagnitude",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "gradient",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ge(inputs.grad.data, 0)",
                            "Call"
                        ],
                        [
                            "(gradient.float() - 0.5) * 2",
                            "BinOp"
                        ],
                        [
                            "torch.ge(data.grad.data, 0)",
                            "Call"
                        ],
                        [
                            "(gradient.float() - 0.5) * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Tensor_136": {
                "variable": {
                    "value": "temp_list",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "variable": {
                    "value": "temp_precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "temp_precision",
                    "type": "Name",
                    "possible_values": [
                        [
                            "group_lasso.precision_",
                            "Attribute"
                        ],
                        [
                            "torch.from_numpy(temp_precision).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_181": {
                "variable": {
                    "value": "out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "out_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(data)[1][layer_index]",
                            "Subscript"
                        ],
                        [
                            "out_features.view(out_features.size(0), out_features.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(out_features, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_198": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-pure_gau",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ge_201": {
                "variable": {
                    "value": "gradient",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.grad.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "add_204": {
                "variable": {
                    "value": "tempInputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "data.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "-magnitude",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "alpha": {
                    "value": "gradient",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.ge(inputs.grad.data, 0)",
                            "Call"
                        ],
                        [
                            "(gradient.float() - 0.5) * 2",
                            "BinOp"
                        ],
                        [
                            "torch.ge(data.grad.data, 0)",
                            "Call"
                        ],
                        [
                            "(gradient.float() - 0.5) * 2",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_208": {
                "variable": {
                    "value": "noise_out_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise_out_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "model(Variable(tempInputs))[1][layer_index]",
                            "Subscript"
                        ],
                        [
                            "noise_out_features.view(noise_out_features.size(0), noise_out_features.size(1), -1)",
                            "Call"
                        ],
                        [
                            "torch.mean(noise_out_features, 2)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_219": {
                "variable": {
                    "value": "(noise_gaussian_score, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "noise_gaussian_score",
                    "type": "Call",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "np.asarray(noise_gaussian_score.cpu().numpy(), dtype=np.float32)",
                            "Call"
                        ],
                        [
                            "term_gau.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "torch.cat((noise_gaussian_score, term_gau.view(-1, 1)), 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mean_138": {
                "variable": {
                    "value": "temp_list[j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "list_features[out_count][j]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "input": {
                    "value": "pres[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_38": {
                "input": {
                    "value": "torch.sum(torch.exp(pres[i].detach().cpu().type(torch.DoubleTensor)) / T, dim=1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mean_109": {
                "variable": {
                    "value": "out_features[i]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "out_features[i].data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_149": {
                "variable": {
                    "value": "X",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(X, list_features[k][i] - sample_class_mean[k][i])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_191": {
                "variable": {
                    "value": "gaussian_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(gaussian_score, term_gau.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_197": {
                "input": {
                    "value": "zero_f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_features.data - batch_sample_mean",
                            "BinOp"
                        ],
                        [
                            "out_features - Variable(batch_sample_mean)",
                            "BinOp"
                        ],
                        [
                            "noise_out_features.data - batch_sample_mean",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "Variable(precision[layer_index])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_197": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "noise_gaussian_score",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(noise_gaussian_score, term_gau.view(-1, 1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "mm_187": {
                "input": {
                    "value": "zero_f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_features.data - batch_sample_mean",
                            "BinOp"
                        ],
                        [
                            "out_features - Variable(batch_sample_mean)",
                            "BinOp"
                        ],
                        [
                            "noise_out_features.data - batch_sample_mean",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "precision[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "mm_213": {
                "input": {
                    "value": "zero_f",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "out_features.data - batch_sample_mean",
                            "BinOp"
                        ],
                        [
                            "out_features - Variable(batch_sample_mean)",
                            "BinOp"
                        ],
                        [
                            "noise_out_features.data - batch_sample_mean",
                            "BinOp"
                        ]
                    ]
                },
                "mat2": {
                    "value": "precision[layer_index]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "diag_213": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_259": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "list_features[out_count][label]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(list_features[out_count][label], out[i].view(1, -1))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_263": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_38": {
                "input": {
                    "value": "torch.exp(pres[i].detach().cpu().type(torch.DoubleTensor)) / T",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_38": {
                "input": {
                    "value": "pres[i].detach().cpu().type(torch.DoubleTensor)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Flops/Glow-PyTorch-master/calculate_flops.py": {
        "torch": {}
    },
    "Flops/Glow-PyTorch-master/datasets.py": {
        "torch": {
            "clamp_26": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x * 255",
                            "BinOp"
                        ],
                        [
                            "torch.floor(x / 2 ** (8 - n_bits))",
                            "Call"
                        ],
                        [
                            "x / n_bins - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, -0.5, 0.5)",
                            "Call"
                        ],
                        [
                            "x + 0.5",
                            "BinOp"
                        ],
                        [
                            "x * 2 ** n_bits",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "-0.5",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "floor_19": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x / 2 ** (8 - n_bits)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_29": {
                "input": {
                    "value": "x",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "x * 255",
                            "BinOp"
                        ],
                        [
                            "torch.floor(x / 2 ** (8 - n_bits))",
                            "Call"
                        ],
                        [
                            "x / n_bins - 0.5",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(x, -0.5, 0.5)",
                            "Call"
                        ],
                        [
                            "x + 0.5",
                            "BinOp"
                        ],
                        [
                            "x * 2 ** n_bits",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "max": {
                    "value": "255",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "one_hot_49": {
                "tensor": {
                    "value": "torch.tensor(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "one_hot_85": {
                "tensor": {
                    "value": "torch.tensor(target)",
                    "type": "Call",
                    "possible_values": []
                },
                "num_classes": {
                    "value": "num_classes",
                    "type": "Constant",
                    "possible_values": [
                        [
                            "10",
                            "Constant"
                        ],
                        [
                            "10",
                            "Constant"
                        ]
                    ]
                }
            },
            "tensor_49": {
                "data": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "data": {
                    "value": "target",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Flops/Glow-PyTorch-master/model.py": {
        "torch": {
            "Sequential_22": {
                "variable": {
                    "value": "block",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "Conv2d(in_channels, hidden_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z1, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_136": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z1, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ModuleList_161": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ReLU_25": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_112": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_132": {
                "variable": {
                    "value": "scale",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scale + 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_258": {
                "*size": {
                    "value": "[1, self.flow.output_shapes[-1][1] * 2, self.flow.output_shapes[-1][2], self.flow.output_shapes[-1][3]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "no_grad_316": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "torch.log(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_117": {
                "input": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(scale + 2.0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scale + 2.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "sum_135": {
                "input": {
                    "value": "torch.log(scale)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "log_135": {
                "input": {
                    "value": "scale",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.sigmoid(scale + 2.0)",
                            "Call"
                        ],
                        [
                            "torch.sigmoid(scale + 2.0)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "Flops/Glow-PyTorch-master/modules.py": {
        "torch": {
            "normal_27": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "mean",
                    "type": "Variable",
                    "possible_values": []
                },
                "std": {
                    "value": "torch.exp(logs) * temperature",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_22": {
                "input": {
                    "value": "p",
                    "type": "Name",
                    "possible_values": [
                        [
                            "gaussian_p(mean, logs, x)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "[1, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Parameter_77": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_78": {
                "variable": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(*size)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Linear_160": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Parameter_166": {
                "variable": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Conv2d_191": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "compute_same_pad(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "compute_same_pad(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "not do_actnorm",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Conv2d_234": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "in_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(3",
                            "MethodArgument"
                        ],
                        [
                            "(3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Call",
                    "possible_values": [
                        [
                            "compute_same_pad(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "compute_same_pad(kernel_size, stride)",
                            "Call"
                        ],
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ],
                        [
                            "'same'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_240": {
                "variable": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(out_channels, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_251": {
                "variable": {
                    "value": "self.indices",
                    "type": "Attribute",
                    "possible_values": []
                },
                "start": {
                    "value": "self.num_channels - 1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "end": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "step": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_252": {
                "variable": {
                    "value": "self.indices_inverse",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.num_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randperm_261": {
                "variable": {
                    "value": "shuffle_idx",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "self.indices.shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_89": {
                "variable": {
                    "value": "vars",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "(input.clone() + bias) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_90": {
                "variable": {
                    "value": "logs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.scale / (torch.sqrt(vars) + 1e-06)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_291": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(z1, z2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_321": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.Tensor(w_init)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "lu_unpack_323": {
                "variable": {
                    "value": "(p, lower, upper)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "LU_data": {
                    "value": "*torch.lu(w_init)",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "diag_324": {
                "variable": {
                    "value": "s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upper",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.triu(upper, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "sign_325": {
                "variable": {
                    "value": "sign_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.diag(upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "log_326": {
                "variable": {
                    "value": "log_s",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.abs(s)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "triu_327": {
                "variable": {
                    "value": "upper",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "upper",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.triu(upper, 1)",
                            "Call"
                        ]
                    ]
                },
                "diagonal": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tril_328": {
                "variable": {
                    "value": "l_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones(w_shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "diagonal": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "eye_329": {
                "variable": {
                    "value": "eye",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "*w_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "Parameter_333": {
                "variable": {
                    "value": "self.lower",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "lower",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lower * self.l_mask + self.eye",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Parameter_334": {
                "variable": {
                    "value": "self.log_s",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "log_s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log(torch.abs(s))",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_335": {
                "variable": {
                    "value": "self.upper",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "upper",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.triu(upper, 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_380": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * torch.exp(-self.logs)",
                            "BinOp"
                        ],
                        [
                            "input * torch.exp(self.logs)",
                            "BinOp"
                        ],
                        [
                            "self._center(input, reverse)",
                            "Call"
                        ],
                        [
                            "self._center(input, reverse)",
                            "Call"
                        ],
                        [
                            "input[:, self.indices, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.inverse(self.weight)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(u_inv, torch.matmul(l_inv, p_inv))",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.p, torch.matmul(lower, u))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_385": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "input * torch.exp(-self.logs)",
                            "BinOp"
                        ],
                        [
                            "input * torch.exp(self.logs)",
                            "BinOp"
                        ],
                        [
                            "self._center(input, reverse)",
                            "Call"
                        ],
                        [
                            "self._center(input, reverse)",
                            "Call"
                        ],
                        [
                            "input[:, self.indices, :, :]",
                            "Subscript"
                        ]
                    ]
                },
                "weight": {
                    "value": "weight",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.inverse(self.weight)",
                            "Call"
                        ],
                        [
                            "self.weight",
                            "Attribute"
                        ],
                        [
                            "torch.matmul(u_inv, torch.matmul(l_inv, p_inv))",
                            "Call"
                        ],
                        [
                            "torch.matmul(self.p, torch.matmul(lower, u))",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_27": {
                "input": {
                    "value": "logs",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.log(self.scale / (torch.sqrt(vars) + 1e-06))",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_77": {
                "*size": {
                    "value": "*size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_78": {
                "*size": {
                    "value": "*size",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "no_grad_87": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_166": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "exp_170": {
                "input": {
                    "value": "self.logs * self.logscale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_240": {
                "*size": {
                    "value": "out_channels",
                    "type": "Variable",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_244": {
                "input": {
                    "value": "self.logs * self.logscale_factor",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "qr_318": {
                "input": {
                    "value": "torch.randn(*w_shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "inverse_348": {
                "variable": {
                    "value": "weight",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_358": {
                "input": {
                    "value": "self.sign_s * torch.exp(self.log_s)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "inverse_363": {
                "variable": {
                    "value": "u_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "u",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.upper * self.l_mask.transpose(0, 1).contiguous()",
                            "BinOp"
                        ],
                        [
                            "u + torch.diag(self.sign_s * torch.exp(self.log_s))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_364": {
                "variable": {
                    "value": "l_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "lower",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lower * self.l_mask + self.eye",
                            "BinOp"
                        ]
                    ]
                }
            },
            "inverse_365": {
                "variable": {
                    "value": "p_inv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.p",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_367": {
                "input": {
                    "value": "l_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.inverse(lower)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "p_inv",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.inverse(self.p)",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_369": {
                "input": {
                    "value": "lower",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self.lower * self.l_mask + self.eye",
                            "BinOp"
                        ]
                    ]
                },
                "other": {
                    "value": "u",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "self.upper * self.l_mask.transpose(0, 1).contiguous()",
                            "BinOp"
                        ],
                        [
                            "u + torch.diag(self.sign_s * torch.exp(self.log_s))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "mean_88": {
                "input": {
                    "value": "input.clone()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "[0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_106": {
                "input": {
                    "value": "-self.logs",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_108": {
                "input": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "randn_318": {
                "*size": {
                    "value": "*w_shape",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "abs_326": {
                "input": {
                    "value": "s",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.diag(upper)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_328": {
                "*size": {
                    "value": "w_shape",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[num_channels, num_channels]",
                            "List"
                        ]
                    ]
                }
            },
            "exp_17": {
                "input": {
                    "value": "logs * 2.0",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_117": {
                "input": {
                    "value": "self.logs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "lu_323": {
                "*args": {
                    "value": "w_init",
                    "type": null,
                    "possible_values": []
                }
            },
            "exp_358": {
                "input": {
                    "value": "self.log_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_360": {
                "input": {
                    "value": "self.log_s",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_90": {
                "input": {
                    "value": "vars",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.mean((input.clone() + bias) ** 2, dim=[0, 2, 3], keepdim=True)",
                            "Call"
                        ]
                    ]
                }
            },
            "slogdet_346": {
                "input": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Flops/Glow-PyTorch-master/train.py": {
        "torch": {
            "DataLoader_115": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_122": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_dataset",
                    "type": "Variable",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "eval_batch_size",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "n_workers",
                    "type": "Variable",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Adamax_168": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "5e-05",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LambdaLR_171": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adamax(model.parameters(), lr=lr, weight_decay=5e-05)",
                            "Call"
                        ]
                    ]
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "Name",
                    "possible_values": [
                        [
                            "lambda epoch: min(1.0, (epoch + 1) / warmup)",
                            "Lambda"
                        ]
                    ]
                }
            },
            "manual_seed_25": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "seed or random.randint(1, 10000)",
                            "BoolOp"
                        ]
                    ]
                }
            },
            "sigmoid_59": {
                "variable": {
                    "value": "y_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(y_logits)",
                            "Call"
                        ]
                    ]
                }
            },
            "binary_cross_entropy_with_logits_60": {
                "variable": {
                    "value": "loss_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(y_logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y.to(device)",
                            "Call"
                        ],
                        [
                            "y.to(device)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cross_entropy_64": {
                "variable": {
                    "value": "loss_classes",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "y_logits",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(y_logits)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "torch.argmax(y, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "reduction": {
                    "value": "reduction",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "'mean'",
                            "MethodArgument"
                        ],
                        [
                            "'mean'",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "cat_306": {
                "variable": {
                    "value": "init_batches",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "init_batches",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(init_batches).to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_43": {
                "input": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_54": {
                "input": {
                    "value": "nll",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "argmax_65": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "y.to(device)",
                            "Call"
                        ],
                        [
                            "y.to(device)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clip_grad_value__211": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "clip_value": {
                    "value": "max_grad_clip",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "clip_grad_norm__213": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "max_grad_norm",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_225": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_280": {
                "f": {
                    "value": "saved_model",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "no_grad_301": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_311": {
                "variable": {
                    "value": "init_targets",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "init_targets",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(init_targets).to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Constant"
                        ]
                    ]
                }
            },
            "is_available_105": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_284": {
                "f": {
                    "value": "saved_optimizer",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "mean_258": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_271": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.to(device)",
                            "Call"
                        ],
                        [
                            "x.to(device)",
                            "Call"
                        ]
                    ]
                }
            },
            "empty_261": {
                "*size": {
                    "value": "x['total_loss'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "empty_272": {
                "*size": {
                    "value": "x['nll'].shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "Flops/Glow-PyTorch-master/utils.py": {
        "torch": {
            "zeros_like_32": {
                "input": {
                    "value": "x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x + torch.zeros_like(x).uniform_(0, 1.0 / n_bins)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_34": {
                "*size": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                },
                "device": {
                    "value": "x.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "Flops/Glow-PyTorch-master/utils_flop.py": {
        "torch": {
            "load_127": {
                "variable": {
                    "value": "state",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ],
                        [
                            "fin.readlines()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "KLDivLoss_20": {
                "variable": {
                    "value": "self.kld_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_21": {
                "variable": {
                    "value": "self.ce_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSoftmax_22": {
                "variable": {
                    "value": "self.log_softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_23": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_105": {
                "obj": {
                    "value": "state",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.load(model_filename)",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "model_filename",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(model_dir, filename)",
                            "Call"
                        ],
                        [
                            "fin.readlines()[0]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "SGD_134": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "args.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "nesterov": {
                    "value": "args.nesterov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RMSprop_138": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "alpha": {
                    "value": "args.alpha",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Adam_142": {
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta": {
                    "value": "(args.beta1, args.beta2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_295": {
                "*size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "H",
                    "type": "Variable",
                    "possible_values": []
                },
                "layout": {
                    "value": "W",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "Flops/pixel-cnn-pp-master/layers.py": {
        "torch": {
            "Conv2d_35": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ZeroPad2d_42": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(int((filter_size[1] - 1) / 2), int((filter_size[1] - 1) / 2), filter_size[0] - 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPad2d_103": {
                "variable": {
                    "value": "self.pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(filter_size[1] - 1, 0, filter_size[0] - 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_104": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "num_filters_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Dropout2d_180": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "0.5",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "chunk_193": {
                "variable": {
                    "value": "(a, b)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x) if self.norm == 'batch_norm' else x",
                            "IfExp"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "self.pad(x)",
                            "Call"
                        ],
                        [
                            "self.conv(x)",
                            "Call"
                        ],
                        [
                            "self.bn(x) if self.norm == 'batch_norm' else x",
                            "IfExp"
                        ],
                        [
                            "self.deconv(x)",
                            "Call"
                        ],
                        [
                            "x[:, :, :xs[2] - self.filter_size[0] + 1, :xs[3] - self.filter_size[1] + 1]",
                            "Subscript"
                        ],
                        [
                            "self.conv_input(self.nonlinearity(og_x))",
                            "Call"
                        ],
                        [
                            "x + self.nin_skip(self.nonlinearity(a))",
                            "BinOp"
                        ],
                        [
                            "self.nonlinearity(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x)",
                            "Call"
                        ],
                        [
                            "self.conv_out(x)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_13": {
                "in_features": {
                    "value": "dim_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "dim_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_filters_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_75": {
                "in_channels": {
                    "value": "num_filters_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_116": {
                "variable": {
                    "value": "self.bn",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "num_filters_out",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_141": {
                "in_channels": {
                    "value": "num_filters_in",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_filters_out",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "filter_size",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ],
                        [
                            "(2",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ],
                        [
                            "(1",
                            "MethodArgument"
                        ]
                    ]
                },
                "output_padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_194": {
                "input": {
                    "value": "b",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ZeroPad2d_53": {
                "padding": {
                    "value": "(0, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPad2d_119": {
                "padding": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            }
        }
    },
    "Flops/pixel-cnn-pp-master/main.py": {
        "torch": {
            "Adam_96": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_97": {
                "variable": {
                    "value": "scheduler",
                    "type": "Variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": [
                        [
                            "optim.Adam(model.parameters(), lr=args.lr)",
                            "Call"
                        ]
                    ]
                },
                "step_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "gamma": {
                    "value": "args.lr_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_49": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataLoader_65": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(args.data_dir, download=True, train=True, transform=ds_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_69": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST(args.data_dir, train=False, transform=ds_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_101": {
                "variable": {
                    "value": "data",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "sample_batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "25",
                            "Constant"
                        ]
                    ]
                },
                "out": {
                    "value": "obs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "obs[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "obs[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(args.data_dir, train=True, download=True, transform=ds_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_79": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10(args.data_dir, train=False, transform=ds_transforms)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "synchronize_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "synchronize_149": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_165": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "'models/{}_{}.pth'.format(model_name, epoch)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "Flops/pixel-cnn-pp-master/model.py": {
        "torch": {
            "ModuleList_15": {
                "variable": {
                    "value": "self.u_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[gated_resnet(nr_filters, down_shifted_conv2d, resnet_nonlinearity, skip_connection=0) for _ in range(nr_resnet)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_20": {
                "variable": {
                    "value": "self.ul_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[gated_resnet(nr_filters, down_right_shifted_conv2d, resnet_nonlinearity, skip_connection=1) for _ in range(nr_resnet)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_41": {
                "variable": {
                    "value": "self.u_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[gated_resnet(nr_filters, down_shifted_conv2d, resnet_nonlinearity, skip_connection=1) for _ in range(nr_resnet)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_46": {
                "variable": {
                    "value": "self.ul_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[gated_resnet(nr_filters, down_right_shifted_conv2d, resnet_nonlinearity, skip_connection=2) for _ in range(nr_resnet)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ZeroPad2d_70": {
                "variable": {
                    "value": "self.right_shift_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPad2d_71": {
                "variable": {
                    "value": "self.down_shift_pad",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(0, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ModuleList_74": {
                "variable": {
                    "value": "self.down_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PixelCNNLayer_down(down_nr_resnet[i], nr_filters, self.resnet_nonlinearity) for i in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_77": {
                "variable": {
                    "value": "self.up_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[PixelCNNLayer_up(nr_resnet, nr_filters, self.resnet_nonlinearity) for _ in range(3)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_80": {
                "variable": {
                    "value": "self.downsize_u_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[down_shifted_conv2d(nr_filters, nr_filters, stride=(2, 2)) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_83": {
                "variable": {
                    "value": "self.downsize_ul_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[down_right_shifted_conv2d(nr_filters, nr_filters, stride=(2, 2)) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_86": {
                "variable": {
                    "value": "self.upsize_u_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[down_shifted_deconv2d(nr_filters, nr_filters, stride=(2, 2)) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_89": {
                "variable": {
                    "value": "self.upsize_ul_stream",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[down_right_shifted_deconv2d(nr_filters, nr_filters, stride=(2, 2)) for _ in range(2)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_95": {
                "variable": {
                    "value": "self.ul_init",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[down_shifted_conv2d(input_channels + 1, nr_filters, filter_size=(1, 3), shift_output_down=True), down_right_shifted_conv2d(input_channels + 1, nr_filters, filter_size=(2, 1), shift_output_right=True)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cat_118": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x, padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "(x, self.init_padding)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "elu_151": {
                "input": {
                    "value": "ul",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.ul_stream[i](ul, a=u)",
                            "Call"
                        ],
                        [
                            "self.ul_stream[i](ul, a=torch.cat((u, ul_list.pop()), 1))",
                            "Call"
                        ],
                        [
                            "ul_list.pop()",
                            "Call"
                        ],
                        [
                            "self.upsize_ul_stream[i](ul)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_110": {
                "*size": {
                    "value": "xs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "xs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "xs[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "ones_116": {
                "*size": {
                    "value": "xs[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "xs[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "xs[3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "from_numpy_163": {
                "ndarray": {
                    "value": "xx_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "(np.random.rand(15, 32, 32, 100) * 3).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_164": {
                "ndarray": {
                    "value": "yy_t",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.random.uniform(-1, 1, size=(15, 32, 32, 3)).astype('float32')",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_53": {
                "tensors": {
                    "value": "(u, ul_list.pop())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "Flops/pixel-cnn-pp-master/utils.py": {
        "torch": {
            "max_23": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1) + Variable(torch.zeros(xs + [nr_mix]).cuda(), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1) + Variable(torch.zeros(xs + [nr_mix]).cuda(), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "means + torch.exp(log_scales) * (torch.log(u) - torch.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "means + torch.exp(log_scales) * (torch.log(u) - torch.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "x[:, :, :xs[2] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, :xs[3] - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len(x.size()) - 3",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "max_24": {
                "variable": {
                    "value": "(m2, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1) + Variable(torch.zeros(xs + [nr_mix]).cuda(), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1) + Variable(torch.zeros(xs + [nr_mix]).cuda(), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "means + torch.exp(log_scales) * (torch.log(u) - torch.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "means + torch.exp(log_scales) * (torch.log(u) - torch.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "x[:, :, :xs[2] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, :xs[3] - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len(x.size()) - 3",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_32": {
                "variable": {
                    "value": "(m, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1) + Variable(torch.zeros(xs + [nr_mix]).cuda(), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "x.permute(0, 2, 3, 1)",
                            "Call"
                        ],
                        [
                            "x.contiguous()",
                            "Call"
                        ],
                        [
                            "x.unsqueeze(-1) + Variable(torch.zeros(xs + [nr_mix]).cuda(), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "means + torch.exp(log_scales) * (torch.log(u) - torch.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "means + torch.exp(log_scales) * (torch.log(u) - torch.log(1.0 - u))",
                            "BinOp"
                        ],
                        [
                            "x[:, :, :xs[2] - 1, :]",
                            "Subscript"
                        ],
                        [
                            "x[:, :, :, :xs[3] - 1]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "axis",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len(x.size()) - 3",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_52": {
                "variable": {
                    "value": "log_scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l[:, :, :, :, nr_mix:2 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "tanh_54": {
                "variable": {
                    "value": "coeffs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l[:, :, :, :, 2 * nr_mix:3 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_65": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(means[:, :, :, 0, :].unsqueeze(3), m2, m3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "exp_67": {
                "variable": {
                    "value": "inv_stdv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_69": {
                "variable": {
                    "value": "cdf_plus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plus_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_71": {
                "variable": {
                    "value": "cdf_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "clamp_119": {
                "variable": {
                    "value": "log_scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l[:, :, :, :, nr_mix:2 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "exp_127": {
                "variable": {
                    "value": "inv_stdv",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-log_scales",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sigmoid_129": {
                "variable": {
                    "value": "cdf_plus",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "plus_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sigmoid_131": {
                "variable": {
                    "value": "cdf_min",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "min_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_181": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l[:, :, :, :, :nr_mix] * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_182": {
                "variable": {
                    "value": "log_scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, dim=4)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_189": {
                "input": {
                    "value": "x[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_213": {
                "variable": {
                    "value": "means",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "l[:, :, :, :, :nr_mix] * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_214": {
                "variable": {
                    "value": "log_scales",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, dim=4)",
                    "type": "Call",
                    "possible_values": []
                },
                "min": {
                    "value": "-7.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sum_216": {
                "variable": {
                    "value": "coeffs",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.tanh(l[:, :, :, :, 2 * nr_mix:3 * nr_mix]) * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_225": {
                "input": {
                    "value": "x[:, :, :, 0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_226": {
                "input": {
                    "value": "x[:, :, :, 1] + coeffs[:, :, :, 0] * x0",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "clamp_228": {
                "input": {
                    "value": "x[:, :, :, 2] + coeffs[:, :, :, 1] * x0 + coeffs[:, :, :, 2] * x1",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-1.0",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_231": {
                "variable": {
                    "value": "out",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[x0.view(xs[:-1] + [1]), x1.view(xs[:-1] + [1]), x2.view(xs[:-1] + [1])]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_260": {
                "variable": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "path",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "elu_16": {
                "input": {
                    "value": "torch.cat([x, -x], dim=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_16": {
                "tensors": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len(x.size()) - 3",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_25": {
                "input": {
                    "value": "torch.sum(torch.exp(x - m2), dim=axis)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_33": {
                "input": {
                    "value": "torch.sum(torch.exp(x - m), dim=axis, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_73": {
                "input": {
                    "value": "plus_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_75": {
                "input": {
                    "value": "min_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_101": {
                "input": {
                    "value": "log_probs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cond * log_cdf_plus + (1.0 - cond) * inner_out",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_probs, dim=3) + log_prob_from_logits(logit_probs)",
                            "BinOp"
                        ],
                        [
                            "cond * log_cdf_plus + (1.0 - cond) * inner_out",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_probs, dim=3) + log_prob_from_logits(logit_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_103": {
                "input": {
                    "value": "log_sum_exp(log_probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softplus_133": {
                "input": {
                    "value": "plus_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * (centered_x + 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softplus_135": {
                "input": {
                    "value": "min_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * (centered_x - 1.0 / 255.0)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_148": {
                "input": {
                    "value": "log_probs",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cond * log_cdf_plus + (1.0 - cond) * inner_out",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_probs, dim=3) + log_prob_from_logits(logit_probs)",
                            "BinOp"
                        ],
                        [
                            "cond * log_cdf_plus + (1.0 - cond) * inner_out",
                            "BinOp"
                        ],
                        [
                            "torch.sum(log_probs, dim=3) + log_prob_from_logits(logit_probs)",
                            "BinOp"
                        ]
                    ]
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_150": {
                "input": {
                    "value": "log_sum_exp(log_probs)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "log_175": {
                "input": {
                    "value": "temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(logit_probs.size())",
                            "Call"
                        ],
                        [
                            "temp.cuda()",
                            "Call"
                        ],
                        [
                            "logit_probs.data - torch.log(-torch.log(temp))",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(logit_probs.size())",
                            "Call"
                        ],
                        [
                            "temp.cuda()",
                            "Call"
                        ],
                        [
                            "logit_probs.data - torch.log(-torch.log(temp))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_182": {
                "input": {
                    "value": "l[:, :, :, :, nr_mix:2 * nr_mix] * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_207": {
                "input": {
                    "value": "temp",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.FloatTensor(logit_probs.size())",
                            "Call"
                        ],
                        [
                            "temp.cuda()",
                            "Call"
                        ],
                        [
                            "logit_probs.data - torch.log(-torch.log(temp))",
                            "BinOp"
                        ],
                        [
                            "torch.FloatTensor(logit_probs.size())",
                            "Call"
                        ],
                        [
                            "temp.cuda()",
                            "Call"
                        ],
                        [
                            "logit_probs.data - torch.log(-torch.log(temp))",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_214": {
                "input": {
                    "value": "l[:, :, :, :, nr_mix:2 * nr_mix] * sel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ZeroPad2d_245": {
                "padding": {
                    "value": "(0, 0, 1, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "ZeroPad2d_255": {
                "padding": {
                    "value": "(1, 0, 0, 0)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_15": {
                "tensors": {
                    "value": "[x, -x]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len(x.size()) - 3",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "numel_15": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_25": {
                "input": {
                    "value": "torch.exp(x - m2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len(x.size()) - 3",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sum_33": {
                "input": {
                    "value": "torch.exp(x - m)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "axis",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "len(x.size()) - 3",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ],
                        [
                            "len(x.size()) - 1",
                            "BinOp"
                        ]
                    ]
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_58": {
                "*size": {
                    "value": "xs + [nr_mix]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_80": {
                "input": {
                    "value": "mid_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * centered_x",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * centered_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_96": {
                "input": {
                    "value": "torch.clamp(cdf_delta, min=1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "*size": {
                    "value": "xs + [nr_mix]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softplus_140": {
                "input": {
                    "value": "mid_in",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "inv_stdv * centered_x",
                            "BinOp"
                        ],
                        [
                            "inv_stdv * centered_x",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_143": {
                "input": {
                    "value": "torch.clamp(cdf_delta, min=1e-12)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "exp_188": {
                "input": {
                    "value": "log_scales",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(l[:, :, :, :, nr_mix:2 * nr_mix], min=-7.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(l[:, :, :, :, nr_mix:2 * nr_mix], min=-7.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, dim=4), min=-7.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, dim=4), min=-7.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tanh_216": {
                "input": {
                    "value": "l[:, :, :, :, 2 * nr_mix:3 * nr_mix]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "exp_224": {
                "input": {
                    "value": "log_scales",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.clamp(l[:, :, :, :, nr_mix:2 * nr_mix], min=-7.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(l[:, :, :, :, nr_mix:2 * nr_mix], min=-7.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, dim=4), min=-7.0)",
                            "Call"
                        ],
                        [
                            "torch.clamp(torch.sum(l[:, :, :, :, nr_mix:2 * nr_mix] * sel, dim=4), min=-7.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "exp_25": {
                "input": {
                    "value": "x - m2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_33": {
                "input": {
                    "value": "x - m",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clamp_96": {
                "input": {
                    "value": "cdf_delta",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cdf_plus - cdf_min",
                            "BinOp"
                        ],
                        [
                            "cdf_plus - cdf_min",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "clamp_143": {
                "input": {
                    "value": "cdf_delta",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "cdf_plus - cdf_min",
                            "BinOp"
                        ],
                        [
                            "cdf_plus - cdf_min",
                            "BinOp"
                        ]
                    ]
                },
                "min": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_188": {
                "input": {
                    "value": "1.0 - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_224": {
                "input": {
                    "value": "1.0 - u",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "DataParallel_86": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "getattr(models, mood_args.arch)(mood_args)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model).cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_88": {
                "variable": {
                    "value": "criterion",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "rand_136": {
                "variable": {
                    "value": "temp_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "out": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "dtype": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                },
                "layout": {
                    "value": "32",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_97": {
                "f": {
                    "value": "mood_args.file",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/msdnet.py": {
        "torch": {
            "Sequential_9": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nIn, nOut, kernel_size=kernel, stride=stride, padding=padding, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layer",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_97": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_137": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_186": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "parallel_modules",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_200": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_210": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_211": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_329": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBasic(nIn, interChannels1, kernel=3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_337": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBasic(nIn, nIn, kernel=3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_371": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_76": {
                "tensors": {
                    "value": "res",
                    "type": "List",
                    "possible_values": [
                        [
                            "[x[1], self.conv_down(x[0]), self.conv_normal(x[1])]",
                            "List"
                        ],
                        [
                            "[x[0], self.conv_normal(x[0])]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.m(x[-1])",
                            "Call"
                        ],
                        [
                            "res.view(res.size(0), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_91": {
                "tensors": {
                    "value": "res",
                    "type": "List",
                    "possible_values": [
                        [
                            "[x[1], self.conv_down(x[0]), self.conv_normal(x[1])]",
                            "List"
                        ],
                        [
                            "[x[0], self.conv_normal(x[0])]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.m(x[-1])",
                            "Call"
                        ],
                        [
                            "res.view(res.size(0), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_10": {
                "in_channels": {
                    "value": "nIn",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "nOut * args.grFactor[0]",
                            "BinOp"
                        ],
                        [
                            "nOut * args.grFactor[i]",
                            "BinOp"
                        ],
                        [
                            "args.nChannels",
                            "Attribute"
                        ],
                        [
                            "nIn + args.growthRate",
                            "BinOp"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_12": {
                "num_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_13": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_50": {
                "num_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_51": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_102": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nIn, nOut * args.grFactor[0], 7, 2, 3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_317": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_332": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_340": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_36": {
                "in_channels": {
                    "value": "nIn",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "nOut * args.grFactor[0]",
                            "BinOp"
                        ],
                        [
                            "nOut * args.grFactor[i]",
                            "BinOp"
                        ],
                        [
                            "args.nChannels",
                            "Attribute"
                        ],
                        [
                            "nIn + args.growthRate",
                            "BinOp"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nInner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "num_features": {
                    "value": "nInner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_39": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_42": {
                "in_channels": {
                    "value": "nInner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_45": {
                "in_channels": {
                    "value": "nInner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_103": {
                "in_channels": {
                    "value": "nIn",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "nOut * args.grFactor[0]",
                            "BinOp"
                        ],
                        [
                            "nOut * args.grFactor[i]",
                            "BinOp"
                        ],
                        [
                            "args.nChannels",
                            "Attribute"
                        ],
                        [
                            "nIn + args.growthRate",
                            "BinOp"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut * args.grFactor[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_104": {
                "num_features": {
                    "value": "nOut * args.grFactor[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_105": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_106": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/msdnet_ge.py": {
        "torch": {
            "Sequential_36": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nIn, nOut, kernel_size=kernel, stride=stride, padding=padding, bias=False)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_80": {
                "variable": {
                    "value": "self.net",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*layer",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_124": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_164": {
                "variable": {
                    "value": "self.layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_213": {
                "variable": {
                    "value": "self.m",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "parallel_modules",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Linear_227": {
                "variable": {
                    "value": "self.linear",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "channel",
                    "type": "Variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ModuleList_237": {
                "variable": {
                    "value": "self.blocks",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_238": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_357": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBasic(nIn, interChannels1, kernel=3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_365": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "ConvBasic(nIn, nIn, kernel=3, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_398": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.pretrained",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_103": {
                "tensors": {
                    "value": "res",
                    "type": "List",
                    "possible_values": [
                        [
                            "[x[1], self.conv_down(x[0]), self.conv_normal(x[1])]",
                            "List"
                        ],
                        [
                            "[x[0], self.conv_normal(x[0])]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.m(x[-1])",
                            "Call"
                        ],
                        [
                            "res.view(res.size(0), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_118": {
                "tensors": {
                    "value": "res",
                    "type": "List",
                    "possible_values": [
                        [
                            "[x[1], self.conv_down(x[0]), self.conv_normal(x[1])]",
                            "List"
                        ],
                        [
                            "[x[0], self.conv_normal(x[0])]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "self.m(x[-1])",
                            "Call"
                        ],
                        [
                            "res.view(res.size(0), -1)",
                            "Call"
                        ],
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "in_channels": {
                    "value": "nIn",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "nOut * args.grFactor[0]",
                            "BinOp"
                        ],
                        [
                            "nOut * args.grFactor[i]",
                            "BinOp"
                        ],
                        [
                            "args.nChannels",
                            "Attribute"
                        ],
                        [
                            "nIn + args.growthRate",
                            "BinOp"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_39": {
                "num_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_40": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_77": {
                "num_features": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_129": {
                "variable": {
                    "value": "conv",
                    "type": "Variable",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(nIn, nOut * args.grFactor[0], 7, 2, 3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_344": {
                "*args": {
                    "value": "*layers",
                    "type": null,
                    "possible_values": []
                }
            },
            "AvgPool2d_360": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_368": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_63": {
                "in_channels": {
                    "value": "nIn",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "nOut * args.grFactor[0]",
                            "BinOp"
                        ],
                        [
                            "nOut * args.grFactor[i]",
                            "BinOp"
                        ],
                        [
                            "args.nChannels",
                            "Attribute"
                        ],
                        [
                            "nIn + args.growthRate",
                            "BinOp"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nInner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_65": {
                "num_features": {
                    "value": "nInner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                }
            },
            "ReLU_66": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "in_channels": {
                    "value": "nInner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_72": {
                "in_channels": {
                    "value": "nInner",
                    "type": "Name",
                    "possible_values": [
                        [
                            "nIn",
                            "Name"
                        ],
                        [
                            "min(nInner, bnWidth * nOut)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut",
                    "type": "Variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_130": {
                "in_channels": {
                    "value": "nIn",
                    "type": "BinOp",
                    "possible_values": [
                        [
                            "nOut * args.grFactor[0]",
                            "BinOp"
                        ],
                        [
                            "nOut * args.grFactor[i]",
                            "BinOp"
                        ],
                        [
                            "args.nChannels",
                            "Attribute"
                        ],
                        [
                            "nIn + args.growthRate",
                            "BinOp"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ],
                        [
                            "math.floor(1.0 * args.reduction * nIn)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nOut * args.grFactor[0]",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_131": {
                "num_features": {
                    "value": "nOut * args.grFactor[0]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ReLU_132": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_133": {
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "models/msdnet_imta.py": {
        "torch": {
            "ModuleList_33": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_34": {
                "variable": {
                    "value": "self.isc_modules",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_57": {
                "variable": {
                    "value": "in_logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(logits[i], feat)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "Linear_40": {
                "in_features": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits_channels[i]",
                            "Subscript"
                        ],
                        [
                            "logits_channels[i] * 2",
                            "BinOp"
                        ]
                    ]
                },
                "out_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Sequential_43": {
                "*args": {
                    "value": "nn.Linear(args.num_classes, out_channels)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_44": {
                "in_features": {
                    "value": "args.num_classes",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits_channels[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "BatchNorm1d_45": {
                "num_features": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "logits_channels[i + 1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "ReLU_46": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "msd_dataloader.py": {
        "torch": {
            "randperm_59": {
                "variable": {
                    "value": "train_set_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "len(train_set)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_62": {
                "variable": {
                    "value": "train_set_index",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(args.save, 'index.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_76": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(train_set_index[:-num_sample_valid])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_82": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "torch.utils.data.sampler.SubsetRandomSampler(train_set_index[-num_sample_valid:])",
                    "type": "Call",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_88": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_94": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=True, download=True, transform=transforms.Compose([transforms.RandomCrop(32, padding=4), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(traindir, transforms.Compose([transforms.RandomResizedCrop(224), transforms.RandomHorizontalFlip(), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_99": {
                "variable": {
                    "value": "val_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "Call",
                    "possible_values": [
                        [
                            "datasets.CIFAR10(args.data_root, train=False, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.CIFAR100(args.data_root, train=False, download=True, transform=transforms.Compose([transforms.ToTensor(), normalize]))",
                            "Call"
                        ],
                        [
                            "datasets.ImageFolder(valdir, transforms.Compose([transforms.Resize(256), transforms.CenterCrop(224), transforms.ToTensor(), normalize]))",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "args.workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "save_65": {
                "obj": {
                    "value": "train_set_index",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.randperm(len(train_set))",
                            "Call"
                        ],
                        [
                            "torch.load(os.path.join(args.save, 'index.pth'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.save, 'index.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_78": {
                "indices": {
                    "value": "train_set_index[:-num_sample_valid]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "SubsetRandomSampler_84": {
                "indices": {
                    "value": "train_set_index[-num_sample_valid:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "utils/dataloader.py": {
        "torch": {
            "DataLoader_42": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR10('data/cifar10', train=False, download=True, transform=transform_cifar10)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_58": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CelebA('data/celebA', split='test', download=True, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_73": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.CIFAR100('data/cifar100', train=False, download=True, transform=transform_cifar100)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_89": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.MNIST('data/mnist', train=False, download=True, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_105": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.KMNIST('data/kmnist', train=False, download=True, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.FashionMNIST('data/fasionmnist', train=False, download=True, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_152": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "datasets.STL10('data/STL10', split='test', folds=0, download=True, transform=transformer)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_171": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "info_svhn_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "svhn.SVHN('data/svhn', split='test', transform=transformer, download=True)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_188": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "info_dtd_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root='data/dtd/images', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_204": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "info_place365_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder(root='data/places365/test_subset', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_220": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "info_lsun_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder('data/LSUN', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_236": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "info_lsunR_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder('data/LSUN_resize', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_252": {
                "variable": {
                    "value": "dataloader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "info_isun_dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torchvision.datasets.ImageFolder('data/iSUN', transform=transformer)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "bs",
                    "type": "Variable",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "utils/msdnet_function.py": {
        "torch": {
            "no_grad_36": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "utils/svhn_loader.py": {
        "torch": {}
    }
}