{
    "mnist_3.0_convolutional_31.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([5, 5, 1, K], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "B1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([K]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([5, 5, K, L], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "B2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([L]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([4, 4, L, M], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "B3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([M]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "W21",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([2, 12], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "B21",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([12]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([7 * 7 * M, N], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "B4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([N]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([N, 11], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "B5",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([11]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "Y1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(X, W1, strides=[1, stride, stride, 1], padding='SAME') + B1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(Y1, W2, strides=[1, stride, stride, 1], padding='SAME') + B2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "Y3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(Y2, W3, strides=[1, stride, stride, 1], padding='SAME') + B3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(X2, W21) + B21",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(X2, W21) + B21)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Y21, [-1, 1, 1, 12])",
                            "Call"
                        ],
                        [
                            "tf.tile(Y21, [1, 7, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_55": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(X2, W21) + B21)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Y21, [-1, 1, 1, 12])",
                            "Call"
                        ],
                        [
                            "tf.tile(Y21, [1, 7, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(Y2, W3, strides=[1, stride, stride, 1], padding='SAME') + B3)",
                            "Call"
                        ],
                        [
                            "Y3 + Y21",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "Y4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(YY, W4) + B4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "Ylogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y4, W5) + B5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "Ylogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y4, W5) + B5",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 11])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_72": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_76": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_79": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_80": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_82": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_8": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_30": {
                "shape": {
                    "value": "[5, 5, 1, K]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_32": {
                "shape": {
                    "value": "[5, 5, K, L]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_34": {
                "shape": {
                    "value": "[4, 4, L, M]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_37": {
                "shape": {
                    "value": "[2, 12]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_40": {
                "shape": {
                    "value": "[7 * 7 * M, N]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_42": {
                "shape": {
                    "value": "[N, 11]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "Y4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(YY, W4) + B4)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([N, 11], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_69": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=Ylogits, labels=Y_)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy) * 100",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_72": {
                "input": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 11])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(Y, 1), tf.argmax(Y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_31": {
                "shape": {
                    "value": "[K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_33": {
                "shape": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_35": {
                "shape": {
                    "value": "[M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_38": {
                "shape": {
                    "value": "[12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_41": {
                "shape": {
                    "value": "[N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_43": {
                "shape": {
                    "value": "[11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([5, 5, 1, K], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "input": {
                    "value": "Y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(X, W1, strides=[1, stride, stride, 1], padding='SAME') + B1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([5, 5, K, L], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_51": {
                "input": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(Y1, W2, strides=[1, stride, stride, 1], padding='SAME') + B2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([4, 4, L, M], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([2, 12], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_61": {
                "a": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Y3, shape=[-1, 7 * 7 * M])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([7 * 7 * M, N], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_3.0_convolutional_32.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([5, 5, 1, K], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "B1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([K]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([5, 5, K, L], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "B2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([L]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([4, 4, L, M], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "B3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([M]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "W21",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([1, 12], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "B21",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([12]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([7 * 7 * M, N], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "B4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([N]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([N, 3], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "B5",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([3]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "Y1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(X, W1, strides=[1, stride, stride, 1], padding='SAME') + B1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(Y1, W2, strides=[1, stride, stride, 1], padding='SAME') + B2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "Y3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(Y2, W3, strides=[1, stride, stride, 1], padding='SAME') + B3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(X2, W21) + B21",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(X2, W21) + B21)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Y21, [-1, 1, 1, 12])",
                            "Call"
                        ],
                        [
                            "tf.tile(Y21, [1, 7, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_55": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(X2, W21) + B21)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Y21, [-1, 1, 1, 12])",
                            "Call"
                        ],
                        [
                            "tf.tile(Y21, [1, 7, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(Y2, W3, strides=[1, stride, stride, 1], padding='SAME') + B3)",
                            "Call"
                        ],
                        [
                            "Y3 + Y21",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "Y4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(YY, W4) + B4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "Ylogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y4, W5) + B5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "Ylogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y4, W5) + B5",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_72": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_76": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_79": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_80": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_82": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_8": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_30": {
                "shape": {
                    "value": "[5, 5, 1, K]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_32": {
                "shape": {
                    "value": "[5, 5, K, L]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_34": {
                "shape": {
                    "value": "[4, 4, L, M]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_37": {
                "shape": {
                    "value": "[1, 12]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_40": {
                "shape": {
                    "value": "[7 * 7 * M, N]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_42": {
                "shape": {
                    "value": "[N, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "Y4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(YY, W4) + B4)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([N, 3], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_69": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=Ylogits, labels=Y_)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy) * 100",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_72": {
                "input": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(Y, 1), tf.argmax(Y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_31": {
                "shape": {
                    "value": "[K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_33": {
                "shape": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_35": {
                "shape": {
                    "value": "[M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_38": {
                "shape": {
                    "value": "[12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_41": {
                "shape": {
                    "value": "[N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_43": {
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([5, 5, 1, K], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "input": {
                    "value": "Y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(X, W1, strides=[1, stride, stride, 1], padding='SAME') + B1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([5, 5, K, L], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_51": {
                "input": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(Y1, W2, strides=[1, stride, stride, 1], padding='SAME') + B2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([4, 4, L, M], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([1, 12], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_61": {
                "a": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Y3, shape=[-1, 7 * 7 * M])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([7 * 7 * M, N], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_3.0_convolutional_33.py": {
        "tensorflow": {
            "placeholder_16": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_17": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_21": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_30": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([5, 5, 1, K], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_31": {
                "variable": {
                    "value": "B1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([K]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_32": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([5, 5, K, L], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_33": {
                "variable": {
                    "value": "B2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([L]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_34": {
                "variable": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([4, 4, L, M], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_35": {
                "variable": {
                    "value": "B3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([M]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_37": {
                "variable": {
                    "value": "W21",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([1, 12], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_38": {
                "variable": {
                    "value": "B21",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([12]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_40": {
                "variable": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([7 * 7 * M, N], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_41": {
                "variable": {
                    "value": "B4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([N]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_42": {
                "variable": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([N, 3], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "B5",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([3]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_47": {
                "variable": {
                    "value": "Y1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(X, W1, strides=[1, stride, stride, 1], padding='SAME') + B1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_49": {
                "variable": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(Y1, W2, strides=[1, stride, stride, 1], padding='SAME') + B2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_51": {
                "variable": {
                    "value": "Y3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(Y2, W3, strides=[1, stride, stride, 1], padding='SAME') + B3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_53": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(X2, W21) + B21",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_54": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(X2, W21) + B21)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Y21, [-1, 1, 1, 12])",
                            "Call"
                        ],
                        [
                            "tf.tile(Y21, [1, 7, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_55": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(X2, W21) + B21)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Y21, [-1, 1, 1, 12])",
                            "Call"
                        ],
                        [
                            "tf.tile(Y21, [1, 7, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_59": {
                "variable": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(Y2, W3, strides=[1, stride, stride, 1], padding='SAME') + B3)",
                            "Call"
                        ],
                        [
                            "Y3 + Y21",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_61": {
                "variable": {
                    "value": "Y4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(YY, W4) + B4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_63": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "Ylogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y4, W5) + B5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_68": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "Ylogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y4, W5) + B5",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 3])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_72": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_73": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_76": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_79": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_80": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_82": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_8": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_30": {
                "shape": {
                    "value": "[5, 5, 1, K]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_32": {
                "shape": {
                    "value": "[5, 5, K, L]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_34": {
                "shape": {
                    "value": "[4, 4, L, M]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_37": {
                "shape": {
                    "value": "[1, 12]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_40": {
                "shape": {
                    "value": "[7 * 7 * M, N]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_42": {
                "shape": {
                    "value": "[N, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_62": {
                "a": {
                    "value": "Y4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(YY, W4) + B4)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([N, 3], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_69": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=Ylogits, labels=Y_)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy) * 100",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_72": {
                "input": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 3])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_73": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(Y, 1), tf.argmax(Y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_31": {
                "shape": {
                    "value": "[K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_33": {
                "shape": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_35": {
                "shape": {
                    "value": "[M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_38": {
                "shape": {
                    "value": "[12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_41": {
                "shape": {
                    "value": "[N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_43": {
                "shape": {
                    "value": "[3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([5, 5, 1, K], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_49": {
                "input": {
                    "value": "Y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(X, W1, strides=[1, stride, stride, 1], padding='SAME') + B1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([5, 5, K, L], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_51": {
                "input": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(Y1, W2, strides=[1, stride, stride, 1], padding='SAME') + B2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([4, 4, L, M], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_53": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([1, 12], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_61": {
                "a": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Y3, shape=[-1, 7 * 7 * M])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([7 * 7 * M, N], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mnist_3.0_convolutional_normal.py": {
        "tensorflow": {
            "placeholder_36": {
                "variable": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 28, 28, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_37": {
                "variable": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_39": {
                "variable": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Variable_50": {
                "variable": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([5, 5, 1, K], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_51": {
                "variable": {
                    "value": "B1",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([K]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_52": {
                "variable": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([5, 5, K, L], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_53": {
                "variable": {
                    "value": "B2",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([L]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_54": {
                "variable": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([4, 4, L, M], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_55": {
                "variable": {
                    "value": "B3",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([M]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_57": {
                "variable": {
                    "value": "W21",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([1, 12], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "B21",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([12]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_60": {
                "variable": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([7 * 7 * M, N], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_61": {
                "variable": {
                    "value": "B4",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([N]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Variable_62": {
                "variable": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.truncated_normal([N, 11], stddev=0.1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Variable_63": {
                "variable": {
                    "value": "B5",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.ones([11]) / 10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_67": {
                "variable": {
                    "value": "Y1",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(X, W1, strides=[1, stride, stride, 1], padding='SAME') + B1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_69": {
                "variable": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(Y1, W2, strides=[1, stride, stride, 1], padding='SAME') + B2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_71": {
                "variable": {
                    "value": "Y3",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.nn.conv2d(Y2, W3, strides=[1, stride, stride, 1], padding='SAME') + B3",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "relu_73": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(X2, W21) + B21",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_74": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(X2, W21) + B21)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Y21, [-1, 1, 1, 12])",
                            "Call"
                        ],
                        [
                            "tf.tile(Y21, [1, 7, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1, 1, 12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "tile_75": {
                "variable": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "Y21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(X2, W21) + B21)",
                            "Call"
                        ],
                        [
                            "tf.reshape(Y21, [-1, 1, 1, 12])",
                            "Call"
                        ],
                        [
                            "tf.tile(Y21, [1, 7, 7, 1])",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[1, 7, 7, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_79": {
                "variable": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Y3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(Y2, W3, strides=[1, stride, stride, 1], padding='SAME') + B3)",
                            "Call"
                        ],
                        [
                            "Y3 + Y21",
                            "BinOp"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 7 * 7 * M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "relu_81": {
                "variable": {
                    "value": "Y4",
                    "type": "variable",
                    "possible_values": []
                },
                "features": {
                    "value": "tf.matmul(YY, W4) + B4",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "softmax_83": {
                "variable": {
                    "value": "Y",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "Ylogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y4, W5) + B5",
                            "BinOp"
                        ]
                    ]
                }
            },
            "softmax_cross_entropy_with_logits_88": {
                "variable": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "Ylogits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Y4, W5) + B5",
                            "BinOp"
                        ]
                    ]
                },
                "labels": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 11])",
                            "Call"
                        ]
                    ]
                }
            },
            "equal_92": {
                "variable": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(Y, 1)",
                    "type": "Call",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.argmax(Y_, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "variable": {
                    "value": "accuracy",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.cast(correct_prediction, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_96": {
                "variable": {
                    "value": "train_step",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_99": {
                "variable": {
                    "value": "init",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Session_100": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_102": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "set_random_seed_8": {
                "seed": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "truncated_normal_50": {
                "shape": {
                    "value": "[5, 5, 1, K]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_52": {
                "shape": {
                    "value": "[5, 5, K, L]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_54": {
                "shape": {
                    "value": "[4, 4, L, M]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_57": {
                "shape": {
                    "value": "[1, 12]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_60": {
                "shape": {
                    "value": "[7 * 7 * M, N]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "truncated_normal_62": {
                "shape": {
                    "value": "[N, 11]",
                    "type": "List",
                    "possible_values": []
                },
                "stddev": {
                    "value": "0.1",
                    "type": "float",
                    "possible_values": []
                }
            },
            "matmul_82": {
                "a": {
                    "value": "Y4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.matmul(YY, W4) + B4)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([N, 11], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_mean_89": {
                "input_tensor": {
                    "value": "cross_entropy",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax_cross_entropy_with_logits(logits=Ylogits, labels=Y_)",
                            "Call"
                        ],
                        [
                            "tf.reduce_mean(cross_entropy) * 100",
                            "BinOp"
                        ]
                    ]
                }
            },
            "argmax_92": {
                "input": {
                    "value": "Y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 11])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_93": {
                "x": {
                    "value": "correct_prediction",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(tf.argmax(Y, 1), tf.argmax(Y_, 1))",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_51": {
                "shape": {
                    "value": "[K]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_53": {
                "shape": {
                    "value": "[L]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_55": {
                "shape": {
                    "value": "[M]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_58": {
                "shape": {
                    "value": "[12]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_61": {
                "shape": {
                    "value": "[N]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "ones_63": {
                "shape": {
                    "value": "[11]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_67": {
                "input": {
                    "value": "X",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 28, 28, 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([5, 5, 1, K], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "input": {
                    "value": "Y1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(X, W1, strides=[1, stride, stride, 1], padding='SAME') + B1)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([5, 5, K, L], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "input": {
                    "value": "Y2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu(tf.nn.conv2d(Y1, W2, strides=[1, stride, stride, 1], padding='SAME') + B2)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "W3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([4, 4, L, M], stddev=0.1))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "[1, stride, stride, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "SAME",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_73": {
                "a": {
                    "value": "X2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32, [None, 1])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W21",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([1, 12], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_81": {
                "a": {
                    "value": "YY",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(Y3, shape=[-1, 7 * 7 * M])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "W4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.truncated_normal([7 * 7 * M, N], stddev=0.1))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}