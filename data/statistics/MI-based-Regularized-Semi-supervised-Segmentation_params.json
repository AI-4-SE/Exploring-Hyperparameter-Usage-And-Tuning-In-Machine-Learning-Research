{
    "contrastyou/meters2/individual_meters/kappa.py": {
        "sklearn": {
            "cohen_kappa_score_65": {
                "variable": {
                    "value": "kappa",
                    "type": "variable",
                    "possible_values": []
                },
                "y1": {
                    "value": "predict1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict1.detach().data.cpu().numpy().ravel()",
                            "Call"
                        ],
                        [
                            "predict1[mask]",
                            "Subscript"
                        ]
                    ]
                },
                "y2": {
                    "value": "predict2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predict2.detach().data.cpu().numpy().ravel()",
                            "Call"
                        ],
                        [
                            "predict2[mask]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "cohen_kappa_score_28": {
                "y1": {
                    "value": "predict",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicts",
                            "variable"
                        ]
                    ]
                },
                "y2": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.detach().data.cpu().numpy().ravel()",
                            "Call"
                        ],
                        [
                            "target[mask]",
                            "Subscript"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "mean_35": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/arch/unet.py": {
        "torch": {
            "Sequential_14": {
                "variable": {
                    "value": "self.conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(in_ch, out_ch, kernel_size=3, stride=1, padding=1, bias=False)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_31": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Upsample(scale_factor=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "MaxPool2d_61": {
                "variable": {
                    "value": "self.Maxpool1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_62": {
                "variable": {
                    "value": "self.Maxpool2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_63": {
                "variable": {
                    "value": "self.Maxpool3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "MaxPool2d_64": {
                "variable": {
                    "value": "self.Maxpool4",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_84": {
                "variable": {
                    "value": "self.DeConv_1x1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "num_classes",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_109": {
                "variable": {
                    "value": "d5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e4, d5)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_115": {
                "variable": {
                    "value": "d4",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e3, d4)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_120": {
                "variable": {
                    "value": "d3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e2, d3)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_125": {
                "variable": {
                    "value": "d2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(e1, d2)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_17": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_18": {
                "in_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_19": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_20": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Upsample_32": {
                "scale_factor": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_33": {
                "in_channels": {
                    "value": "in_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "in_ch",
                            "Method Argument"
                        ],
                        [
                            "in_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "BatchNorm2d_34": {
                "num_features": {
                    "value": "out_ch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_ch",
                            "Method Argument"
                        ],
                        [
                            "out_ch",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/arch/vgg.py": {
        "torch": {
            "Sequential_11": {
                "variable": {
                    "value": "self._features",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "_vgg.features",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_15": {
                "variable": {
                    "value": "self._projection",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_16": {
                "variable": {
                    "value": "self._prediction",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "256",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_35": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 7 * 7, 10)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "flatten_22": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._features(img)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "start_dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_36": {
                "in_features": {
                    "value": "512 * 7 * 7",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/augment/sequential_wrapper.py": {
        "torch": {}
    },
    "contrastyou/augment/tensor_affine_transform.py": {
        "torch": {
            "cat_13": {
                "variable": {
                    "value": "fullMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[AffineMatrix, torch.from_numpy(np.array([0, 0, 1]).reshape(1, 3).astype(np.float32)).to(AffineMatrix.device)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_30": {
                "tensors": {
                    "value": "InverseAffineMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "affine_grid_72": {
                "variable": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "affinematrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "affinematrix.to(single_img.device)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "single_img.shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "grid_sample_75": {
                "variable": {
                    "value": "data_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "single_img",
                    "type": "variable",
                    "possible_values": []
                },
                "grid": {
                    "value": "grid",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.affine_grid(affinematrix, single_img.shape, align_corners=True)",
                            "Call"
                        ]
                    ]
                },
                "mode": {
                    "value": "self.mode",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding_mode": {
                    "value": "zeros",
                    "type": "str",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "from_numpy_66": {
                "ndarray": {
                    "value": "RandomAffineMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[np.cos(a) * scale, -np.sin(a + shear) * scale, 0.0], [np.sin(a) * scale, np.cos(a + shear) * scale, 0.0]], dtype=np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "inverse_22": {
                "input": {
                    "value": "fullMatrix",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.cat([AffineMatrix, torch.from_numpy(np.array([0, 0, 1]).reshape(1, 3).astype(np.float32)).to(AffineMatrix.device)], dim=0)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_93": {
                "variable": {
                    "value": "AffineMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self.get_random_affinematrix() for _ in range(bn)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_95": {
                "variable": {
                    "value": "AffineMatrix",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[AffineMatrix] * bn",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_16": {
                "ndarray": {
                    "value": "np.array([0, 0, 1]).reshape(1, 3).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/dataloader/_seg_datset.py": {
        "torch": {}
    },
    "contrastyou/dataloader/acdc_dataset.py": {
        "torch": {}
    },
    "contrastyou/epocher/IIC_epocher.py": {
        "torch": {
            "chunk_64": {
                "variable": {
                    "value": "(global_enc, global_tf_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(self._projection_head(en), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_125": {
                "variable": {
                    "value": "(dn_gtf, dn_ctf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._feature_extractor(features)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_129": {
                "variable": {
                    "value": "dn_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dn_gtf, dn_ctf_gtf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "chunk_130": {
                "variable": {
                    "value": "(local_enc_tf, local_enc_tf_ctf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self._projection_head(dn_tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_142": {
                "variable": {
                    "value": "local_enc_unfold_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_enc_unfold.view(b, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_143": {
                "variable": {
                    "value": "local_tf_enc_unfold_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_tf_enc_unfold.view(b, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_120": {
                "variable": {
                    "value": "img_gtf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._transformer(x) for x in img]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_127": {
                "variable": {
                    "value": "dn_ctf_gtf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._transformer(x) for x in dn_ctf]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_150": {
                "input": {
                    "value": "contrastive_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._contrastive_criterion(torch.stack([global_enc, global_tf_enc], dim=1), labels=labels)",
                            "Call"
                        ],
                        [
                            "self._contrastive_criterion(torch.stack([local_enc_unfold_norm, local_tf_enc_unfold_norm], dim=1), labels=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "isnan_152": {
                "input": {
                    "value": "iic_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "average_iter(iic_loss_list)",
                            "Call"
                        ],
                        [
                            "average_iter(iic_loss_list)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_62": {
                "tensors": {
                    "value": "[img, img_tf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_64": {
                "input": {
                    "value": "self._projection_head(en)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_70": {
                "tensors": {
                    "value": "[global_enc, global_tf_enc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_82": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_123": {
                "tensors": {
                    "value": "[img_gtf, img_ctf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_147": {
                "tensors": {
                    "value": "[local_enc_unfold_norm, local_tf_enc_unfold_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_67": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_134": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/epocher/_utils.py": {
        "torch": {}
    },
    "contrastyou/epocher/base_epocher.py": {
        "torch": {
            "no_grad_48": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "stack_178": {
                "variable": {
                    "value": "unlabelimage_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._transformer(x) for x in unlabelimage]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_190": {
                "variable": {
                    "value": "teacher_unlabel_logits_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._transformer(x) for x in teacher_unlabel_logits]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "no_grad_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_181": {
                "tensors": {
                    "value": "[labelimage, unlabelimage_tf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_187": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_208": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/epocher/contrast_epocher.py": {
        "torch": {
            "chunk_90": {
                "variable": {
                    "value": "(global_enc, global_tf_enc)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "F.normalize(self._projection_head(en), dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "chunk_144": {
                "variable": {
                    "value": "(dn_gtf, dn_ctf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "dn",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._feature_extractor(features)[0]",
                            "Subscript"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_148": {
                "variable": {
                    "value": "dn_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[dn_gtf, dn_ctf_gtf]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "chunk_149": {
                "variable": {
                    "value": "(local_enc_tf, local_enc_tf_ctf)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "self._projection_head(dn_tf)",
                    "type": "Call",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_154": {
                "variable": {
                    "value": "local_enc_unfold_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_enc_unfold.view(b, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_155": {
                "variable": {
                    "value": "local_tf_enc_unfold_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "local_tf_enc_unfold.view(b, -1)",
                    "type": "Call",
                    "possible_values": []
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_140": {
                "variable": {
                    "value": "img_gtf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._transformer(x) for x in img]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "dn_ctf_gtf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._transformer(x) for x in dn_ctf]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "isnan_162": {
                "input": {
                    "value": "contrastive_loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._contrastive_criterion(torch.stack([global_enc, global_tf_enc], dim=1), labels=labels)",
                            "Call"
                        ],
                        [
                            "self._contrastive_criterion(torch.stack([local_enc_unfold_norm, local_tf_enc_unfold_norm], dim=1), labels=labels)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_88": {
                "tensors": {
                    "value": "[img, img_tf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "normalize_90": {
                "input": {
                    "value": "self._projection_head(en)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_93": {
                "tensors": {
                    "value": "[global_enc, global_tf_enc]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_100": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_142": {
                "tensors": {
                    "value": "[img_gtf, img_ctf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_159": {
                "tensors": {
                    "value": "[local_enc_unfold_norm, local_tf_enc_unfold_norm]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_168": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/helper/utils.py": {
        "torch": {}
    },
    "contrastyou/losses/contrast_loss.py": {
        "torch": {
            "cat_60": {
                "variable": {
                    "value": "contrast_feature",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "torch.unbind(features, dim=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "div_71": {
                "variable": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.matmul(anchor_feature, contrast_feature.t())",
                    "type": "Call",
                    "possible_values": []
                },
                "other": {
                    "value": "self.temperature",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "max_75": {
                "variable": {
                    "value": "(logits_max, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "anchor_dot_contrast",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.div(torch.matmul(anchor_feature, contrast_feature.t()), self.temperature)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scatter_81": {
                "variable": {
                    "value": "logits_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.ones_like(mask)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "index": {
                    "value": "torch.arange(batch_size * anchor_count).view(-1, 1).to(device)",
                    "type": "Call",
                    "possible_values": []
                },
                "src": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "device_34": {
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                }
            },
            "device_36": {
                "type": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "eye_48": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.shape[0]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "unbind_60": {
                "input": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features.view(features.shape[0], features.shape[1], -1)",
                            "Call"
                        ],
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "input": {
                    "value": "anchor_feature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features[:, 0]",
                            "Subscript"
                        ],
                        [
                            "contrast_feature",
                            "variable"
                        ]
                    ]
                },
                "other": {
                    "value": "contrast_feature.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_like_82": {
                "input": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.eye(batch_size, dtype=torch.float32).to(device)",
                            "Call"
                        ],
                        [
                            "mask.float().to(device)",
                            "Call"
                        ],
                        [
                            "mask.repeat(anchor_count, contrast_count)",
                            "Call"
                        ],
                        [
                            "mask * logits_mask",
                            "BinOp"
                        ],
                        [
                            "torch.eq(labels, labels.t()).float().to(device)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_84": {
                "start": {
                    "value": "batch_size * anchor_count",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_90": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "anchor_dot_contrast - logits_max.detach()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_91": {
                "input": {
                    "value": "exp_logits.sum(1, keepdim=True) + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "eq_55": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.Tensor(labels).long()",
                            "Call"
                        ],
                        [
                            "labels.contiguous().view(-1, 1)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "other": {
                    "value": "labels.t()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Tensor_51": {
                "variable": {
                    "value": "labels",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/losses/iic_loss.py": {
        "torch": {
            "randn_193": {
                "variable": {
                    "value": "feature",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "layout": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_123": {
                "variable": {
                    "value": "p_i_j",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_out * mask",
                            "BinOp"
                        ],
                        [
                            "x_out.permute(1, 0, 2, 3).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "weight": {
                    "value": "x_tf_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x_tf_out * mask",
                            "BinOp"
                        ],
                        [
                            "x_tf_out.permute(1, 0, 2, 3).contiguous()",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "(self.padding, self.padding)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "isnan_147": {
                "input": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-p_i_j * (torch.log(p_i_j + 1e-10) - self.lamb * torch.log(p_j + 1e-10) - self.lamb * torch.log(p_i + 1e-10))",
                            "BinOp"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ],
                        [
                            "(-p_i_j * (torch.log(p_i_j + 1e-16) - self.lamda * torch.log(p_i_mat + 1e-16) - self.lamda * torch.log(p_j_mat + 1e-16))).sum() / (T_side_dense * T_side_dense)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_69": {
                "input": {
                    "value": "p_j + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "isnan_184": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_66": {
                "input": {
                    "value": "p_j + 1e-10",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_142": {
                "input": {
                    "value": "p_i_j + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_144": {
                "input": {
                    "value": "p_j_mat + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_143": {
                "input": {
                    "value": "p_i_mat + 1e-16",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/cache.py": {
        "torch": {
            "is_tensor_43": {
                "obj": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input.cpu().item()",
                            "Call"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Tensor_49": {},
            "mean_49": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/confusionmatrix.py": {
        "torch": {
            "is_tensor_50": {
                "obj": {
                    "value": "predicted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "predicted.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "predicted",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_52": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cpu().numpy()",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/dicemeter.py": {
        "torch": {
            "softmax_25": {
                "input": {
                    "value": "pred_logit",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred_logit",
                            "Method Argument"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_72": {
                "variable": {
                    "value": "log",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._diceLog",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/general_dice_meter.py": {
        "torch": {
            "cat_99": {
                "variable": {
                    "value": "interaction_array",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._intersections",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_100": {
                "variable": {
                    "value": "union_array",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._unions",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_109": {
                "variable": {
                    "value": "resulting_dice",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "resulting_dice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(resulting_dice, dim=0)",
                            "Call"
                        ],
                        [
                            "self.log",
                            "Attribute"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/hausdorff.py": {
        "torch": {
            "zeros_57": {
                "variable": {
                    "value": "res",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(B, C)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "pred.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_113": {
                "variable": {
                    "value": "log",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "self._haussdorff_log",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Tensor_116": {
                "variable": {
                    "value": "log",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/iou.py": {
        "torch": {
            "from_numpy_120": {
                "ndarray": {
                    "value": "cls_iu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "iu",
                            "variable"
                        ]
                    ]
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/surface_meter.py": {
        "torch": {}
    },
    "contrastyou/meters2/individual_meters/torchnet/meter/apmeter.py": {
        "torch": {
            "zeros_113": {
                "variable": {
                    "value": "ap",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.scores.size(1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_49": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_51": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "equal_77": {
                "input": {
                    "value": "target ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "other": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "arange_115": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.scores.size(0) + 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "range_117": {
                "variable": {
                    "value": "rg",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "self.scores.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sort_127": {
                "variable": {
                    "value": "(_, sortind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.scores[:, k]",
                            "Subscript"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "FloatStorage_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LongStorage_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "FloatStorage_30": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_tensor_48": {
                "obj": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_50": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target.view(-1, 1)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_55": {
                "variable": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_54": {
                "obj": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "min_76": {
                "input": {
                    "value": "weight",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(weight)",
                            "Call"
                        ],
                        [
                            "weight.squeeze()",
                            "Call"
                        ],
                        [
                            "self.weights.new(self.weights.size())",
                            "Call"
                        ],
                        [
                            "self.weights[sortind]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/torchnet/meter/aucmeter.py": {
        "torch": {
            "sort_56": {
                "variable": {
                    "value": "(scores, sortind)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.from_numpy(self.scores)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "is_tensor_32": {
                "obj": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_34": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "target.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "self.scores",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DoubleStorage_28": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LongStorage_29": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/torchnet/meter/classerrormeter.py": {
        "torch": {
            "is_tensor_19": {
                "obj": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "is_tensor_21": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.atleast_1d(target.cpu().squeeze().numpy())",
                            "Call"
                        ],
                        [
                            "np.asarray([target])",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_35": {
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output.cpu().squeeze().numpy()",
                            "Call"
                        ],
                        [
                            "output[np.newaxis]",
                            "Subscript"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "topk_35": {
                "input": {
                    "value": "maxk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(topk[-1])",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/torchnet/meter/movingaveragevaluemeter.py": {
        "torch": {
            "Tensor_10": {
                "variable": {
                    "value": "self.valuequeue",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/meters2/individual_meters/torchnet/meter/msemeter.py": {
        "torch": {
            "from_numpy_18": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(output)",
                            "Call"
                        ],
                        [
                            "output",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_19": {
                "variable": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sum_21": {
                "input": {
                    "value": "(output - target) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "is_tensor_17": {
                "obj": {
                    "value": "target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.from_numpy(target)",
                            "Call"
                        ],
                        [
                            "target",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "contrastyou/trainer/_utils.py": {
        "torch": {
            "ModuleList_131": {
                "variable": {
                    "value": "self._headers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "headers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[init_sub_header(head_type) for _ in range(self._num_subheads)]",
                            "ListComp"
                        ],
                        [
                            "[init_sub_header(head_type) for _ in range(num_subheads)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "ModuleList_165": {
                "variable": {
                    "value": "self._headers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "headers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[init_sub_header(head_type) for _ in range(self._num_subheads)]",
                            "ListComp"
                        ],
                        [
                            "[init_sub_header(head_type) for _ in range(num_subheads)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "normalize_32": {
                "input": {
                    "value": "input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input / self._T",
                            "BinOp"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ],
                        [
                            "input",
                            "Method Argument"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_50": {
                "variable": {
                    "value": "self._header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_58": {
                "variable": {
                    "value": "self._header",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_78": {
                "variable": {
                    "value": "self._projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_dim, 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_84": {
                "variable": {
                    "value": "self._projector",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(input_dim, 64, 3, 1, 1)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "adaptive_max_pool2d_92": {
                "*args": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "output_size": {
                    "value": "self._output_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_51": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "interm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "LeakyReLU_54": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "in_features": {
                    "value": "interm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "AdaptiveAvgPool2d_59": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_61": {
                "in_features": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_79": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_80": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_81": {
                "in_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_85": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "64",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Sequential_108": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_116": {
                "*args": {
                    "value": "nn.AdaptiveAvgPool2d((1, 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_150": {
                "*args": {
                    "value": "nn.Conv2d(input_dim, num_clusters, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Sequential_156": {
                "*args": {
                    "value": "nn.Conv2d(input_dim, interm_dim, 1, 1, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_109": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_111": {
                "in_features": {
                    "value": "self._input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self._num_clusters",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "AdaptiveAvgPool2d_117": {
                "output_size": {
                    "value": "(1, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "in_features": {
                    "value": "self._input_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_120": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_121": {
                "in_features": {
                    "value": "128",
                    "type": "int",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Conv2d_151": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Conv2d_157": {
                "in_channels": {
                    "value": "input_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ],
                        [
                            "input_dim",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "interm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "LeakyReLU_158": {
                "negative_slope": {
                    "value": "0.01",
                    "type": "float",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Conv2d_159": {
                "in_channels": {
                    "value": "interm_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "256",
                            "Method Argument"
                        ],
                        [
                            "64",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "num_clusters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "5",
                            "Method Argument"
                        ],
                        [
                            "10",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/trainer/contrast_trainer.py": {
        "torch": {
            "Adam_74": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self._model.parameters(), self._projector.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_79": {
                "variable": {
                    "value": "self._scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self._max_epoch_train_encoder - warmup_max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_127": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self._model.parameters(), self._projector.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_129": {
                "variable": {
                    "value": "self._scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self._max_epoch_train_decoder - warmup_max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_165": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self._model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_166": {
                "variable": {
                    "value": "self._scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self._max_epoch_train_finetune - warmup_max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "5e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "MSELoss_242": {
                "variable": {
                    "value": "self._reg_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "contrastyou/trainer/iic_trainer.py": {
        "torch": {
            "Adam_36": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self._model.parameters(), self._projector_contrastive.parameters(), self._projector_iic.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_42": {
                "variable": {
                    "value": "self._scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self._max_epoch_train_encoder - warmup_max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Adam_112": {
                "variable": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "itertools.chain(self._model.parameters(), self._projector_contrastive.parameters(), self._projector_iic.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-06",
                            "Method Argument"
                        ]
                    ]
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "CosineAnnealingLR_121": {
                "variable": {
                    "value": "self._scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self._max_epoch_train_decoder - warmup_max",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "semi_seg/_utils.py": {
        "torch": {
            "ModuleDict_102": {
                "variable": {
                    "value": "self._clusters",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleDict_199": {
                "variable": {
                    "value": "self._LossModuleDict",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "semi_seg/dataloader_helper.py": {
        "torch": {
            "DataLoader_40": {
                "variable": {
                    "value": "labeled_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "label_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_manager._create_semi_supervised_datasets(labeled_transform=augmentinferface.pretrain, unlabeled_transform=augmentinferface.pretrain, val_transform=augmentinferface.val)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "InfiniteRandomSampler(label_set, shuffle=config['LabeledData']['shuffle'])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['LabeledData']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['LabeledData']['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_49": {
                "variable": {
                    "value": "unlabeled_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "unlabel_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_manager._create_semi_supervised_datasets(labeled_transform=augmentinferface.pretrain, unlabeled_transform=augmentinferface.pretrain, val_transform=augmentinferface.val)",
                            "Call"
                        ]
                    ]
                },
                "sampler": {
                    "value": "InfiniteRandomSampler(unlabel_set, shuffle=config['UnlabeledData']['shuffle'])",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "config['UnlabeledData']['batch_size']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "config['UnlabeledData']['num_workers']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "config",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_59": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_set",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data_manager._create_semi_supervised_datasets(labeled_transform=augmentinferface.pretrain, unlabeled_transform=augmentinferface.pretrain, val_transform=augmentinferface.val)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1 if group_val_patient else 4",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "PatientSampler(val_set, grp_regex=val_set.dataset_pattern, shuffle=False) if group_val_patient else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_100": {
                "variable": {
                    "value": "val_loader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "val_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deepcopy(unlabeled_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1 if group_val_patient else 4",
                    "type": "IfExp",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "PatientSampler(val_dataset, grp_regex=val_dataset.dataset_pattern, shuffle=False) if group_val_patient else None",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "semi_seg/epocher.py": {
        "torch": {
            "no_grad_53": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_197": {
                "data": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "self._device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "chunk_259": {
                "variable": {
                    "value": "(unlabeled_features, unlabeled_tf_features)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "unlabeled_features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inter_feature[len(inter_feature) - unlabeled_length:]",
                            "Subscript"
                        ],
                        [
                            "torch.chunk(unlabeled_features, 2, dim=0)",
                            "Call"
                        ]
                    ]
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_155": {
                "variable": {
                    "value": "(label_logits, unlabel_logits, unlabel_tf_logits)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "predict_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._model(torch.cat([labeled_image, unlabeled_image, unlabeled_image_tf], dim=0))",
                            "Call"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[len(labeled_image), len(unlabeled_image), len(unlabeled_image_tf)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_149": {
                "variable": {
                    "value": "unlabeled_image_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._affine_transformer(x) for x in unlabeled_image]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_161": {
                "variable": {
                    "value": "unlabel_logits_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._affine_transformer(x) for x in unlabel_logits]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "stack_265": {
                "variable": {
                    "value": "unlabeled_features_tf",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[self._affine_transformer(x) for x in unlabeled_features]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_153": {
                "tensors": {
                    "value": "[labeled_image, unlabeled_image, unlabeled_image_tf]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_181": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "chunk_270": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "chunks": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_271": {
                "tensors": {
                    "value": "[unlabeled_features_tf, unlabeled_tf_features]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "semi_seg/trainer.py": {
        "torch": {
            "CosineAnnealingLR_57": {
                "variable": {
                    "value": "scheduler",
                    "type": "variable",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self._optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "T_max": {
                    "value": "self._config['Trainer']['max_epoch'] - self._config['Scheduler']['warmup_max']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "eta_min": {
                    "value": "1e-07",
                    "type": "float",
                    "possible_values": []
                }
            },
            "no_grad_95": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_194": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}