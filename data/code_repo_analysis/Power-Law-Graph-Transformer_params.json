{
    "nmt_data_prep.py": {
        "tensorflow": {
            "load_163": {
                "variable": {
                    "value": "tokenizers",
                    "type": "variable",
                    "possible_values": []
                },
                "export_dir": {
                    "value": "self.model_name",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_file_231": {
                "fname": {
                    "value": "f'{model_name}.zip'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "origin": {
                    "value": "f'https://storage.googleapis.com/download.tensorflow.org/models/{model_name}.zip'",
                    "type": "JoinedStr",
                    "possible_values": []
                },
                "cache_dir": {
                    "value": "cache_dir",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'.'",
                            "Method Argument"
                        ]
                    ]
                },
                "cache_subdir": {
                    "value": "",
                    "type": "str",
                    "possible_values": []
                },
                "extract": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "logical_and_207": {
                "x": {
                    "value": "tf.size(x) <= self.MAX_LENGTH",
                    "type": "Compare",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.size(y) <= self.MAX_LENGTH",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "size_207": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "size_208": {
                "input": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "plga_transformer_model.py": {
        "tensorflow": {
            "Dense_27": {
                "variable": {
                    "value": "self.wq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "wq",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_28": {
                "variable": {
                    "value": "self.wk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "wk",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_29": {
                "variable": {
                    "value": "self.wv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "wv",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_38": {
                "variable": {
                    "value": "self.dense",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "d_model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ],
                        [
                            "d_model",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "dense",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_50": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_encoding[:, :seq_len, :]",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.enc_layers[i]([x, mask], training=training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.dec_layers[i]([x, enc_output, look_ahead_mask, padding_mask], training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.num_heads, self.depth)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "transpose_74": {
                "variable": {
                    "value": "qt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_75": {
                "variable": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "qt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(q, perm=[0, 1, 3, 2])",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_83": {
                "variable": {
                    "value": "Hnext",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Hnext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.plgatt_layer([q, k, v, A, mask], training=training)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Hnext, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(Hnext, (batch_size, -1, self.d_model))",
                            "Call"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_85": {
                "variable": {
                    "value": "Hnext",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "Hnext",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.plgatt_layer([q, k, v, A, mask], training=training)",
                            "Call"
                        ],
                        [
                            "tf.transpose(Hnext, perm=[0, 2, 1, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(Hnext, (batch_size, -1, self.d_model))",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "(batch_size, -1, self.d_model)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "LayerNormalization_134": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "layernorm1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_135": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "layernorm2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_137": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_138": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_215": {
                "variable": {
                    "value": "self.layernorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "layernorm1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_216": {
                "variable": {
                    "value": "self.layernorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "layernorm2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "LayerNormalization_217": {
                "variable": {
                    "value": "self.layernorm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "layernorm3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_219": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_220": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_221": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout3",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Embedding_298": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.input_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "enc_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_305": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_394": {
                "variable": {
                    "value": "self.embedding",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input_dim": {
                    "value": "self.target_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "output_dim": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dec_embedding",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_401": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dropout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_521": {
                "variable": {
                    "value": "self.final_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.target_vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense_final_layer",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dropout_570": {
                "variable": {
                    "value": "self.dropoutA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.Adropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'Adropout' + self.index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_571": {
                "variable": {
                    "value": "self.denseA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "self.depth",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "'denseA' + self.index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "LayerNormalization_572": {
                "variable": {
                    "value": "self.layernormA",
                    "type": "Attribute",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-06",
                    "type": "float",
                    "possible_values": []
                },
                "name": {
                    "value": "'layernormA' + self.index",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "identity_575": {
                "variable": {
                    "value": "Ain",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(qt, q)",
                            "Call"
                        ],
                        [
                            "self.reslayerAs[i]([A], training=training)",
                            "Call"
                        ],
                        [
                            "self.denseAs[i](A)",
                            "Call"
                        ],
                        [
                            "self.denseA(A)",
                            "Call"
                        ],
                        [
                            "self.dropoutA(A, training=training)",
                            "Call"
                        ],
                        [
                            "self.layernormA(A + Ain)",
                            "Call"
                        ],
                        [
                            "inputs[0]",
                            "Subscript"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_51": {
                "a": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_encoding[:, :seq_len, :]",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.enc_layers[i]([x, mask], training=training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.dec_layers[i]([x, enc_output, look_ahead_mask, padding_mask], training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 2, 1, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_158": {
                "layers": {
                    "value": "[tf.keras.layers.Dense(self.dff, activation='relu', name='dense1'), tf.keras.layers.Dense(self.d_model, name='dense2')]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "Sequential_245": {
                "layers": {
                    "value": "[tf.keras.layers.Dense(self.dff, activation='relu'), tf.keras.layers.Dense(self.d_model)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "sqrt_318": {
                "x": {
                    "value": "tf.cast(self.d_model, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_345": {
                "x": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_rads[np.newaxis, ...]",
                            "Subscript"
                        ],
                        [
                            "angle_rads[np.newaxis, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_413": {
                "x": {
                    "value": "tf.cast(self.d_model, tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_441": {
                "x": {
                    "value": "pos_encoding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "angle_rads[np.newaxis, ...]",
                            "Subscript"
                        ],
                        [
                            "angle_rads[np.newaxis, ...]",
                            "Subscript"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_62": {
                "input": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.wq(q)",
                            "Call"
                        ],
                        [
                            "self.split_heads(q, batch_size)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_314": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_encoding[:, :seq_len, :]",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.enc_layers[i]([x, mask], training=training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.dec_layers[i]([x, enc_output, look_ahead_mask, padding_mask], training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_318": {
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_410": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, (batch_size, -1, self.num_heads, self.depth))",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "x + self.pos_encoding[:, :seq_len, :]",
                            "BinOp"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.enc_layers[i]([x, mask], training=training)",
                            "Call"
                        ],
                        [
                            "self.embedding(x)",
                            "Call"
                        ],
                        [
                            "self.dropout(x, training=training)",
                            "Call"
                        ],
                        [
                            "self.dec_layers[i]([x, enc_output, look_ahead_mask, padding_mask], training=training)",
                            "Call"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_413": {
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dense_568": {
                "units": {
                    "value": "self.A_dff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "'denseA' + self.index + str(i)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Dense_159": {
                "units": {
                    "value": "self.dff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                },
                "name": {
                    "value": "dense1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_160": {
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "dense2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_246": {
                "units": {
                    "value": "self.dff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "relu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Dense_247": {
                "units": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "plga_transformer_run_model.py": {
        "tensorflow": {
            "Adam_53": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta_1": {
                    "value": "0.9",
                    "type": "float",
                    "possible_values": []
                },
                "beta_2": {
                    "value": "0.98",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "1e-09",
                    "type": "float",
                    "possible_values": []
                }
            },
            "Mean_55": {
                "variable": {
                    "value": "self.train_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_56": {
                "variable": {
                    "value": "self.train_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "train_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_57": {
                "variable": {
                    "value": "self.val_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "val_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Mean_58": {
                "variable": {
                    "value": "self.val_accuracy",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "val_accuracy",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Checkpoint_96": {
                "variable": {
                    "value": "train_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_97": {
                "variable": {
                    "value": "val_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Checkpoint_98": {
                "variable": {
                    "value": "valacc_ckpt",
                    "type": "variable",
                    "possible_values": []
                },
                "transformer": {
                    "value": "self.transformer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CheckpointManager_100": {
                "variable": {
                    "value": "self.train_ckpt_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "train_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(transformer=self.transformer, optimizer=self.optimizer)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "self.train_ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint_name": {
                    "value": "'train_' + self.hpdict['save_model_path']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "10",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CheckpointManager_104": {
                "variable": {
                    "value": "self.val_ckpt_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "val_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(transformer=self.transformer, optimizer=self.optimizer)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "self.val_ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint_name": {
                    "value": "'val_' + self.hpdict['save_model_path']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CheckpointManager_108": {
                "variable": {
                    "value": "self.valacc_ckpt_manager",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint": {
                    "value": "valacc_ckpt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.train.Checkpoint(transformer=self.transformer, optimizer=self.optimizer)",
                            "Call"
                        ]
                    ]
                },
                "directory": {
                    "value": "self.valacc_ckpt_path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "checkpoint_name": {
                    "value": "'valacc_' + self.hpdict['save_model_path']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "max_to_keep": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "maximum_151": {
                "variable": {
                    "value": "combined_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dec_target_padding_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.create_padding_mask(tar)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "look_ahead_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.create_look_ahead_mask(tf.shape(tar)[1])",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_157": {
                "variable": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(seq, 0)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "function_173": {
                "input_signature": {
                    "value": "train_step_signature",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[tf.TensorSpec(shape=(None, None), dtype=tf.int64), tf.TensorSpec(shape=(None, None), dtype=tf.int64)]",
                            "List"
                        ]
                    ]
                }
            },
            "convert_to_tensor_314": {
                "variable": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[sentence]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "convert_to_tensor_320": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[start]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_321": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([start])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([output, predicted_id], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(outseq, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "convert_to_tensor_402": {
                "variable": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[sentence]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "equal_524": {
                "variable": {
                    "value": "accuracies",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "tf.argmax(pred, axis=2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_not_526": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(real, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "logical_and_527": {
                "variable": {
                    "value": "accuracies",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(real, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(y_true, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=loss_.dtype)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "accuracies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(real, tf.argmax(pred, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.math.logical_and(mask, accuracies)",
                            "Call"
                        ],
                        [
                            "tf.cast(accuracies, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_529": {
                "variable": {
                    "value": "accuracies",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "accuracies",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.equal(real, tf.argmax(pred, axis=2))",
                            "Call"
                        ],
                        [
                            "tf.math.logical_and(mask, accuracies)",
                            "Call"
                        ],
                        [
                            "tf.cast(accuracies, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_530": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(real, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(y_true, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=loss_.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_539": {
                "variable": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "rsqrt_544": {
                "variable": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "logical_not_562": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.math.equal(y_true, 0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cast_564": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(real, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(y_true, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=loss_.dtype)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "loss_.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_169": {
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorSpec_170": {
                "shape": {
                    "value": "(None, None)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_336": {
                "variable": {
                    "value": "predicted_id",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer([inp, tar_inp, enc_padding_mask, combined_mask, dec_padding_mask], training=True)",
                            "Call"
                        ],
                        [
                            "self.transformer([inp, tar_inp, enc_padding_mask, combined_mask, dec_padding_mask], training=False)",
                            "Call"
                        ],
                        [
                            "self.transformer([encoder_input, output, enc_padding_mask, combined_mask, dec_padding_mask], training=False)",
                            "Call"
                        ],
                        [
                            "predictions[:, -1:, :]",
                            "Subscript"
                        ],
                        [
                            "self.transformer([encoder_input, output, enc_padding_mask, combined_mask, dec_padding_mask], training=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(predictions[:, -1:, :], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "concat_338": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[output, predicted_id]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "convert_to_tensor_459": {
                "variable": {
                    "value": "t",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[t[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "equal_157": {
                "x": {
                    "value": "seq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.math.equal(seq, 0), tf.float32)",
                            "Call"
                        ],
                        [
                            "seq",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "band_part_165": {
                "input": {
                    "value": "tf.ones((size, size))",
                    "type": "Call",
                    "possible_values": []
                },
                "num_lower": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "num_upper": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "GradientTape_184": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "convert_to_tensor_418": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "outseq",
                    "type": "variable",
                    "possible_values": [
                        [
                            "beam_out",
                            "variable"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "expand_dims_419": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([start])",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output, 0)",
                            "Call"
                        ],
                        [
                            "tf.concat([output, predicted_id], axis=-1)",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor(outseq, dtype=tf.int64)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(output, 0)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "softmax_428": {
                "variable": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "predictions[:, -1:, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "top_k_429": {
                "variable": {
                    "value": "(top_k_predvals, top_k_predids)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.transformer([inp, tar_inp, enc_padding_mask, combined_mask, dec_padding_mask], training=True)",
                            "Call"
                        ],
                        [
                            "self.transformer([inp, tar_inp, enc_padding_mask, combined_mask, dec_padding_mask], training=False)",
                            "Call"
                        ],
                        [
                            "self.transformer([encoder_input, output, enc_padding_mask, combined_mask, dec_padding_mask], training=False)",
                            "Call"
                        ],
                        [
                            "predictions[:, -1:, :]",
                            "Subscript"
                        ],
                        [
                            "self.transformer([encoder_input, output, enc_padding_mask, combined_mask, dec_padding_mask], training=False)",
                            "Call"
                        ],
                        [
                            "tf.nn.softmax(predictions[:, -1:, :], axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "beam_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "4",
                            "Method Argument"
                        ],
                        [
                            "4",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "argmax_524": {
                "input": {
                    "value": "pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "pred",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "equal_526": {
                "x": {
                    "value": "real",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reduce_sum_531": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(real, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(y_true, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=loss_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "rsqrt_547": {
                "x": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "minimum_547": {
                "x": {
                    "value": "arg1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.rsqrt(step)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "arg2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "step * self.warmup_steps ** (-1.5)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "equal_562": {
                "x": {
                    "value": "y_true",
                    "type": "variable",
                    "possible_values": [
                        [
                            "y_true",
                            "Method Argument"
                        ]
                    ]
                },
                "y": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SparseCategoricalCrossentropy_563": {
                "from_logits": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "reduction": {
                    "value": "none",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_sum_566": {
                "input_tensor": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1 - tf.linalg.band_part(tf.ones((size, size)), -1, 0)",
                            "BinOp"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(real, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=tf.float32)",
                            "Call"
                        ],
                        [
                            "tf.math.logical_not(tf.math.equal(y_true, 0))",
                            "Call"
                        ],
                        [
                            "tf.cast(mask, dtype=loss_.dtype)",
                            "Call"
                        ]
                    ]
                }
            },
            "shape_149": {
                "input": {
                    "value": "tar",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tar",
                            "Method Argument"
                        ],
                        [
                            "tar",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_165": {
                "shape": {
                    "value": "(size, size)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "shape_316": {
                "input": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([sentence])",
                            "Call"
                        ],
                        [
                            "self.tokenizers_src.tokenize(sentence).to_tensor()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([sentence])",
                            "Call"
                        ],
                        [
                            "self.tokenizers_src.tokenize(sentence).to_tensor()",
                            "Call"
                        ],
                        [
                            "sentence",
                            "Method Argument"
                        ],
                        [
                            "sentence",
                            "Method Argument"
                        ],
                        [
                            "sentence",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_404": {
                "input": {
                    "value": "sentence",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor([sentence])",
                            "Call"
                        ],
                        [
                            "self.tokenizers_src.tokenize(sentence).to_tensor()",
                            "Call"
                        ],
                        [
                            "tf.convert_to_tensor([sentence])",
                            "Call"
                        ],
                        [
                            "self.tokenizers_src.tokenize(sentence).to_tensor()",
                            "Call"
                        ],
                        [
                            "sentence",
                            "Method Argument"
                        ],
                        [
                            "sentence",
                            "Method Argument"
                        ],
                        [
                            "sentence",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "power_law_attention_layer.py": {
        "tensorflow": {
            "get_43": {
                "variable": {
                    "value": "self.activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_44": {
                "variable": {
                    "value": "self.att_activation",
                    "type": "Attribute",
                    "possible_values": []
                },
                "identifier": {
                    "value": "att_activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.leaky_relu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Dropout_46": {
                "variable": {
                    "value": "self.dropout1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.in_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_47": {
                "variable": {
                    "value": "self.dropout2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.in_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_48": {
                "variable": {
                    "value": "self.dropout3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rate": {
                    "value": "self.eij_dropout_prob",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_74": {
                "variable": {
                    "value": "We",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "W[tf.newaxis, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([tf.shape(Hin)[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_75": {
                "variable": {
                    "value": "a_vece",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "a_vec[tf.newaxis, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([tf.shape(Hin)[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tile_83": {
                "variable": {
                    "value": "pwe",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pw[tf.newaxis, :, :, :]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack([tf.shape(Hin)[0], 1, 1, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pow_84": {
                "variable": {
                    "value": "Ap",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "AW",
                    "type": "variable",
                    "possible_values": [
                        [
                            "AdjActivation(tf.matmul(We, A) + b) + epsilonAdj",
                            "BinOp"
                        ]
                    ]
                },
                "y": {
                    "value": "pwe",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(pw[tf.newaxis, :, :, :], tf.stack([tf.shape(Hin)[0], 1, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "Adj_pow",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_86": {
                "variable": {
                    "value": "WHiWHj",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Hin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout1(Hin, training=training)",
                            "Call"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "avAp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(a_vece, Ap) + ba",
                            "BinOp"
                        ]
                    ]
                }
            },
            "matmul_87": {
                "variable": {
                    "value": "Ep",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "WHiWHj",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.matmul(Hin, avAp)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Hkt",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.transpose(Hk, perm=[0, 1, 3, 2])",
                            "Call"
                        ],
                        [
                            "Hkt",
                            "Method Argument"
                        ],
                        [
                            "Hkt",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_90": {
                "variable": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.F_hidden",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "softmax_96": {
                "variable": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "E",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Ep + mask * -1000000000.0 if mask is not None else Ep",
                            "IfExp"
                        ],
                        [
                            "tf.nn.softmax(E, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "matmul_110": {
                "variable": {
                    "value": "Hout",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Eout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.cg_align_one(Hin, Hkt, A, a_vec, ba, W, b, pw, mask=mask)",
                            "Call"
                        ],
                        [
                            "self.dropout3(Eout, training=training)",
                            "Call"
                        ],
                        [
                            "self.cg_single_head(Hin, Hkt, Hv, A, self.alst[i], self.balst[i], self.Wlst[i], self.blst[i], self.pwlst[i], mask=mask, training=training)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Hv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "Hv",
                            "Method Argument"
                        ],
                        [
                            "Hv",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_130": {
                "variable": {
                    "value": "Hkt",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "Hk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout2(Hk, training=training)",
                            "Call"
                        ],
                        [
                            "Hk",
                            "Method Argument"
                        ]
                    ]
                },
                "perm": {
                    "value": "[0, 1, 3, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_154": {
                "variable": {
                    "value": "H_next",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "Hlst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_74": {
                "values": {
                    "value": "[tf.shape(Hin)[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_75": {
                "values": {
                    "value": "[tf.shape(Hin)[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "stack_83": {
                "values": {
                    "value": "[tf.shape(Hin)[0], 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "matmul_85": {
                "a": {
                    "value": "a_vece",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(a_vec[tf.newaxis, :, :, :], tf.stack([tf.shape(Hin)[0], 1, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "Ap",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.math.pow(AW, pwe, name='Adj_pow')",
                            "Call"
                        ]
                    ]
                }
            },
            "sqrt_91": {
                "x": {
                    "value": "dk",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(self.F_hidden, tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "add_n_152": {
                "inputs": {
                    "value": "Hlst",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "matmul_80": {
                "a": {
                    "value": "We",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.tile(W[tf.newaxis, :, :, :], tf.stack([tf.shape(Hin)[0], 1, 1, 1]))",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "A",
                    "type": "variable",
                    "possible_values": [
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ],
                        [
                            "A",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_74": {
                "input": {
                    "value": "Hin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout1(Hin, training=training)",
                            "Call"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_75": {
                "input": {
                    "value": "Hin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout1(Hin, training=training)",
                            "Call"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_83": {
                "input": {
                    "value": "Hin",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.dropout1(Hin, training=training)",
                            "Call"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ],
                        [
                            "Hin",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    }
}