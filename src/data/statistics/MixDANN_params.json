{
    "src/do_tsne.py": {
        "sklearn": {
            "PCA_20": {
                "variable": {
                    "value": "pca_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "n_components": {
                    "value": "50",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "TSNE_23": {
                "variable": {
                    "value": "tsne_features",
                    "type": "Variable",
                    "possible_values": []
                },
                "perplexity": {
                    "value": "perp",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "perplexity",
                            "Name"
                        ]
                    ]
                }
            }
        }
    },
    "src/datasets/dataset.py": {
        "torch": {
            "unsqueeze_28": {
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/datasets/utils.py": {
        "torch": {}
    },
    "src/evalPerSubject.py": {
        "torch": {
            "tensor_75": {
                "variable": {
                    "value": "img_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sitk.ReadImage(img_subj_pth + '/pre/FLAIR.nii.gz')",
                            "Call"
                        ],
                        [
                            "sitk.GetArrayFromImage(img)",
                            "Call"
                        ],
                        [
                            "img[(24, 25, 26, 27, 28), :, :]",
                            "Subscript"
                        ],
                        [
                            "np.expand_dims(img, axis=1)",
                            "Call"
                        ],
                        [
                            "np.concatenate((img, T1_img), axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "squeeze_79": {
                "variable": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yhat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.squeeze(yhat, dim=1)",
                            "Call"
                        ],
                        [
                            "yhat.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_76": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/eval_utils/eval_process.py": {
        "torch": {}
    },
    "src/get_data_for_tsne.py": {
        "torch": {
            "is_available_37": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_38": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_75": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "splits[heldout]['train']()",
                            "Call"
                        ],
                        [
                            "Augmentation(trainset, base_and_aug=args.base_and_aug, intensity_rescale=args.is_aug)",
                            "Call"
                        ],
                        [
                            "Augmentation(trainset, do_aug=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_58": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UNet(T1=args.T1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_60": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UNet(T1=args.T1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_63": {
                "f": {
                    "value": "tsne_results/dannMixup_local_model.pt",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/main.py": {
        "torch": {
            "is_available_44": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_45": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_121": {
                "variable": {
                    "value": "train",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "trainset",
                    "type": "Call",
                    "possible_values": [
                        [
                            "splits[heldout]['train']()",
                            "Call"
                        ],
                        [
                            "Augmentation(trainset, base_and_aug=args.base_and_aug, intensity_rescale=args.is_aug)",
                            "Call"
                        ],
                        [
                            "Augmentation(trainset, do_aug=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_128": {
                "variable": {
                    "value": "val",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "valset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Augmentation(splits[heldout]['val'](), do_aug=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "1 if args.postprocess else args.batch_size",
                    "type": "IfExp",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False if args.postprocess else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataLoader_135": {
                "variable": {
                    "value": "test",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "Augmentation(splits[heldout]['test'](), do_aug=False)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "False if args.postprocess else True",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_77": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UNet(T1=args.T1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_79": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UNet(T1=args.T1)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "CrossEntropyLoss_97": {
                "variable": {
                    "value": "d_loss_fn",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_366": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{_save_dir}/last_epoch_model.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "DataParallel_92": {
                "variable": {
                    "value": "domain_adversary",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "domain_adversary",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Discriminator(DiscHead(num_domains if not args.classify_mixup_domain else num_domains + 1))",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(domain_adversary, device_ids=gpu_ids)",
                            "Call"
                        ],
                        [
                            "domain_adversary.cuda()",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "Adam_100": {
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": []
                },
                "lr": {
                    "value": "lr",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReduceLROnPlateau_105": {
                "optimizer": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "optimizers",
                            "Name"
                        ],
                        [
                            "optimizers",
                            "Name"
                        ]
                    ]
                },
                "patience": {
                    "value": "args.patience",
                    "type": "Attribute",
                    "possible_values": []
                },
                "factor": {
                    "value": "args.factor",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_368": {
                "f": {
                    "value": "f'{_save_dir}/model.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "isnan_250": {
                "input": {
                    "value": "loss",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "Constant"
                        ],
                        [
                            "loss + d_loss",
                            "BinOp"
                        ]
                    ]
                }
            },
            "save_301": {
                "obj": {
                    "value": "model.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "f'{_save_dir}/model.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "empty_like_194": {
                "variable": {
                    "value": "d",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "d",
                    "type": "Call",
                    "possible_values": [
                        [
                            "batch['domain'].cuda()",
                            "Call"
                        ],
                        [
                            "torch.empty_like(d).fill_(num_domains).cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/adv_exp.py": {
        "torch": {
            "bernoulli_85": {
                "variable": {
                    "value": "adv_mask",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "args.adversarial_examples_ratio * torch.ones(x.size(0))",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Sequential_30": {
                "variable": {
                    "value": "self.seq",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ReflectionPad2d(10)",
                    "type": null,
                    "possible_values": []
                }
            },
            "kl_div_66": {
                "input": {
                    "value": "x.log()",
                    "type": "Call",
                    "possible_values": []
                },
                "target": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "reduction": {
                    "value": "batchmean",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Parameter_123": {
                "variable": {
                    "value": "adv_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "adv_x",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x[adv_mask]",
                            "Subscript"
                        ],
                        [
                            "torch.nn.Parameter(adv_x)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_125": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "[adv_x]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.adversarial_examples_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "args.adversarial_examples_wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ReflectionPad2d_31": {
                "padding": {
                    "value": "10",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_32": {
                "in_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "21",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "None",
                    "type": "Constant",
                    "possible_values": []
                },
                "groups": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_46": {
                "ndarray": {
                    "value": "k",
                    "type": "Name",
                    "possible_values": [
                        [
                            "scipy.ndimage.gaussian_filter(n, sigma=self.sigma)",
                            "Call"
                        ]
                    ]
                }
            },
            "ones_86": {
                "*size": {
                    "value": "x.size(0)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/discriminator.py": {
        "torch": {}
    },
    "src/models/entropyLoss.py": {
        "torch": {
            "softmax_15": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "log_softmax_15": {
                "input": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/heads.py": {
        "torch": {
            "MaxPool2d_11": {
                "variable": {
                    "value": "self.init_layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_12": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Conv2d(128, 256, kernel_size=4, stride=2, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_18": {
                "variable": {
                    "value": "self.fullyConnected",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Flatten(start_dim=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_13": {
                "in_channels": {
                    "value": "128",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_14": {
                "num_features": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_14": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_15": {
                "in_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_16": {
                "num_features": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "LeakyReLU_16": {
                "negative_slope": {
                    "value": "0.2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_17": {
                "in_channels": {
                    "value": "512",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "256",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "4",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Flatten_18": {
                "start_dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_19": {
                "in_features": {
                    "value": "256 * 6 * 6",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_20": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_21": {
                "in_features": {
                    "value": "4096",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_21": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "1024",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Variable",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/losses.py": {
        "torch": {
            "Sigmoid_29": {
                "variable": {
                    "value": "self.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "LogSigmoid_30": {
                "variable": {
                    "value": "self.log_sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BCEWithLogitsLoss_44": {
                "variable": {
                    "value": "self.base",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sigmoid_68": {
                "variable": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.sigmoid(input)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/metrics.py": {
        "torch": {
            "sum_56": {
                "variable": {
                    "value": "TP",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "confusion_vector == 1",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "sum_57": {
                "variable": {
                    "value": "FP",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.isinf(confusion_vector)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_58": {
                "variable": {
                    "value": "TN",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.isnan(confusion_vector)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_59": {
                "variable": {
                    "value": "FN",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "confusion_vector == 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "isinf_57": {
                "input": {
                    "value": "confusion_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "yhat.float() / y.float()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "isnan_58": {
                "input": {
                    "value": "confusion_vector",
                    "type": "Name",
                    "possible_values": [
                        [
                            "yhat.float() / y.float()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/mixup.py": {
        "torch": {
            "randperm_31": {
                "variable": {
                    "value": "index",
                    "type": "Variable",
                    "possible_values": []
                },
                "n": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "x.size()[0]",
                            "Subscript"
                        ]
                    ]
                }
            }
        }
    },
    "src/models/models.py": {
        "torch": {
            "Sequential_26": {
                "variable": {
                    "value": "self.conv_down",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.Conv2d(in_channels, nf, 3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_33": {
                "variable": {
                    "value": "self.conv_up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "torch.nn.ConvTranspose2d(2 * nf, 2 * nf, 3)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_69": {
                "variable": {
                    "value": "self.output_conv",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_88": {
                "*args": {
                    "value": "torch.nn.Conv2d(ic, oc, kernel_size, padding=1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_100": {
                "*args": {
                    "value": "torch.nn.MaxPool2d(2)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_106": {
                "*args": {
                    "value": "UNet.Up(in_channels, out_channels, bilinear=bilinear)",
                    "type": null,
                    "possible_values": []
                }
            },
            "pad_139": {
                "variable": {
                    "value": "x1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.up(x1)",
                            "Call"
                        ],
                        [
                            "F.pad(x1, (w_diff // 2, w_diff - w_diff // 2, h_diff // 2, h_diff - h_diff // 2))",
                            "Call"
                        ]
                    ]
                },
                "pad": {
                    "value": "(w_diff // 2, w_diff - w_diff // 2, h_diff // 2, h_diff - h_diff // 2)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_27": {
                "in_channels": {
                    "value": "in_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_27": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_28": {
                "num_features": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                }
            },
            "Conv2d_28": {
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_29": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "num_features": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "Conv2d_30": {
                "in_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_30": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_31": {
                "num_features": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_34": {
                "in_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "num_features": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_36": {
                "in_channels": {
                    "value": "2 * nf",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_37": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_37": {
                "num_features": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_38": {
                "in_channels": {
                    "value": "nf",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "num_filters",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_89": {
                "in_channels": {
                    "value": "ic",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ],
                        [
                            "in_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_90": {
                "num_features": {
                    "value": "oc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_91": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Conv2d_92": {
                "in_channels": {
                    "value": "oc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "oc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "3",
                            "MethodArgument"
                        ]
                    ]
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_93": {
                "num_features": {
                    "value": "oc",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ],
                        [
                            "out_channels",
                            "Name"
                        ]
                    ]
                }
            },
            "ReLU_94": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "MaxPool2d_100": {
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Upsample_119": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "mode": {
                    "value": "bilinear",
                    "type": "Constant",
                    "possible_values": []
                },
                "align_corners": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_123": {
                "variable": {
                    "value": "self.up",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "ic // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "ic // 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_141": {
                "tensors": {
                    "value": "[x2, x1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/models/utils.py": {
        "torch": {
            "grad_25": {
                "variable": {
                    "value": "task_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "task_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "shared_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_29": {
                "variable": {
                    "value": "task_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g.view(-1) for g in task_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "grad_30": {
                "variable": {
                    "value": "aux_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "aux_loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "shared_model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "only_inputs": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                },
                "retain_graph": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_34": {
                "variable": {
                    "value": "aux_grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[g.view(-1) for g in aux_grad]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "manual_seed_16": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "0",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_262": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_497": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_514": {
                "variable": {
                    "value": "x_all_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_all_test, batch['img'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_515": {
                "variable": {
                    "value": "y_all_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_all_test, batch['label'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_516": {
                "variable": {
                    "value": "b_all_test",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b_all_test, batch['mask'].bool())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_295": {
                "variable": {
                    "value": "x_all_val_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_all_val_0, batch['img'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_296": {
                "variable": {
                    "value": "y_all_val_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_all_val_0, batch['label'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_298": {
                "variable": {
                    "value": "b_all_val_0",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b_all_val_0, batch['mask'].bool())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_307": {
                "variable": {
                    "value": "x_all_val_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(x_all_val_1, batch['img'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_308": {
                "variable": {
                    "value": "y_all_val_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(y_all_val_1, batch['label'])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_310": {
                "variable": {
                    "value": "b_all_val_1",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(b_all_val_1, batch['mask'].bool())",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "src/submission.py": {
        "torch": {
            "tensor_42": {
                "variable": {
                    "value": "flairImage_tensor",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "flairImage",
                    "type": "Call",
                    "possible_values": [
                        [
                            "sitk.ReadImage(os.path.join(inputDir, 'pre', 'FLAIR.nii.gz'))",
                            "Call"
                        ],
                        [
                            "eval_preprocess(flairImageOrig)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(flairImage, axis=1)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_46": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_47": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "squeeze_65": {
                "variable": {
                    "value": "yhat",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "yhat",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.squeeze(yhat, dim=1)",
                            "Call"
                        ],
                        [
                            "yhat.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataParallel_56": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UNet()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_58": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UNet()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_60": {
                "f": {
                    "value": "f'{trainedModelDir}/model.pt'",
                    "type": "JoinedStr",
                    "possible_values": []
                }
            },
            "no_grad_61": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/testPerSubject.py": {
        "torch": {
            "is_available_42": {
                "variable": {
                    "value": "use_cuda",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_43": {
                "variable": {
                    "value": "device",
                    "type": "Variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if use_cuda else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "DataParallel_52": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UNet(T1=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_ids)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "gpu_ids",
                    "type": "Name",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "DataParallel_54": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "UNet(T1=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model, device_ids=gpu_ids)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_56": {
                "f": {
                    "value": "trainedModelDir",
                    "type": "Name",
                    "possible_values": [
                        [
                            "path_dir + '/last_epoch_model.pt'",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    }
}