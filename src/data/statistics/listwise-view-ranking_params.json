{
    "demo.py": {
        "torch": {
            "from_numpy_71": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((len(pdefined_anchors), 5))",
                            "Call"
                        ],
                        [
                            "rois.astype(np.int)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rois).float()",
                            "Call"
                        ],
                        [
                            "rois.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_54": {
                "ndarray": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "Image.open(img_file)",
                            "Call"
                        ],
                        [
                            "np.array(img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.repeat(img, 3, 2)",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform_test(torch.from_numpy(img)).float()",
                            "Call"
                        ],
                        [
                            "img.resize((224, 224), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "pytorch_transform(img)",
                            "Call"
                        ],
                        [
                            "img.view(1, 3, 224, 224)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "eval.py": {
        "torch": {
            "from_numpy_75": {
                "ndarray": {
                    "value": "rois",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.zeros((len(pdefined_anchors), 5))",
                            "Call"
                        ],
                        [
                            "rois.astype(np.int)",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_57": {
                "ndarray": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "np.array(img, dtype=np.uint8)",
                            "Call"
                        ],
                        [
                            "np.expand_dims(img, axis=-1)",
                            "Call"
                        ],
                        [
                            "np.repeat(img, 3, 2)",
                            "Call"
                        ],
                        [
                            "img.transpose((2, 0, 1))",
                            "Call"
                        ],
                        [
                            "img / 255.0",
                            "BinOp"
                        ],
                        [
                            "transform_test(torch.from_numpy(img)).float()",
                            "Call"
                        ],
                        [
                            "Image.open(img_file_name)",
                            "Call"
                        ],
                        [
                            "img.resize((cfg.inp_size[0], cfg.inp_size[1]), Image.BILINEAR)",
                            "Call"
                        ],
                        [
                            "pytorch_transform(img)",
                            "Call"
                        ],
                        [
                            "img.cuda()",
                            "Call"
                        ],
                        [
                            "img.view(1, 3, cfg.inp_size[0], cfg.inp_size[1])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/datasets/dataset.py": {
        "torch": {
            "DataLoader_75": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "CPCDataset(image_lmdb, boxes_pkl, False, inp_size=(224, 224), scale=(0.75, 0.75), split='test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_67": {
                "ndarray": {
                    "value": "img",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.pytorch_transform(imageBuf.copy())",
                            "Call"
                        ],
                        [
                            "self.transform_train(torch.from_numpy(img).float())",
                            "Call"
                        ]
                    ]
                }
            },
            "from_numpy_59": {
                "ndarray": {
                    "value": "score",
                    "type": "Name",
                    "possible_values": [
                        [
                            "np.array(self.data[id]['score'])",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/LVRN.py": {
        "torch": {
            "tensor_101": {
                "variable": {
                    "value": "roi",
                    "type": "Variable",
                    "possible_values": []
                },
                "data": {
                    "value": "[[0, 0, 0, 128, 128], [0, 64, 64, 223, 223]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "rand_102": {
                "variable": {
                    "value": "img",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(1, 3, 224, 224)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Sequential_16": {
                "variable": {
                    "value": "self.fc_score",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(512 * 49, fc1)",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_54": {
                "*args": {
                    "value": "*features",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_62": {
                "*args": {
                    "value": "*features",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_69": {
                "*args": {
                    "value": "*features",
                    "type": null,
                    "possible_values": []
                }
            },
            "Sequential_76": {
                "*args": {
                    "value": "*features",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_80": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_82": {
                "variable": {
                    "value": "checkpoint",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "model_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_17": {
                "in_features": {
                    "value": "512 * 49",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_18": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_19": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_20": {
                "in_features": {
                    "value": "fc1",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1024",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "fc2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "ReLU_21": {
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Dropout_22": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_23": {
                "in_features": {
                    "value": "fc2",
                    "type": "Name",
                    "possible_values": [
                        [
                            "512",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "load_52": {
                "f": {
                    "value": "model_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_59": {
                "f": {
                    "value": "model_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_67": {
                "f": {
                    "value": "model_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "load_74": {
                "f": {
                    "value": "model_path",
                    "type": "MethodArgument",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "lib/model/RoI_operation.py": {
        "torch": {
            "UpsamplingBilinear2d_27": {
                "variable": {
                    "value": "self.up_sample",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale_factor": {
                    "value": "up_scale",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "stack_42": {
                "variable": {
                    "value": "grid_yx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_xy.data[:, :, :, 1], grid_xy.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "stack_54": {
                "variable": {
                    "value": "grid_yx",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[grid_xy.data[:, :, :, 1], grid_xy.data[:, :, :, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "zeros_74": {
                "variable": {
                    "value": "zero",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(rois.size(0), 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "cat_77": {
                "variable": {
                    "value": "theta",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "affine_grid_85": {
                "variable": {
                    "value": "grid",
                    "type": "Variable",
                    "possible_values": []
                },
                "theta": {
                    "value": "theta",
                    "type": "Name",
                    "possible_values": [
                        [
                            "torch.cat([(x2 - x1) / (width - 1), zero, (x1 + x2 - width + 1) / (width - 1), zero, (y2 - y1) / (height - 1), (y1 + y2 - height + 1) / (height - 1)], 1).view(-1, 2, 3)",
                            "Call"
                        ]
                    ]
                },
                "size": {
                    "value": "torch.Size((rois.size(0), 1, grid_size, grid_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pool2d_46": {
                "variable": {
                    "value": "roi_featrues",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooled_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.roi_crop(featrues, grid_yx.detach())",
                            "Call"
                        ],
                        [
                            "self.roi_crop(featrues, grid_yx.detach())",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_48": {
                "variable": {
                    "value": "roi_featrues",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooled_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.roi_crop(featrues, grid_yx.detach())",
                            "Call"
                        ],
                        [
                            "self.roi_crop(featrues, grid_yx.detach())",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_58": {
                "variable": {
                    "value": "roi_featrues",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooled_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.roi_crop(featrues, grid_yx.detach())",
                            "Call"
                        ],
                        [
                            "self.roi_crop(featrues, grid_yx.detach())",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_60": {
                "variable": {
                    "value": "roi_featrues",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pooled_features",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.roi_crop(featrues, grid_yx.detach())",
                            "Call"
                        ],
                        [
                            "self.roi_crop(featrues, grid_yx.detach())",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_align/_ext/roi_align/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_align/build.py": {
        "torch": {
            "is_available_17": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_align/functions/roi_align.py": {
        "torch": {}
    },
    "lib/model/roi_align/modules/roi_align.py": {
        "torch": {
            "avg_pool2d_29": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "max_pool2d_42": {
                "input": {
                    "value": "x",
                    "type": "Call",
                    "possible_values": [
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ],
                        [
                            "RoIAlignFunction(self.aligned_height + 1, self.aligned_width + 1, self.spatial_scale)(features, rois)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/_ext/crop_resize/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_crop/_ext/roi_crop/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_crop/build.py": {
        "torch": {
            "is_available_13": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/crop_resize.py": {
        "torch": {
            "zeros_13": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "input2.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "input1.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "input2.size()[1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "layout": {
                    "value": "input2.size()[2]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_28": {
                "variable": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input1.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_29": {
                "variable": {
                    "value": "grad_input2",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.input2.size()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "current_device_16": {
                "variable": {
                    "value": "self.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/gridgen.py": {
        "torch": {
            "from_numpy_18": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "baddbmm_45": {
                "variable": {
                    "value": "grad_input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "grad_input1",
                    "type": "Call",
                    "possible_values": [
                        [
                            "self.input1.new(self.input1.size()).zero_()",
                            "Call"
                        ],
                        [
                            "torch.baddbmm(grad_input1, torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2), self.batchgrid.view(-1, self.height * self.width, 3))",
                            "Call"
                        ]
                    ]
                },
                "batch1": {
                    "value": "torch.transpose(grad_output.view(-1, self.height * self.width, 2), 1, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch2": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_33": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_45": {
                "input": {
                    "value": "grad_output.view(-1, self.height * self.width, 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "transpose_33": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/functions/roi_crop.py": {
        "torch": {}
    },
    "lib/model/roi_crop/modules/gridgen.py": {
        "torch": {
            "from_numpy_60": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_64": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "bmm_73": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid.view(-1, self.height * self.width, 3)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "torch.transpose(input1, 1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_87": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_89": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_104": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output0, output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_119": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_123": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_131": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:3]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_132": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 3:6]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cat_134": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.sum(x, 3), torch.sum(y, 3)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_151": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_158": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_160": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_169": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_177": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_178": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_179": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_190": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_209": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_216": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_218": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_227": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_234": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([input1.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_243": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 0:4])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_244": {
                "variable": {
                    "value": "y",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 4:8])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_245": {
                "variable": {
                    "value": "z",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch.mul(self.batchgrid3d, input1[:, :, :, 8:])",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_257": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_260": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_276": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_283": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_285": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_294": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_301": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_326": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "cat_330": {
                "variable": {
                    "value": "output2",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[output[:, :, :, 0:1], output1]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_350": {
                "variable": {
                    "value": "self.grid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "self.grid.astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cos_357": {
                "variable": {
                    "value": "self.z",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_359": {
                "variable": {
                    "value": "self.grid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "np.zeros([self.height, self.width, 4], dtype=np.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "zeros_368": {
                "variable": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid3d.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_375": {
                "variable": {
                    "value": "self.batchgrid",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*size": {
                    "value": "torch.Size([depth.size(0)]) + self.grid.size()",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_413": {
                "variable": {
                    "value": "output",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[theta, phi]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "atan_101": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_156": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_156": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_157": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_177": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_178": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_179": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_181": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_186": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sin_214": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_214": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_215": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mul_243": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 0:4]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_244": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 4:8]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mul_245": {
                "input": {
                    "value": "self.batchgrid3d",
                    "type": "Attribute",
                    "possible_values": []
                },
                "other": {
                    "value": "input1[:, :, :, 8:]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sqrt_247": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_252": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_259": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_281": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_281": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_282": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_313": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_318": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_329": {
                "input": {
                    "value": "torch.tan(np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :]))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sin_355": {
                "input": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cos_355": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sin_356": {
                "input": {
                    "value": "self.phi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_399": {
                "input": {
                    "value": "x ** 2 + y ** 2 + z ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "mul_46": {
                "input": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                },
                "other": {
                    "value": "input",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "tan_101": {
                "input": {
                    "value": "np.pi / 2.0 * (self.batchgrid[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_134": {
                "input": {
                    "value": "y",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.mul(self.batchgrid, input1[:, :, :, 3:6])",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "torch.sum(torch.mul(self.batchgrid3d, input1[:, :, :, 4:8]), 3)",
                            "Call"
                        ],
                        [
                            "self.batchgrid3d[:, :, :, 1:2] * depth + trans1.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1)",
                            "BinOp"
                        ],
                        [
                            "x_ * torch.sin(rotate_z) + y_ * torch.cos(rotate_z)",
                            "BinOp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "acos_184": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_250": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_259": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "acos_316": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tan_329": {
                "input": {
                    "value": "np.pi / 2.0 * (output[:, :, :, 1:2] + self.batchgrid[:, :, :, 2:] * input_u[:, :, :, :])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cos_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_395": {
                "input": {
                    "value": "rotate_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "sin_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cos_396": {
                "input": {
                    "value": "rotate_z",
                    "type": "Name",
                    "possible_values": [
                        [
                            "rotate.view(-1, 1, 1, 1).repeat(1, self.height, self.width, 1) * np.pi",
                            "BinOp"
                        ]
                    ]
                }
            },
            "acos_402": {
                "input": {
                    "value": "z / r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_406": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "atan_408": {
                "input": {
                    "value": "y / (x + 1e-05)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "transpose_73": {
                "input": {
                    "value": "input1",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim0": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim1": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_crop/modules/roi_crop.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/_ext/roi_pooling/__init__.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/build.py": {
        "torch": {
            "is_available_16": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "lib/model/roi_pooling/functions/roi_pool.py": {
        "torch": {}
    },
    "lib/model/roi_pooling/modules/roi_pool.py": {
        "torch": {}
    },
    "train.py": {
        "torch": {
            "softmax_53": {
                "variable": {
                    "value": "labels",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(labels, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_56": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "score_rank_loss(scores, labels)",
                            "Call"
                        ],
                        [
                            "0 - scores * labels",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ],
                        [
                            "0 - Py * Pz",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_64": {
                "variable": {
                    "value": "Pz",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores",
                    "type": "Call",
                    "possible_values": [
                        [
                            "torch.zeros((m, n)).float().cuda()",
                            "Call"
                        ],
                        [
                            "scores.view(m, -1)",
                            "Call"
                        ],
                        [
                            "nn.LogSoftmax(dim=1)(scores)",
                            "Call"
                        ],
                        [
                            "model(img, rois)",
                            "Call"
                        ],
                        [
                            "scores.cpu().detach().numpy()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_65": {
                "variable": {
                    "value": "Py",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "labels",
                    "type": "Call",
                    "possible_values": [
                        [
                            "labels.cuda()",
                            "Call"
                        ],
                        [
                            "F.softmax(labels, 1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sum_70": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "loss",
                    "type": "Call",
                    "possible_values": [
                        [
                            "score_rank_loss(scores, labels)",
                            "Call"
                        ],
                        [
                            "0 - scores * labels",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "loss.sum()",
                            "Call"
                        ],
                        [
                            "0 - Py * Pz",
                            "BinOp"
                        ],
                        [
                            "torch.sum(loss, dim=1)",
                            "Call"
                        ],
                        [
                            "loss.mean()",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_88": {
                "variable": {
                    "value": "rois",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "rois",
                    "type": "Call",
                    "possible_values": [
                        [
                            "rois.cuda()",
                            "Call"
                        ],
                        [
                            "np.zeros((len(pdefined_anchors), 5))",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(rois).float().cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "DataLoader_136": {
                "variable": {
                    "value": "train_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.CPCDataset(train_image_dst, train_boxes_dst, cfg.is_shuffle, cfg.inp_size, cfg.scale, 'train')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "DataLoader_142": {
                "variable": {
                    "value": "test_loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset.CPCDataset(test_image_dst, test_boxes_dst, False, cfg.inp_size, cfg.scale, 'test')",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_160": {
                "variable": {
                    "value": "optim",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "cfg.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "lr": {
                    "value": "args.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "cfg.momentum",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_42": {
                "obj": {
                    "value": "{'model': net.module.state_dict() if args.set_multi_GPU else net.state_dict(), 'optimizer': optim.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "save_name",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(cfg.save_model_root, 'LVRN_{}_{}.pth'.format(epoch, iteration))",
                            "Call"
                        ]
                    ]
                }
            },
            "DataParallel_154": {
                "variable": {
                    "value": "model",
                    "type": "Variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Call",
                    "possible_values": [
                        [
                            "net.LVRN(cfg.vgg_model_path)",
                            "Call"
                        ],
                        [
                            "nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ]
                    ]
                }
            },
            "LogSoftmax_52": {
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "pow_66": {
                "input": {
                    "value": "Py - Pz",
                    "type": "BinOp",
                    "possible_values": []
                },
                "exponent": {
                    "value": "gama",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "log_66": {
                "input": {
                    "value": "Pz",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.softmax(scores, 1)",
                            "Call"
                        ],
                        [
                            "torch.pow(Py - Pz, gama) * torch.log(Pz)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_198": {
                "variable": {
                    "value": "scores",
                    "type": "Variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(m, n)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "enable_grad_195": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}