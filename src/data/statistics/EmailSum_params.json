{
    "bert_score/score.py": {
        "torch": {
            "bmm_228": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hyp_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "ref_embedding.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_146": {
                "variable": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "max_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_212": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_226": {
                "input": {
                    "value": "ref_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_226": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_227": {
                "input": {
                    "value": "hyp_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_227": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_107": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "unsqueeze_154": {
                "variable": {
                    "value": "baselines",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "from_numpy_239": {
                "ndarray": {
                    "value": "pd.read_csv(baseline_path).iloc[num_layers].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_152": {
                "ndarray": {
                    "value": "pd.read_csv(baseline_path).iloc[num_layers].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_154": {
                "ndarray": {
                    "value": "pd.read_csv(baseline_path).to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "bert_score/scorer.py": {
        "torch": {
            "bmm_252": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hyp_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "mat2": {
                    "value": "ref_embedding.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "stack_213": {
                "variable": {
                    "value": "all_preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "max_preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "unsqueeze_139": {
                "variable": {
                    "value": "baseline_vals",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "norm_250": {
                "input": {
                    "value": "ref_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_250": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_251": {
                "input": {
                    "value": "hyp_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_251": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "is_available_74": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "from_numpy_135": {
                "ndarray": {
                    "value": "pd.read_csv(baseline_path).iloc[self.num_layers].to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "from_numpy_139": {
                "ndarray": {
                    "value": "pd.read_csv(baseline_path).to_numpy()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "bert_score/utils.py": {
        "torch": {
            "zeros_176": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(arr)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lens.max().item()",
                            "Call"
                        ],
                        [
                            "max(lens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_281": {
                "variable": {
                    "value": "total_embedding",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "embeddings",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                },
                "dim": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "bmm_316": {
                "variable": {
                    "value": "sim",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hyp_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyp_embedding.transpose(1, 2).transpose(0, 1).contiguous().view(L * B, hyp_embedding.size(1), D)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "ref_embedding.transpose(1, 2)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "bmm_317": {
                "variable": {
                    "value": "masks",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "hyp_masks.unsqueeze(2).float()",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "ref_masks.unsqueeze(1).float()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_437": {
                "variable": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "preds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.cat(preds, dim=1 if all_layers else 0)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1 if all_layers else 0",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "tensor_178": {
                "variable": {
                    "value": "padded[i, :lens[i]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "data": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "sent_encode(tokenizer, a)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "stack_188": {
                "variable": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "out[-1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "any_348": {
                "input": {
                    "value": "hyp_zero_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyp_masks.sum(dim=1).eq(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "any_352": {
                "input": {
                    "value": "ref_zero_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_masks.sum(dim=1).eq(2)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_sequence_410": {
                "variable": {
                    "value": "emb_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "emb",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.stack(out[-1], dim=2)",
                            "Call"
                        ],
                        [
                            "out[0]",
                            "Subscript"
                        ],
                        [
                            "embs[i, :sequence_len]",
                            "Subscript"
                        ],
                        [
                            "[e.to(device) for e in emb]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "padding_value": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "pad_sequence_411": {
                "variable": {
                    "value": "idf_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "sequences": {
                    "value": "idf",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padded_idf[i, :sequence_len]",
                            "Subscript"
                        ],
                        [
                            "[i.to(device) for i in idf]",
                            "ListComp"
                        ]
                    ]
                },
                "batch_first": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_175": {
                "*size": {
                    "value": "len(arr)",
                    "type": "Call",
                    "possible_values": []
                },
                "out": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lens.max().item()",
                            "Call"
                        ],
                        [
                            "max(lens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.long",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "no_grad_185": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "norm_308": {
                "input": {
                    "value": "ref_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ref_embedding.transpose(1, 2).transpose(0, 1).contiguous().view(L * B, ref_embedding.size(1), D)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_308": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "norm_309": {
                "input": {
                    "value": "hyp_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hyp_embedding.transpose(1, 2).transpose(0, 1).contiguous().view(L * B, hyp_embedding.size(1), D)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "unsqueeze_309": {
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "isnan_356": {
                "input": {
                    "value": "F",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2 * P * R / (P + R)",
                            "BinOp"
                        ],
                        [
                            "F.view(L, B)",
                            "Call"
                        ],
                        [
                            "F.masked_fill(torch.isnan(F), 0.0)",
                            "Call"
                        ]
                    ]
                }
            },
            "tensor_414": {
                "variable": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "lens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.LongTensor([len(a) for a in arr])",
                            "Call"
                        ],
                        [
                            "lens.to(device=device)",
                            "Call"
                        ],
                        [
                            "[e.size(0) for e in emb]",
                            "ListComp"
                        ],
                        [
                            "torch.tensor(lens, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_416": {
                "variable": {
                    "value": "base",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "max_len",
                    "type": "variable",
                    "possible_values": [
                        [
                            "lens.max().item()",
                            "Call"
                        ],
                        [
                            "max(lens)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_428": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_140": {
                "variable": {
                    "value": "model.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer for layer in model.layer[:num_layers]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "stack_436": {
                "tensors": {
                    "value": "(P, R, F1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "ModuleList_151": {
                "variable": {
                    "value": "model.encoder.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer for layer in model.encoder.layer[:num_layers]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "ModuleList_156": {
                "variable": {
                    "value": "model.transformer.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[layer for layer in model.transformer.layer[:num_layers]]",
                    "type": "ListComp",
                    "possible_values": []
                }
            }
        }
    },
    "data.py": {
        "torch": {
            "tensor_82": {
                "variable": {
                    "value": "input_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "input_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(input_inputs, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_83": {
                "variable": {
                    "value": "turn_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "turn_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(turn_inputs, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_84": {
                "variable": {
                    "value": "output_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "output_inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(output_inputs, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tensor_85": {
                "variable": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(ids, dtype=torch.long)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "TensorDataset_87": {
                "variable": {
                    "value": "dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "*tensors": {
                    "value": "input_inputs",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_88": {
                "obj": {
                    "value": "{'dataset': dataset}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "out_file",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "modeling_utils.py": {
        "torch": {
            "Embedding_387": {
                "variable": {
                    "value": "new_embeddings",
                    "type": "variable",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "new_num_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "old_embedding_dim",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "no_grad_802": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_1287": {
                "variable": {
                    "value": "beam_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, num_beams)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.float",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "input_ids.device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sort_1596": {
                "variable": {
                    "value": "(sorted_logits, sorted_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cumsum_1597": {
                "variable": {
                    "value": "cumulative_probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.softmax(sorted_logits, dim=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "empty_1669": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "nx",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "Parameter_1671": {
                "variable": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.empty(nx, nf)",
                            "Call"
                        ]
                    ]
                }
            },
            "Parameter_1672": {
                "variable": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(nf)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "addmm_1676": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "mat1": {
                    "value": "x.view(-1, x.size(-1))",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "self.weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_318": {
                "variable": {
                    "value": "output_embeddings.weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "input_embeddings.weight.clone()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "pad_323": {
                "variable": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "input": {
                    "value": "output_embeddings.bias.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pad": {
                    "value": "(0, output_embeddings.weight.shape[0] - output_embeddings.bias.shape[0])",
                    "type": "Tuple",
                    "possible_values": []
                },
                "mode": {
                    "value": "constant",
                    "type": "str",
                    "possible_values": []
                },
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "full_988": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(batch_size, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "bos_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bos_token_id if bos_token_id is not None else self.config.bos_token_id",
                            "IfExp"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "full_1074": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "size": {
                    "value": "(effective_batch_size * num_beams, 1)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "fill_value": {
                    "value": "decoder_start_token_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "decoder_start_token_id if decoder_start_token_id is not None else self.config.decoder_start_token_id",
                            "IfExp"
                        ],
                        [
                            "bos_token_id",
                            "Name"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                },
                "device": {
                    "value": "next(self.parameters()).device",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_1088": {
                "variable": {
                    "value": "expanded_batch_idxs",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_ids.shape[0]",
                            "Subscript"
                        ],
                        [
                            "1",
                            "Constant"
                        ]
                    ]
                }
            },
            "cat_1228": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, tokens_to_add.unsqueeze(-1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_1316": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_logits_during_generation(next_token_logits, cur_len=cur_len, max_length=max_length)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1439": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, beam_tokens.unsqueeze(1)]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "stack_1505": {
                "variable": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "best",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ]
                    ]
                }
            },
            "tensor_250": {
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "save_453": {
                "obj": {
                    "value": "model_to_save.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "output_model_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "os.path.join(save_directory, WEIGHTS_NAME)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_606": {
                "variable": {
                    "value": "state_dict",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "resolved_archive_file",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "cached_path(archive_file, cache_dir=cache_dir, force_download=force_download, proxies=proxies, resume_download=resume_download, local_files_only=local_files_only)",
                            "Call"
                        ]
                    ]
                },
                "map_location": {
                    "value": "cpu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "softmax_1214": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logscores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "top_k_top_p_filtering(scores, top_k=top_k, top_p=top_p)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_1215": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logscores, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "squeeze_1215": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_1218": {
                "variable": {
                    "value": "next_token",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_token_logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "outputs[0][:, -1, :]",
                            "Subscript"
                        ],
                        [
                            "self.adjust_logits_during_generation(next_token_logits, cur_len=cur_len, max_length=max_length)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_1245": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_ones((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1351": {
                "variable": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "multinomial_1352": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "probs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(next_token_logscores, dim=-1)",
                            "Call"
                        ],
                        [
                            "F.softmax(_scores, dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "num_samples": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gather_1354": {
                "variable": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "_scores / temperature",
                            "BinOp"
                        ],
                        [
                            "top_k_top_p_filtering(_scores, top_k=top_k, top_p=top_p, min_tokens_to_keep=2)",
                            "Call"
                        ],
                        [
                            "_scores.contiguous().view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ]
                    ]
                }
            },
            "sort_1356": {
                "variable": {
                    "value": "(next_scores, next_scores_indices)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ]
                    ]
                },
                "descending": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_1357": {
                "variable": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "next_tokens",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.multinomial(probs, num_samples=2 * num_beams)",
                            "Call"
                        ],
                        [
                            "torch.gather(next_tokens, -1, next_scores_indices)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "index": {
                    "value": "next_scores_indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "topk_1367": {
                "variable": {
                    "value": "(next_scores, next_tokens)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "input": {
                    "value": "next_scores",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scores + beam_scores[:, None].expand_as(scores)",
                            "BinOp"
                        ],
                        [
                            "next_scores.view(batch_size, num_beams * vocab_size)",
                            "Call"
                        ],
                        [
                            "torch.gather(_scores, -1, next_tokens)",
                            "Call"
                        ]
                    ]
                },
                "k": {
                    "value": "2 * num_beams",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "largest": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "sorted": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_1448": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[attention_mask, attention_mask.new_ones((attention_mask.shape[0], 1))]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "softmax_1597": {
                "input": {
                    "value": "sorted_logits",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_1672": {
                "*size": {
                    "value": "nf",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "arange_173": {
                "variable": {
                    "value": "seq_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "start": {
                    "value": "seq_length",
                    "type": "variable",
                    "possible_values": []
                },
                "device": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "all_1461": {
                "input": {
                    "value": "next_scores[batch_idx, :num_beams] == beam_scores.view(batch_size, num_beams)[batch_idx]",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "topk_1592": {
                "input": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": []
                },
                "k": {
                    "value": "top_k",
                    "type": "variable",
                    "possible_values": [
                        [
                            "min(max(top_k, min_tokens_to_keep), logits.size(-1))",
                            "Call"
                        ],
                        [
                            "top_k if top_k is not None else self.config.top_k",
                            "IfExp"
                        ]
                    ]
                }
            },
            "is_tensor_103": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "is_tensor_121": {
                "obj": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            }
        }
    },
    "models.py": {
        "torch": {
            "Linear_54": {
                "variable": {
                    "value": "self.q",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_55": {
                "variable": {
                    "value": "self.k",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_56": {
                "variable": {
                    "value": "self.v",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Linear_57": {
                "variable": {
                    "value": "self.o",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.inner_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "self.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ones_66": {
                "variable": {
                    "value": "mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out": {
                    "value": "self.d_kv",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_125": {
                "variable": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "einsum_211": {
                "variable": {
                    "value": "scores",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bnqd,bnkd->bnqk",
                    "type": "str",
                    "possible_values": []
                },
                "*operands": {
                    "value": "q",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.q(input))",
                            "Call"
                        ]
                    ]
                }
            },
            "softmax_227": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "scores.float()",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "dropout_228": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mem_weights, weights], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "training": {
                    "value": "self.training",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_234": {
                "variable": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "F.softmax(scores.float(), dim=-1).type_as(scores)",
                            "Call"
                        ],
                        [
                            "F.dropout(weights, p=self.dropout, training=self.training)",
                            "Call"
                        ],
                        [
                            "weights * head_mask",
                            "BinOp"
                        ],
                        [
                            "torch.cat([mem_weights, weights], dim=-1)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shape(self.v(input))",
                            "Call"
                        ],
                        [
                            "shape(self.v(v))",
                            "Call"
                        ],
                        [
                            "torch.cat([v_, v], dim=2)",
                            "Call"
                        ]
                    ]
                }
            },
            "Dropout_253": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Dropout_288": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_318": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_406": {
                "variable": {
                    "value": "self.layer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "tensor_563": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_INPUTS",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "tensor_564": {
                "variable": {
                    "value": "input_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "data": {
                    "value": "DUMMY_MASK",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "ModuleList_635": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[T5Block(config, has_relative_attention_bias=bool(i == 0)) for i in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_639": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_784": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[T5BlockHT5Dec(config, has_relative_attention_bias=bool(i == 0)) for i in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_788": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ModuleList_937": {
                "variable": {
                    "value": "self.block",
                    "type": "Attribute",
                    "possible_values": []
                },
                "modules": {
                    "value": "[T5Block(config, has_relative_attention_bias=bool(i == 0)) for i in range(config.num_layers)]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "Dropout_941": {
                "variable": {
                    "value": "self.dropout",
                    "type": "Attribute",
                    "possible_values": []
                },
                "p": {
                    "value": "config.dropout_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_981": {
                "variable": {
                    "value": "turns",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "turns",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(turns, dim=1)",
                            "Call"
                        ]
                    ]
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_982": {
                "variable": {
                    "value": "mem_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, self.memory_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Embedding_1116": {
                "variable": {
                    "value": "self.shared",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_1130": {
                "variable": {
                    "value": "self.lm_head",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "config.d_model",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "config.vocab_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Embedding_60": {
                "variable": {
                    "value": "self.relative_attention_bias",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_embeddings": {
                    "value": "self.relative_attention_num_buckets",
                    "type": "Attribute",
                    "possible_values": []
                },
                "embedding_dim": {
                    "value": "self.n_heads",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "abs_112": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "max_114": {
                "variable": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "where_127": {
                "condition": {
                    "value": "is_small",
                    "type": "variable",
                    "possible_values": [
                        [
                            "n < max_exact",
                            "Compare"
                        ]
                    ]
                },
                "x": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                }
            },
            "split_463": {
                "variable": {
                    "value": "(memory, encoder_hidden_states)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoder_hidden_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.memory_length, length - self.memory_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_464": {
                "variable": {
                    "value": "(memory_attention_mask, encoder_attention_mask)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.ones(batch_size, encoder_seq_length, device=inputs_embeds.device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.ones(batch_size, encoder_seq_length, device=inputs_embeds.device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "torch.ones(batch_size, encoder_seq_length, device=inputs_embeds.device, dtype=torch.long)",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.memory_length, length - self.memory_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "all_621": {
                "input": {
                    "value": "shifted_input_ids >= 0",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "ones_694": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "mask_seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ],
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ],
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_697": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder_seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ],
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ],
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ones_843": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "mask_seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ],
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ],
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_846": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder_seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ],
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ],
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "split_961": {
                "variable": {
                    "value": "(input_ids, turn_indexes)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.tensor(DUMMY_INPUTS)",
                            "Call"
                        ],
                        [
                            "input_ids.view(-1, input_shape[-1])",
                            "Call"
                        ],
                        [
                            "input_ids.view(-1, input_shape[-1])",
                            "Call"
                        ],
                        [
                            "input_ids.view(-1, input_shape[-1])",
                            "Call"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[length // 2, length // 2]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_1029": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "mask_seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ],
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ],
                        [
                            "seq_length",
                            "Name"
                        ],
                        [
                            "past_key_value_states[0][0].shape[2] + seq_length",
                            "BinOp"
                        ]
                    ]
                }
            },
            "ones_1032": {
                "variable": {
                    "value": "encoder_attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out": {
                    "value": "encoder_seq_length",
                    "type": "variable",
                    "possible_values": [
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ],
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ],
                        [
                            "encoder_hidden_states.shape[1]",
                            "Subscript"
                        ]
                    ]
                },
                "device": {
                    "value": "inputs_embeds.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_1252": {
                "variable": {
                    "value": "loss_fct",
                    "type": "variable",
                    "possible_values": []
                },
                "ignore_index": {
                    "value": "-100",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "full_like_125": {
                "input": {
                    "value": "val_if_large",
                    "type": "variable",
                    "possible_values": [
                        [
                            "max_exact + (torch.log(n.float() / max_exact) / math.log(max_distance / max_exact) * (num_buckets - max_exact)).to(torch.long)",
                            "BinOp"
                        ],
                        [
                            "torch.min(val_if_large, torch.full_like(val_if_large, num_buckets - 1))",
                            "Call"
                        ]
                    ]
                },
                "fill_value": {
                    "value": "num_buckets - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "arange_132": {
                "start": {
                    "value": "qlen",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_133": {
                "start": {
                    "value": "klen",
                    "type": "variable",
                    "possible_values": [
                        [
                            "real_qlen",
                            "Name"
                        ],
                        [
                            "kv.size(1)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_201": {
                "variable": {
                    "value": "k",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[k_, k]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_202": {
                "variable": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[v_, v]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "split_467": {
                "variable": {
                    "value": "(mem_decoder_position_bias, encoder_decoder_position_bias)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "encoder_decoder_position_bias",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "layer_outputs[5 if self.output_attentions else 3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "layer_outputs[5 if self.output_attentions else 3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Constant"
                        ],
                        [
                            "layer_outputs[5 if self.output_attentions else 3]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ],
                        [
                            "None",
                            "MethodArgument"
                        ]
                    ]
                },
                "split_size_or_sections": {
                    "value": "[self.memory_length, length - self.memory_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_470": {
                "variable": {
                    "value": "(mem_key, key)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "key",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[self.memory_length, length - self.memory_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_471": {
                "variable": {
                    "value": "(mem_value, value)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "value",
                    "type": "variable",
                    "possible_values": []
                },
                "split_size_or_sections": {
                    "value": "[self.memory_length, length - self.memory_length]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-2",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_522": {
                "variable": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_weights, weights]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "cat_524": {
                "variable": {
                    "value": "positions",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_positions, positions]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_114": {
                "input": {
                    "value": "n",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-relative_position",
                            "UnaryOp"
                        ],
                        [
                            "torch.abs(n)",
                            "Call"
                        ],
                        [
                            "torch.max(n, torch.zeros_like(n))",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_519": {
                "tensors": {
                    "value": "[mem_present_kv[0], present_kv[0]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_520": {
                "tensors": {
                    "value": "[mem_present_kv[1], present_kv[1]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_963": {
                "tensors": {
                    "value": "[memory, hidden_states]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "arange_72": {
                "start": {
                    "value": "len(mask)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sum_980": {
                "input": {
                    "value": "hidden_states * mask.unsqueeze(-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "log_123": {
                "input": {
                    "value": "n.float() / max_exact",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "t5.py": {
        "torch": {
            "DataLoader_98": {
                "variable": {
                    "value": "train_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.data_file)",
                            "Call"
                        ],
                        [
                            "train_dataset['dataset']",
                            "Subscript"
                        ]
                    ]
                },
                "sampler": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "DistributedSampler(train_dataset)",
                            "Call"
                        ],
                        [
                            "SortishSampler(train_dataset, batch_size=args.train_batch_size)",
                            "Call"
                        ],
                        [
                            "RandomSampler(train_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.train_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_325": {
                "variable": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "dev_data_file",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "SequentialSampler_333": {
                "variable": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(dev_data_file)",
                            "Call"
                        ],
                        [
                            "eval_dataset['dataset']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataLoader_334": {
                "variable": {
                    "value": "eval_dataloader",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "eval_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(dev_data_file)",
                            "Call"
                        ],
                        [
                            "eval_dataset['dataset']",
                            "Subscript"
                        ]
                    ]
                },
                "sampler": {
                    "value": "eval_sampler",
                    "type": "variable",
                    "possible_values": [
                        [
                            "SequentialSampler(eval_dataset)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "args.eval_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_62": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_73": {
                "variable": {
                    "value": "decoder_input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[torch.zeros(decoder_input_ids.size()[0], 1, dtype=torch.long).cuda(), decoder_input_ids]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "SummaryWriter_87": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DistributedSampler_91": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.data_file)",
                            "Call"
                        ],
                        [
                            "train_dataset['dataset']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "DataParallel_155": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.pretrained_checkpoint if args.from_pretrain else args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "DistributedDataParallel_159": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.pretrained_checkpoint if args.from_pretrain else args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, config=config)",
                            "Call"
                        ]
                    ]
                },
                "device_ids": {
                    "value": "[args.local_rank]",
                    "type": "List",
                    "possible_values": []
                },
                "output_device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                },
                "find_unused_parameters": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "SummaryWriter_321": {
                "variable": {
                    "value": "tb_writer",
                    "type": "variable",
                    "possible_values": []
                },
                "log_dir": {
                    "value": "args.output_dir",
                    "type": "Attribute",
                    "possible_values": []
                },
                "flush_secs": {
                    "value": "30",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataParallel_338": {
                "variable": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.local_rank], output_device=args.local_rank, find_unused_parameters=True)",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "model_class(config)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(args.pretrained_checkpoint if args.from_pretrain else args.model_name_or_path, from_tf=bool('.ckpt' in args.model_name_or_path), config=config, cache_dir=args.cache_dir if args.cache_dir else None)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint)",
                            "Call"
                        ],
                        [
                            "model_class.from_pretrained(checkpoint, config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "device_702": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda if torch.cuda.is_available() and (not args.no_cuda) else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "device_count_703": {
                "variable": {
                    "value": "args.n_gpu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "device_706": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda",
                    "type": "str",
                    "possible_values": []
                },
                "index": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_780": {
                "variable": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "f": {
                    "value": "args.data_file",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_all_64": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "RandomSampler_96": {
                "variable": {
                    "value": "train_sampler",
                    "type": "variable",
                    "possible_values": []
                },
                "data_source": {
                    "value": "train_dataset",
                    "type": "variable",
                    "possible_values": [
                        [
                            "torch.load(args.data_file)",
                            "Call"
                        ],
                        [
                            "train_dataset['dataset']",
                            "Subscript"
                        ]
                    ]
                }
            },
            "set_device_705": {
                "device": {
                    "value": "args.local_rank",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "save_792": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(args.output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_143": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "load_144": {
                "f": {
                    "value": "os.path.join(args.model_name_or_path, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cat_215": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, batch[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_216": {
                "variable": {
                    "value": "mem_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, args.max_turn_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_217": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_attn_mask, attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "no_grad_348": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_359": {
                "variable": {
                    "value": "input_ids",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[input_ids, batch[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_360": {
                "variable": {
                    "value": "mem_attn_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "(batch_size, args.max_turn_length)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_361": {
                "variable": {
                    "value": "attention_mask",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[mem_attn_mask, attention_mask]",
                    "type": "List",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_73": {
                "*size": {
                    "value": "decoder_input_ids.size()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "out": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__238": {
                "parameters": {
                    "value": "amp.master_params(optimizer)",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "clip_grad_norm__240": {
                "parameters": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "max_norm": {
                    "value": "args.max_grad_norm",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_702": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_289": {
                "obj": {
                    "value": "args",
                    "type": "variable",
                    "possible_values": [
                        [
                            "parser.parse_args()",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "os.path.join(output_dir, 'training_args.bin')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_292": {
                "obj": {
                    "value": "optimizer.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'optimizer.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "save_293": {
                "obj": {
                    "value": "scheduler.state_dict()",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "os.path.join(output_dir, 'scheduler.pt')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "utils.py": {
        "torch": {
            "LambdaLR_45": {
                "optimizer": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "lr_lambda": {
                    "value": "lr_lambda",
                    "type": "variable",
                    "possible_values": []
                },
                "last_epoch": {
                    "value": "last_epoch",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-1",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "arange_56": {
                "start": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "end": {
                    "value": "size",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "torch.long",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "mm_238": {
                "input": {
                    "value": "r_factor.unsqueeze(-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "mat2": {
                    "value": "c_factor.unsqueeze(0)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cumsum_54": {
                "input": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "max_95": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "min_95": {
                "input": {
                    "value": "indices",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "zeros_like_271": {
                "variable": {
                    "value": "state[exp_avg]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_273": {
                "variable": {
                    "value": "state[exp_avg_sq_row]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "zeros_274": {
                "variable": {
                    "value": "state[exp_avg_sq_col]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "*size": {
                    "value": "grad_shape[:-2] + grad_shape[-1:]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "zeros_like_276": {
                "variable": {
                    "value": "state[exp_avg_sq]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "p.grad.data",
                            "Attribute"
                        ],
                        [
                            "grad.float()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    }
}