{
    "mbbl_envs/mbbl/network/dynamics/linear_stochastic_forward_dynamics_gmm_prior.py": {
        "sklearn": {
            "GaussianMixture_42": {
                "variable": {
                    "value": "self._gmm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.args.gmm_num_cluster",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "self.args.gmm_max_iteration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.args.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/policy/gps_policy_gmm_refit.py": {
        "sklearn": {
            "GaussianMixture_79": {
                "variable": {
                    "value": "self._gmm",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n_components": {
                    "value": "self.args.gmm_num_cluster",
                    "type": "Attribute",
                    "possible_values": []
                },
                "covariance_type": {
                    "value": "full",
                    "type": "str",
                    "possible_values": []
                },
                "max_iter": {
                    "value": "self.args.gmm_max_iteration",
                    "type": "Attribute",
                    "possible_values": []
                },
                "random_state": {
                    "value": "self.args.seed",
                    "type": "Attribute",
                    "possible_values": []
                },
                "warm_start": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        },
        "tensorflow": {
            "placeholder_162": {
                "variable": {
                    "value": "self._input_ph[target_action_mu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_mu_action",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_164": {
                "variable": {
                    "value": "self._input_ph[target_precision]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "target_precision",
                    "type": "str",
                    "possible_values": []
                }
            },
            "expand_dims_169": {
                "variable": {
                    "value": "self._tensor[diff_action_mu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._input_ph['target_action_mu'] - self._tensor['action_dist_mu']",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_mean_175": {
                "variable": {
                    "value": "self._update_operator[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.matmul(tf.matmul(self._tensor['diff_action_mu'], self._input_ph['target_precision']), tf.transpose(self._tensor['diff_action_mu'], [0, 2, 1]))",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "policy_supervised_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_191": {
                "variable": {
                    "value": "self._update_operator[update_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.policy_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_176": {
                "a": {
                    "value": "tf.matmul(self._tensor['diff_action_mu'], self._input_ph['target_precision'])",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "tf.transpose(self._tensor['diff_action_mu'], [0, 2, 1])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_177": {
                "a": {
                    "value": "self._tensor['diff_action_mu']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "b": {
                    "value": "self._input_ph['target_precision']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "transpose_179": {
                "a": {
                    "value": "self._tensor['diff_action_mu']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "perm": {
                    "value": "[0, 2, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/main/mbmf_main.py": {
        "tensorflow": {
            "reset_default_graph_217": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/env/gym_env/delayed_walker.py": {
        "tensorflow": {
            "convert_to_tensor_279": {
                "variable": {
                    "value": "reward_height",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "(data_dict['end_state'][height_ob_pos] - agent_height) / self._env.env.dt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "convert_to_tensor_284": {
                "variable": {
                    "value": "reward_height",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "-height_coeff * (agent_height - target_height) ** 2",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_273": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_276": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_288": {
                "input_tensor": {
                    "value": "tf.square(data_dict['action'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "square_288": {
                "x": {
                    "value": "data_dict['action']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/dynamics/base_dynamics.py": {
        "tensorflow": {
            "placeholder_70": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._observation_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "start_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_74": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._observation_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "end_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_78": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_94": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_97": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/dynamics/bayesian_forward_dynamics.py": {
        "tensorflow": {
            "concat_53": {
                "variable": {
                    "value": "self._tensor[net_input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[self._tensor['normalized_start_states'], self._input_ph['actions']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_64": {
                "variable": {
                    "value": "self.coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "coeff",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant(0.001)",
                    "type": "Call",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_mean_93": {
                "variable": {
                    "value": "self._tensor[val_output]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.reshape(tmp, [self.args.particles, -1, self._obs_dim])",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_squared_error_112": {
                "variable": {
                    "value": "self._update_operator[mse]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "self._tensor['normalized_state_diff']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self._tensor['train_output']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "mean_squared_error_118": {
                "variable": {
                    "value": "self._update_operator[mse_val]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "labels": {
                    "value": "self._tensor['normalized_state_diff']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "predictions": {
                    "value": "self._tensor['val_output']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "variable_scope_65": {
                "name_or_scope": {
                    "value": "self._name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "tile_90": {
                "input": {
                    "value": "self._tensor['net_input']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[self.args.particles, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_93": {
                "tensor": {
                    "value": "tmp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._mlp(tf.tile(self._tensor['net_input'], [self.args.particles, 1]), mode='val')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.args.particles, -1, self._obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "control_dependencies_133": {
                "control_inputs": {
                    "value": "[self._update_operator['inv_update_op']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "0.001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "trainable_variables_128": {
                "scope": {
                    "value": "self._name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/dynamics/deterministic_forward_dynamics.py": {
        "tensorflow": {
            "concat_57": {
                "variable": {
                    "value": "self._tensor[net_input]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "values": {
                    "value": "[self._tensor['normalized_start_state'], self._input_ph['action']]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "square_104": {
                "variable": {
                    "value": "self._update_operator[pred_error]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self._tensor['net_output'] - self._tensor['normalized_state_diff']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_109": {
                "variable": {
                    "value": "self._update_operator[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._update_operator['pred_error']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "AdamOptimizer_111": {
                "variable": {
                    "value": "self._update_operator[update_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.dynamics_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/dynamics/deterministic_forward_ggnn_dynamics.py": {
        "tensorflow": {
            "AdamOptimizer_112": {
                "variable": {
                    "value": "self._update_operator[update_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.dynamics_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_214": {
                "variable": {
                    "value": "self._input_ph[keep_prob]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_97": {
                "variable": {
                    "value": "self._update_operator[pred_error]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self._tensor['net_output'] - self._tensor['normalized_state_diff']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_101": {
                "variable": {
                    "value": "self._update_operator[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "self._update_operator['pred_error']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "variable": {
                    "value": "self._update_operator[loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "-tf.reduce_sum(self._input_ph['discretize_label_ph'] * tf.nn.log_softmax(self._tensor['net_output'], axis=-1), axis=-1)",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "placeholder_217": {
                "variable": {
                    "value": "self._input_ph[discretize_label_ph]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(None, self.obs_dim, self.args.d_bins)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "discretize_label",
                    "type": "str",
                    "possible_values": []
                }
            },
            "zeros_262": {
                "variable": {
                    "value": "ob_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, len(self.inv_ob_assign) - self.obs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_263": {
                "variable": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self._tensor['normalized_start_state'], ob_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "zeros_264": {
                "variable": {
                    "value": "ac_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[bs, len(self.inv_ac_assign) - self.acs_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_265": {
                "variable": {
                    "value": "acs",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[self._input_ph['action'], ac_pad]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "gather_268": {
                "variable": {
                    "value": "arranged_ob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "obs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self._tensor['normalized_start_state'], ob_pad], 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.constant(self.ob_assign)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_269": {
                "variable": {
                    "value": "ob_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arranged_ob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(obs, tf.constant(self.ob_assign), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, self.ggnn_info['n_node'], self.most_node_ob]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_271": {
                "variable": {
                    "value": "arranged_ac",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "acs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([self._input_ph['action'], ac_pad], 1)",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.constant(self.ac_assign)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_272": {
                "variable": {
                    "value": "ac_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "arranged_ac",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.gather(acs, tf.constant(self.ac_assign), axis=1)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[bs, self.ggnn_info['n_node'], self.most_node_ac]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_276": {
                "variable": {
                    "value": "state_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[ob_mat, ac_mat]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_278": {
                "variable": {
                    "value": "meta_info",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant(self.meta_info, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_280": {
                "variable": {
                    "value": "anno_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "meta_info",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.constant(self.meta_info, dtype=tf.float32), axis=0)",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[bs, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "expand_dims_282": {
                "variable": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.constant(self.graph, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_284": {
                "variable": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "adj_mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(tf.constant(self.graph, dtype=tf.float32), axis=0)",
                            "Call"
                        ],
                        [
                            "tf.tile(adj_mat, [bs, 1, 1])",
                            "Call"
                        ],
                        [
                            "self._get_gnn_input()",
                            "Call"
                        ]
                    ]
                },
                "multiples": {
                    "value": "[bs, 1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_294": {
                "variable": {
                    "value": "true_ob",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "full_ob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.gnn_model(state_mat, anno_mat, adj_mat, self._input_ph['keep_prob'], reuse=False)",
                            "Call"
                        ],
                        [
                            "full_ob",
                            "Method Argument"
                        ]
                    ]
                },
                "indices": {
                    "value": "tf.constant(self.inv_ob_assign)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cast_323": {
                "variable": {
                    "value": "self.bin_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.argmax(normalized_predictions, axis=-1)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "subtract_324": {
                "variable": {
                    "value": "self.bin_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "self.bin_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "tf.constant(int(self.args.d_bins / 2), dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multiply_331": {
                "variable": {
                    "value": "normalized_deltas",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "self.bin_id",
                    "type": "Attribute",
                    "possible_values": []
                },
                "y": {
                    "value": "bin_step",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant(4 * np.ones(self.obs_dim), dtype=tf.float32) / self.args.d_bins",
                            "BinOp"
                        ]
                    ]
                }
            },
            "variable_scope_56": {
                "name_or_scope": {
                    "value": "self._name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_258": {
                "name_or_scope": {
                    "value": "self._name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_293": {
                "name_or_scope": {
                    "value": "self._name_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_259": {
                "input": {
                    "value": "self._tensor['normalized_start_state']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "constant_268": {
                "value": {
                    "value": "self.ob_assign",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_271": {
                "value": {
                    "value": "self.ac_assign",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_279": {
                "value": {
                    "value": "self.meta_info",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_283": {
                "value": {
                    "value": "self.graph",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_294": {
                "value": {
                    "value": "self.inv_ob_assign",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "argmax_323": {
                "input": {
                    "value": "normalized_predictions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normalized_predictions",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "constant_325": {
                "value": {
                    "value": "int(self.args.d_bins / 2)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "constant_327": {
                "value": {
                    "value": "4 * np.ones(self.obs_dim)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_105": {
                "input_tensor": {
                    "value": "self._input_ph['discretize_label_ph'] * tf.nn.log_softmax(self._tensor['net_output'], axis=-1)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "log_softmax_107": {
                "logits": {
                    "value": "self._tensor['net_output']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/policy/base_policy.py": {
        "tensorflow": {
            "placeholder_56": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._observation_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "start_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_75": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/policy/mbmf_policy.py": {
        "tensorflow": {
            "mean_squared_error_27": {
                "variable": {
                    "value": "self._update_operator[initial_policy_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_true": {
                    "value": "self._input_ph['action']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_pred": {
                    "value": "self._tensor['action_dist_mu']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "scope": {
                    "value": "initial_policy_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_31": {
                "variable": {
                    "value": "self._update_operator[initial_update_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.initial_policy_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/policy/ppo_cnn_policy.py": {
        "tensorflow": {
            "Variable_70": {
                "variable": {
                    "value": "self._tensor[action_logstd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "(0 * self._npr.randn(1, self._action_size)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "action_logstd",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_74": {
                "variable": {
                    "value": "self._tensor[action_dist_logstd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._tensor['action_logstd']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack((tf.shape(self._tensor['action_dist_mu'])[0], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self._input_ph[value_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "value_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_98": {
                "variable": {
                    "value": "self._update_operator[vf_update_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.value_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_105": {
                "variable": {
                    "value": "self._input_ph[action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_sampled_in_rollout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_109": {
                "variable": {
                    "value": "self._input_ph[advantage]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantage_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_112": {
                "variable": {
                    "value": "self._input_ph[old_action_dist_mu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_act_dist_mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_115": {
                "variable": {
                    "value": "self._input_ph[old_action_dist_logstd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_act_dist_logstd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_118": {
                "variable": {
                    "value": "self._input_ph[batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size_float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_121": {
                "variable": {
                    "value": "self._input_ph[lr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_124": {
                "variable": {
                    "value": "self._input_ph[kl_lambda]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_142": {
                "variable": {
                    "value": "self._tensor[ratio]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self._tensor['log_p_n'] - self._tensor['log_oldp_n']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_144": {
                "variable": {
                    "value": "self._tensor[ratio_clipped]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "t": {
                    "value": "self._tensor['ratio']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0 - self._ppo_clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + self._ppo_clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_170": {
                "variable": {
                    "value": "self._update_operator[surr_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(self._update_operator['pol_loss_unclipped'], self._update_operator['pol_loss_clipped'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_194": {
                "variable": {
                    "value": "self._update_operator[update_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._input_ph['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "placeholder_41": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._image_height, self._image_width, self._image_channel]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "start_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "stack_76": {
                "values": {
                    "value": "(tf.shape(self._tensor['action_dist_mu'])[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_92": {
                "input_tensor": {
                    "value": "tf.square(self._tensor['pred_value'] - self._input_ph['value_target'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_164": {
                "tensor": {
                    "value": "self._input_ph['advantage']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "self._input_ph['advantage']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_171": {
                "x": {
                    "value": "self._update_operator['pol_loss_unclipped']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self._update_operator['pol_loss_clipped']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_93": {
                "x": {
                    "value": "self._tensor['pred_value'] - self._input_ph['value_target']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_181": {
                "x": {
                    "value": "tf.maximum(0.0, self._tensor['kl'] - 2.0 * self.args.target_kl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_181": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self._tensor['kl'] - 2.0 * self.args.target_kl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_76": {
                "input": {
                    "value": "self._tensor['action_dist_mu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/policy/ppo_policy.py": {
        "tensorflow": {
            "Variable_71": {
                "variable": {
                    "value": "self._tensor[action_logstd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "(0 * self._npr.randn(1, self._action_size)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "action_logstd",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_75": {
                "variable": {
                    "value": "self._tensor[action_dist_logstd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._tensor['action_logstd']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack((tf.shape(self._tensor['action_dist_mu'])[0], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_96": {
                "variable": {
                    "value": "self._input_ph[value_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "value_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self._input_ph[old_values]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_value_est",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_146": {
                "variable": {
                    "value": "self._update_operator[vf_update_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.value_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_153": {
                "variable": {
                    "value": "self._input_ph[action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_sampled_in_rollout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_157": {
                "variable": {
                    "value": "self._input_ph[advantage]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantage_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_160": {
                "variable": {
                    "value": "self._input_ph[old_action_dist_mu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_act_dist_mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "self._input_ph[old_action_dist_logstd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_act_dist_logstd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_166": {
                "variable": {
                    "value": "self._input_ph[batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size_float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_169": {
                "variable": {
                    "value": "self._input_ph[lr]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_172": {
                "variable": {
                    "value": "self._input_ph[kl_lambda]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "learning_rate",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_190": {
                "variable": {
                    "value": "self._tensor[ratio]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self._tensor['log_p_n'] - self._tensor['log_oldp_n']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "clip_by_value_192": {
                "variable": {
                    "value": "self._tensor[ratio_clipped]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "t": {
                    "value": "self._tensor['ratio']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "clip_value_min": {
                    "value": "1.0 - self._ppo_clip",
                    "type": "BinOp",
                    "possible_values": []
                },
                "clip_value_max": {
                    "value": "1.0 + self._ppo_clip",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_218": {
                "variable": {
                    "value": "self._update_operator[surr_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.maximum(self._update_operator['pol_loss_unclipped'], self._update_operator['pol_loss_clipped'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_242": {
                "variable": {
                    "value": "self._update_operator[update_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self._input_ph['lr']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "stack_77": {
                "values": {
                    "value": "(tf.shape(self._tensor['action_dist_mu'])[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "reduce_mean_140": {
                "input_tensor": {
                    "value": "tf.square(self._tensor['pred_value'] - self._input_ph['value_target'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_212": {
                "tensor": {
                    "value": "self._input_ph['advantage']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_216": {
                "tensor": {
                    "value": "self._input_ph['advantage']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "maximum_219": {
                "x": {
                    "value": "self._update_operator['pol_loss_unclipped']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y": {
                    "value": "self._update_operator['pol_loss_clipped']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_141": {
                "x": {
                    "value": "self._tensor['pred_value'] - self._input_ph['value_target']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "square_229": {
                "x": {
                    "value": "tf.maximum(0.0, self._tensor['kl'] - 2.0 * self.args.target_kl)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "maximum_229": {
                "x": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "self._tensor['kl'] - 2.0 * self.args.target_kl",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "shape_77": {
                "input": {
                    "value": "self._tensor['action_dist_mu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/policy/trpo_policy.py": {
        "tensorflow": {
            "Variable_63": {
                "variable": {
                    "value": "self._tensor[action_logstd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "(0 * self._npr.randn(1, self._action_size)).astype(np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "action_logstd",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "tile_67": {
                "variable": {
                    "value": "self._tensor[action_dist_logstd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input": {
                    "value": "self._tensor['action_logstd']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "multiples": {
                    "value": "tf.stack((tf.shape(self._tensor['action_dist_mu'])[0], 1))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "placeholder_88": {
                "variable": {
                    "value": "self._input_ph[value_target]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "value_target",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_111": {
                "variable": {
                    "value": "self._update_operator[vf_loss]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf.square(self._tensor['pred_value'] - self._input_ph['value_target'])",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "vf_loss",
                    "type": "str",
                    "possible_values": []
                }
            },
            "AdamOptimizer_115": {
                "variable": {
                    "value": "self._update_operator[vf_update_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.value_lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "beta1": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "beta2": {
                    "value": "0.99",
                    "type": "float",
                    "possible_values": []
                },
                "epsilon": {
                    "value": "0.0001",
                    "type": "float",
                    "possible_values": []
                }
            },
            "placeholder_122": {
                "variable": {
                    "value": "self._input_ph[action]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "action_sampled_in_rollout",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_126": {
                "variable": {
                    "value": "self._input_ph[advantage]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "advantage_value",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_129": {
                "variable": {
                    "value": "self._input_ph[old_action_dist_mu]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_act_dist_mu",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_132": {
                "variable": {
                    "value": "self._input_ph[old_action_dist_logstd]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._action_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "old_act_dist_logstd",
                    "type": "str",
                    "possible_values": []
                }
            },
            "placeholder_135": {
                "variable": {
                    "value": "self._input_ph[batch_size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "batch_size_float",
                    "type": "str",
                    "possible_values": []
                }
            },
            "exp_150": {
                "variable": {
                    "value": "self._tensor[ratio]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self._tensor['log_p_n'] - self._tensor['log_oldp_n']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "gradients_178": {
                "variable": {
                    "value": "self._tensor[kl_gradients]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "ys": {
                    "value": "self._tensor['kl_firstfixed']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "xs": {
                    "value": "self._trainable_var_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_183": {
                "variable": {
                    "value": "self._input_ph[flat_tangents]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "flat_tangent",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_189": {
                "variable": {
                    "value": "param",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._input_ph['flat_tangents'][start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "shapes",
                            "variable"
                        ]
                    ]
                }
            },
            "stack_69": {
                "values": {
                    "value": "(tf.shape(self._tensor['action_dist_mu'])[0], 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "square_112": {
                "x": {
                    "value": "self._tensor['pred_value'] - self._input_ph['value_target']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_166": {
                "input_tensor": {
                    "value": "self._tensor['ratio'] * tf.reshape(self._input_ph['advantage'], [-1])",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_196": {
                "input_tensor": {
                    "value": "g * t",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_168": {
                "tensor": {
                    "value": "self._input_ph['advantage']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "shape_69": {
                "input": {
                    "value": "self._tensor['action_dist_mu']",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/reward/GAN_reward.py": {
        "tensorflow": {
            "sigmoid_77": {
                "variable": {
                    "value": "self._tensor[discriminator_output]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self._tensor['logits']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "log_80": {
                "variable": {
                    "value": "self._tensor[logOfD]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "self._tensor['discriminator_output'] + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_82": {
                "variable": {
                    "value": "self._tensor[logOf1minusD]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "1 - self._tensor['discriminator_output'] + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "minimum_84": {
                "variable": {
                    "value": "self._tensor[reward_output]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "x": {
                    "value": "-self._tensor['logOf1minusD']",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "y": {
                    "value": "self.args.GAN_reward_clip_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "placeholder_90": {
                "variable": {
                    "value": "self._input_ph[if_expert_data]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "observation_gt",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reduce_mean_95": {
                "variable": {
                    "value": "self._update_operator[entropy]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "tf_utils.logit_bernoulli_entropy(self._tensor['logits'])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "AdamOptimizer_127": {
                "variable": {
                    "value": "self._update_operator[update_gan_op]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "self.args.reward_lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_109": {
                "input_tensor": {
                    "value": "tf.to_float(self._tensor['discriminator_output'] > 0.5) * self._input_ph['if_expert_data']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_112": {
                "input_tensor": {
                    "value": "self._input_ph['if_expert_data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_114": {
                "input_tensor": {
                    "value": "self._tensor['reward_output'] * self._input_ph['if_expert_data']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_116": {
                "input_tensor": {
                    "value": "self._input_ph['if_expert_data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_118": {
                "input_tensor": {
                    "value": "tf.to_float(self._tensor['discriminator_output'] < 0.5) * self._tensor['if_fake_data']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_121": {
                "input_tensor": {
                    "value": "self._tensor['if_fake_data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_sum_123": {
                "input_tensor": {
                    "value": "self._tensor['reward_output'] * self._tensor['if_fake_data']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_125": {
                "input_tensor": {
                    "value": "self._tensor['if_fake_data']",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "reduce_mean_102": {
                "input_tensor": {
                    "value": "self._tensor['if_fake_data'] * self._tensor['logOf1minusD']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_mean_104": {
                "input_tensor": {
                    "value": "self._input_ph['if_expert_data'] * self._tensor['logOfD']",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "to_float_110": {
                "x": {
                    "value": "self._tensor['discriminator_output'] > 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            },
            "to_float_119": {
                "x": {
                    "value": "self._tensor['discriminator_output'] < 0.5",
                    "type": "Compare",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/network/reward/base_reward.py": {
        "tensorflow": {
            "placeholder_59": {
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, self._observation_size]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "start_state",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_69": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/trainer/base_trainer.py": {
        "tensorflow": {
            "ConfigProto_96": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "ConfigProto_123": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_98": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "GPUOptions_111": {
                "variable": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": []
                },
                "per_process_gpu_memory_fraction": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                }
            },
            "ConfigProto_112": {
                "variable": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": []
                },
                "inter_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "intra_op_parallelism_threads": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "gpu_options": {
                    "value": "gpu_options",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.GPUOptions(per_process_gpu_memory_fraction=0.25)",
                            "Call"
                        ]
                    ]
                }
            },
            "InteractiveSession_117": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=1, intra_op_parallelism_threads=1, gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_119": {
                "variable": {
                    "value": "session",
                    "type": "variable",
                    "possible_values": []
                },
                "config": {
                    "value": "tf_config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(inter_op_parallelism_threads=1, intra_op_parallelism_threads=1, gpu_options=gpu_options)",
                            "Call"
                        ]
                    ]
                }
            },
            "InteractiveSession_125": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "Session_127": {
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ],
                        [
                            "tf.ConfigProto(config=config)",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_155": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_147": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._name_scope + '_' + key + '_' + str(i_model)",
                            "BinOp"
                        ],
                        [
                            "'trainer'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/common/summary_handler.py": {
        "tensorflow": {
            "FileWriter_42": {
                "variable": {
                    "value": "self.train_writer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "logdir": {
                    "value": "self.path",
                    "type": "Attribute",
                    "possible_values": []
                },
                "graph": {
                    "value": "self.sess.graph",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Summary_88": {
                "variable": {
                    "value": "summary",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "[tf.Summary.Value(tag=summary_name, simple_value=summary_value)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "merge_72": {
                "variable": {
                    "value": "self.summary",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inputs": {
                    "value": "self.summary_list",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "scalar_71": {
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scalar_var_list.items()",
                            "Call"
                        ]
                    ]
                },
                "data": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scalar_var_list.items()",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/common/tf_ggnn_networks.py": {
        "tensorflow": {
            "concat_204": {
                "variable": {
                    "value": "prop_state",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[prop_state, self.embedding_feature]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_271": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "stacked_pred",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "[tf.expand_dims(x, axis=2) for x in stacked_pred]",
                            "ListComp"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_274": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - z) * cur_states + z * h_hat",
                            "BinOp"
                        ],
                        [
                            "self._maxpool_final_state_result(prop_state, original_state, annotation, keep_prob)",
                            "Call"
                        ],
                        [
                            "self._discrete_output(prop_state, original_state, annotation, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat(stacked_pred, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self.bs, self.n_node * self.output_dim, self.args.d_bins])",
                            "Call"
                        ],
                        [
                            "self.output_model(concat_maxpool_feature, keep_prob, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self.bs, self.n_node * self.output_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.bs, self.n_node * self.output_dim, self.args.d_bins]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reduce_max_285": {
                "variable": {
                    "value": "max_pooled",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "prop_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([prop_state, self.embedding_feature], 2)",
                            "Call"
                        ],
                        [
                            "prop_state + original_state",
                            "BinOp"
                        ],
                        [
                            "self.propagator(in_states, out_states, prop_state, adj_mat, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(prop_state, axis=1)",
                            "Call"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "tile_288": {
                "variable": {
                    "value": "stacked_result",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tf.expand_dims(max_pooled, axis=1)",
                    "type": "Call",
                    "possible_values": []
                },
                "multiples": {
                    "value": "[1, self.n_node, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_291": {
                "variable": {
                    "value": "concat_result",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[stacked_result, prop_state, original_state, annotation]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_307": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "(1 - z) * cur_states + z * h_hat",
                            "BinOp"
                        ],
                        [
                            "self._maxpool_final_state_result(prop_state, original_state, annotation, keep_prob)",
                            "Call"
                        ],
                        [
                            "self._discrete_output(prop_state, original_state, annotation, keep_prob)",
                            "Call"
                        ],
                        [
                            "tf.concat(stacked_pred, axis=2)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self.bs, self.n_node * self.output_dim, self.args.d_bins])",
                            "Call"
                        ],
                        [
                            "self.output_model(concat_maxpool_feature, keep_prob, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.reshape(output, [self.bs, self.n_node * self.output_dim])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[self.bs, self.n_node * self.output_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_219": {
                "variable": {
                    "value": "in_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(in_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_220": {
                "variable": {
                    "value": "in_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.stack(in_states), perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_states, [-1, self.n_node * self.n_edge_type, self.node_state_dim])",
                            "Call"
                        ],
                        [
                            "in_states",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_node * self.n_edge_type, self.node_state_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "transpose_222": {
                "variable": {
                    "value": "out_states",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "tf.stack(out_states)",
                    "type": "Call",
                    "possible_values": []
                },
                "perm": {
                    "value": "[1, 0, 2, 3]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_223": {
                "variable": {
                    "value": "out_states",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "in_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.stack(in_states), perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_states, [-1, self.n_node * self.n_edge_type, self.node_state_dim])",
                            "Call"
                        ],
                        [
                            "in_states",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, self.n_node * self.n_edge_type, self.node_state_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "batch_normalization_232": {
                "variable": {
                    "value": "prop_state",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "prop_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([prop_state, self.embedding_feature], 2)",
                            "Call"
                        ],
                        [
                            "prop_state + original_state",
                            "BinOp"
                        ],
                        [
                            "self.propagator(in_states, out_states, prop_state, adj_mat, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(prop_state, axis=1)",
                            "Call"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_28": {
                "name_or_scope": {
                    "value": "ggnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "dense_38": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(out, self.output_size, activation=self.output_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, self.size)",
                            "Call"
                        ],
                        [
                            "out + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(out, keep_prob=keep_prob)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "self.output_activation",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_73": {
                "name_or_scope": {
                    "value": "ggnn",
                    "type": "str",
                    "possible_values": []
                }
            },
            "matmul_76": {
                "variable": {
                    "value": "a_in",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A_in",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_matrix[:, :, :self.n_node * self.n_edge_type]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "in_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.stack(in_states), perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_states, [-1, self.n_node * self.n_edge_type, self.node_state_dim])",
                            "Call"
                        ],
                        [
                            "in_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_77": {
                "variable": {
                    "value": "a_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "A_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "adj_matrix[:, :, self.n_node * self.n_edge_type:]",
                            "Subscript"
                        ]
                    ]
                },
                "b": {
                    "value": "out_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.stack(out_states), perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_states, [-1, self.n_node * self.n_edge_type, self.node_state_dim])",
                            "Call"
                        ],
                        [
                            "out_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_78": {
                "variable": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[a_in, a_out, cur_states]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_80": {
                "variable": {
                    "value": "r",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([a_in, a_out, cur_states], 2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.node_state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_82": {
                "variable": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "a",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([a_in, a_out, cur_states], 2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.node_state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.sigmoid",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_85": {
                "variable": {
                    "value": "joint_h",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[a_in, a_out, r * cur_states]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "dense_86": {
                "variable": {
                    "value": "h_hat",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "joint_h",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([a_in, a_out, r * cur_states], 2)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.node_state_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.tanh",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_196": {
                "input": {
                    "value": "prop_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([prop_state, self.embedding_feature], 2)",
                            "Call"
                        ],
                        [
                            "prop_state + original_state",
                            "BinOp"
                        ],
                        [
                            "self.propagator(in_states, out_states, prop_state, adj_mat, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(prop_state, axis=1)",
                            "Call"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_197": {
                "input": {
                    "value": "prop_state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([prop_state, self.embedding_feature], 2)",
                            "Call"
                        ],
                        [
                            "prop_state + original_state",
                            "BinOp"
                        ],
                        [
                            "self.propagator(in_states, out_states, prop_state, adj_mat, reuse=tf.AUTO_REUSE)",
                            "Call"
                        ],
                        [
                            "tf.layers.batch_normalization(prop_state, axis=1)",
                            "Call"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ],
                        [
                            "prop_state",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_268": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_288": {
                "input": {
                    "value": "max_pooled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reduce_max(prop_state, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "variable_scope_29": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_74": {
                "name_or_scope": {
                    "value": "self.scope",
                    "type": "Attribute",
                    "possible_values": []
                },
                "reuse": {
                    "value": "reuse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ],
                        [
                            "False",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_219": {
                "values": {
                    "value": "in_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.stack(in_states), perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_states, [-1, self.n_node * self.n_edge_type, self.node_state_dim])",
                            "Call"
                        ],
                        [
                            "in_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "stack_222": {
                "values": {
                    "value": "out_states",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "tf.transpose(tf.stack(out_states), perm=[1, 0, 2, 3])",
                            "Call"
                        ],
                        [
                            "tf.reshape(in_states, [-1, self.n_node * self.n_edge_type, self.node_state_dim])",
                            "Call"
                        ],
                        [
                            "out_states",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "dense_32": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(out, self.output_size, activation=self.output_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, self.size)",
                            "Call"
                        ],
                        [
                            "out + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(out, keep_prob=keep_prob)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "self.size",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dropout_35": {
                "variable": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input",
                            "variable"
                        ],
                        [
                            "tf.layers.dense(out, self.output_size, activation=self.output_activation)",
                            "Call"
                        ],
                        [
                            "tf.layers.dense(out, self.size)",
                            "Call"
                        ],
                        [
                            "out + input",
                            "BinOp"
                        ],
                        [
                            "tf.nn.dropout(out, keep_prob=keep_prob)",
                            "Call"
                        ],
                        [
                            "self.activation(out)",
                            "Call"
                        ]
                    ]
                },
                "keep_prob": {
                    "value": "keep_prob",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ],
                        [
                            "keep_prob",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/common/tf_networks.py": {
        "tensorflow": {
            "get_variable_129": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "initializer": {
                    "value": "initializer(shape)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "constant_56": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "npr.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=axis, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "npr.randn(*shape).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "zeros_initializer_84": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "sigmoid_205": {
                "variable": {
                    "value": "g_i",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self._w_xi) + tf.matmul(state, self._w_hi) + self._b_i",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_210": {
                "variable": {
                    "value": "g_r",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self._w_xr) + tf.matmul(state, self._w_hr) + self._b_r",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_215": {
                "variable": {
                    "value": "u",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.matmul(x, self._w_xu) + tf.matmul(g_r * state, self._w_hu) + self._b_u",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_299": {
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(np.prod(x.get_shape().as_list()[1:]))]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_variable_320": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "filter_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[filter_size[0], filter_size[1], int(x.get_shape()[3]), num_filters]",
                            "List"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                },
                "initializer": {
                    "value": "tf.random_uniform_initializer(-w_bound, w_bound)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_variable_322": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1, 1, 1, num_filters]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.zeros_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "constant_64": {
                "value": {
                    "value": "out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "npr.randn(*shape).astype(np.float32)",
                            "Call"
                        ],
                        [
                            "out * (std / np.sqrt(np.square(out).sum(axis=axis, keepdims=True)))",
                            "BinOp"
                        ],
                        [
                            "npr.randn(*shape).astype(np.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "get_variable_91": {
                "initializer": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normc_initializer(shape, stddev=init_para['stddev'], seed=seed, dtype=dtype)",
                            "Call"
                        ],
                        [
                            "tf.get_variable(initializer=initializer(shape), name=name, trainable=trainable)",
                            "Call"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "True",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_normal_initializer_94": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "init_para['mean']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "init_para['stddev']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_305": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "truncated_normal_initializer_100": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "mean": {
                    "value": "init_para['mean']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "stddev": {
                    "value": "init_para['stddev']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_154": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'GRU'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_254": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'GRU'",
                            "Method Argument"
                        ],
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_277": {
                "name_or_scope": {
                    "value": "self._scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "random_uniform_initializer_321": {
                "minval": {
                    "value": "-w_bound",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "maxval": {
                    "value": "w_bound",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.sqrt(6.0 / (fan_in + fan_out))",
                            "Call"
                        ]
                    ]
                }
            },
            "conv2d_327": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "filters": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', filter_shape, dtype, tf.random_uniform_initializer(-w_bound, w_bound))",
                            "Call"
                        ]
                    ]
                },
                "strides": {
                    "value": "stride_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, stride[0], stride[1], 1]",
                            "List"
                        ]
                    ]
                },
                "padding": {
                    "value": "pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "random_uniform_initializer_106": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "minval": {
                    "value": "init_para['minval']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "maxval": {
                    "value": "init_para['maxval']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "seed": {
                    "value": "seed",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ],
                        [
                            "1234",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_initializer_323": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "constant_initializer_112": {
                "variable": {
                    "value": "initializer",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "init_para['val']",
                    "type": "Subscript",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ],
                        [
                            "tf.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_206": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w_hi",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_211": {
                "a": {
                    "value": "state",
                    "type": "variable",
                    "possible_values": [
                        [
                            "state",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w_hr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_216": {
                "a": {
                    "value": "g_r * state",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "self._w_hu",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_256": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(ii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "variable_scope_279": {
                "name_or_scope": {
                    "value": "'layer_{}'.format(ii)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_281": {
                "a": {
                    "value": "layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_vec if ii == 0 else self._h[ii - 1]",
                            "IfExp"
                        ]
                    ]
                },
                "b": {
                    "value": "self._w[ii]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "sigmoid_24": {
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "name",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/common/tf_norm.py": {
        "tensorflow": {
            "moments_24": {
                "variable": {
                    "value": "(mean, var)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "axes": {
                    "value": "list(range(1, len(shape)))",
                    "type": "Call",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "batch_normalization_50": {
                "variable": {
                    "value": "ret",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "mean": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, list(range(1, len(shape))), keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "variance": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.moments(x, list(range(1, len(shape))), keep_dims=True)",
                            "Call"
                        ]
                    ]
                },
                "offset": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [chan], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [chan], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "variance_epsilon": {
                    "value": "epsilon",
                    "type": "variable",
                    "possible_values": [
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ],
                        [
                            "1e-05",
                            "Method Argument"
                        ]
                    ]
                },
                "name": {
                    "value": "output",
                    "type": "str",
                    "possible_values": []
                }
            },
            "variable_scope_19": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name_scope",
                            "Method Argument"
                        ],
                        [
                            "name_scope",
                            "Method Argument"
                        ],
                        [
                            "name_scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_36": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[chan]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "tf.constant_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_39": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('beta', [chan], initializer=tf.constant_initializer())",
                            "Call"
                        ],
                        [
                            "tf.reshape(beta, new_shape)",
                            "Call"
                        ],
                        [
                            "tf.zeros([1] * ndims, name='beta')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, chan, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, chan]",
                            "List"
                        ],
                        [
                            "[1, chan]",
                            "List"
                        ]
                    ]
                }
            },
            "zeros_41": {
                "variable": {
                    "value": "beta",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "beta",
                    "type": "str",
                    "possible_values": []
                }
            },
            "get_variable_45": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[chan]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "gamma_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.constant_initializer(1.0)",
                            "Call"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_46": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ones([1] * ndims, name='gamma')",
                            "Call"
                        ],
                        [
                            "tf.get_variable('gamma', [chan], initializer=gamma_init)",
                            "Call"
                        ],
                        [
                            "tf.reshape(gamma, new_shape)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "new_shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[1, chan, 1, 1]",
                            "List"
                        ],
                        [
                            "[1, 1, 1, chan]",
                            "List"
                        ],
                        [
                            "[1, chan]",
                            "List"
                        ]
                    ]
                }
            },
            "ones_48": {
                "variable": {
                    "value": "gamma",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[1] * ndims",
                    "type": "BinOp",
                    "possible_values": []
                },
                "name": {
                    "value": "gamma",
                    "type": "str",
                    "possible_values": []
                }
            },
            "constant_initializer_44": {
                "variable": {
                    "value": "gamma_init",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "constant_initializer_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/common/tf_utils.py": {
        "tensorflow": {
            "exp_32": {
                "variable": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * logstd",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_41": {
                "variable": {
                    "value": "var1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * logstd1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "exp_42": {
                "variable": {
                    "value": "var2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "2 * logstd2",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_44": {
                "variable": {
                    "value": "kl",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logstd2 - logstd1 + (var1 + tf.square(mu1 - mu2)) / (2 * var2) - 0.5",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_52": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "logstd + tf.constant(0.5 * np.log(2 * np.pi * np.e), tf.float32)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cast_59": {
                "variable": {
                    "value": "inds0",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds0",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inds0, tf.int64)",
                            "Call"
                        ],
                        [
                            "inds0",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_60": {
                "variable": {
                    "value": "inds1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "inds1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(inds1, tf.int64)",
                            "Call"
                        ],
                        [
                            "inds1",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_61": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "tf.shape(x)",
                    "type": "Call",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.int64",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "variable": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "constant_79": {
                "variable": {
                    "value": "l2_norm",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "0.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "gradients_86": {
                "variable": {
                    "value": "grads",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "loss",
                    "type": "variable",
                    "possible_values": [
                        [
                            "loss",
                            "Method Argument"
                        ]
                    ]
                },
                "xs": {
                    "value": "var_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ],
                        [
                            "var_list",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_36": {
                "input_tensor": {
                    "value": "gp",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-tf.square(x - mu) / (2 * var) - 0.5 * tf.log(tf.constant(2 * np.pi)) - logstd",
                            "BinOp"
                        ]
                    ]
                },
                "axis": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "gather_64": {
                "params": {
                    "value": "x_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(x, [-1])",
                            "Call"
                        ]
                    ]
                },
                "indices": {
                    "value": "inds0 * ncols + inds1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_87": {
                "values": {
                    "value": "[tf.reshape(grad, [numel(v)]) for (v, grad) in zip(var_list, grads)]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "placeholder_99": {
                "variable": {
                    "value": "self.theta",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[total_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "group_112": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "*assigns",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "concat_122": {
                "variable": {
                    "value": "self.op",
                    "type": "Attribute",
                    "possible_values": []
                },
                "values": {
                    "value": "[tf.reshape(v, [numel(v)]) for v in var_list]",
                    "type": "ListComp",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "get_variable_194": {
                "variable": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "w",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[input_size, output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "weight_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weight_init",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_198": {
                "variable": {
                    "value": "b",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "b",
                    "type": "str",
                    "possible_values": []
                },
                "shape": {
                    "value": "[output_size]",
                    "type": "List",
                    "possible_values": []
                },
                "initializer": {
                    "value": "bias_init",
                    "type": "variable",
                    "possible_values": [
                        [
                            "bias_init",
                            "Method Argument"
                        ]
                    ]
                },
                "trainable": {
                    "value": "trainable",
                    "type": "variable",
                    "possible_values": [
                        [
                            "trainable",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "softplus_10": {
                "features": {
                    "value": "-x",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "shape_61": {
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ],
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "l2_loss_81": {
                "t": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(2 * logstd)",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "self._var_list",
                            "Attribute"
                        ],
                        [
                            "self._var_list",
                            "Attribute"
                        ]
                    ]
                }
            },
            "variable_scope_193": {
                "name_or_scope": {
                    "value": "scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "scope",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_201": {
                "a": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_layer",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "w",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_variable('w', [input_size, output_size], initializer=weight_init, trainable=trainable)",
                            "Call"
                        ]
                    ]
                }
            },
            "constant_53": {
                "value": {
                    "value": "0.5 * np.log(2 * np.pi * np.e)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_88": {
                "tensor": {
                    "value": "grad",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "get_default_graph_160": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_163": {
                "variable": {
                    "value": "self._placeholders[var_name]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "var.get_shape()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "sigmoid_14": {
                "x": {
                    "value": "logits",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logits",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "log_34": {
                "x": {
                    "value": "tf.constant(2 * np.pi)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "assign_109": {
                "ref": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list[v_id]",
                            "Subscript"
                        ]
                    ]
                },
                "value": {
                    "value": "tf.reshape(theta[start:start + size], shape)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_122": {
                "tensor": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": [
                        [
                            "var_list[v_id]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[numel(v)]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "square_33": {
                "x": {
                    "value": "x - mu",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "constant_34": {
                "value": {
                    "value": "2 * np.pi",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reshape_109": {
                "tensor": {
                    "value": "theta[start:start + size]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.cast(tf.shape(x), tf.int64)",
                            "Call"
                        ],
                        [
                            "shapes[v_id]",
                            "Subscript"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "assign_167": {
                "ref": {
                    "value": "var",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(2 * logstd)",
                            "Call"
                        ],
                        [
                            "var_list",
                            "variable"
                        ],
                        [
                            "self._var_list",
                            "Attribute"
                        ],
                        [
                            "self._var_list",
                            "Attribute"
                        ]
                    ]
                },
                "value": {
                    "value": "self._placeholders[var_name]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "square_45": {
                "x": {
                    "value": "mu1 - mu2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/common/whitening_util.py": {
        "tensorflow": {
            "Variable_54": {
                "variable": {
                    "value": "whitening_operator[name + _mean]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.zeros([1, size], np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_mean'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Variable_58": {
                "variable": {
                    "value": "whitening_operator[name + _std]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "np.ones([1, size], np.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_std'",
                    "type": "BinOp",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "placeholder_66": {
                "variable": {
                    "value": "whitening_operator[name + _mean_ph]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_reset_mean_ph'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "placeholder_69": {
                "variable": {
                    "value": "whitening_operator[name + _std_ph]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "(1, size)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "name": {
                    "value": "name + '_reset_std_ph'",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "variable_scope_53": {
                "name_or_scope": {
                    "value": "'whitening_' + name",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/kfac/estimator.py": {
        "tensorflow": {
            "gradients_138": {
                "variable": {
                    "value": "grads_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self._layers.total_sampled_loss()",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "nest.flatten(tensors)",
                    "type": "Call",
                    "possible_values": []
                },
                "colocate_gradients_with_ops": {
                    "value": "self._colocate_gradients_with_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_sequence_as_142": {
                "variable": {
                    "value": "grads_all",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Method Argument"
                        ],
                        [
                            "tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "grads_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients_impl.gradients(self._layers.total_sampled_loss(), nest.flatten(tensors), colocate_gradients_with_ops=self._colocate_gradients_with_ops)",
                            "Call"
                        ],
                        [
                            "gradients_impl.gradients(self._layers.total_loss(), nest.flatten(tensors), colocate_gradients_with_ops=self._colocate_gradients_with_ops)",
                            "Call"
                        ]
                    ]
                }
            },
            "gradients_146": {
                "variable": {
                    "value": "grads_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "ys": {
                    "value": "self._layers.total_loss()",
                    "type": "Call",
                    "possible_values": []
                },
                "xs": {
                    "value": "nest.flatten(tensors)",
                    "type": "Call",
                    "possible_values": []
                },
                "colocate_gradients_with_ops": {
                    "value": "self._colocate_gradients_with_ops",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "pack_sequence_as_150": {
                "variable": {
                    "value": "grads_all",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Method Argument"
                        ],
                        [
                            "tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "flat_sequence": {
                    "value": "grads_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "gradients_impl.gradients(self._layers.total_sampled_loss(), nest.flatten(tensors), colocate_gradients_with_ops=self._colocate_gradients_with_ops)",
                            "Call"
                        ],
                        [
                            "gradients_impl.gradients(self._layers.total_loss(), nest.flatten(tensors), colocate_gradients_with_ops=self._colocate_gradients_with_ops)",
                            "Call"
                        ]
                    ]
                }
            },
            "group_95": {
                "*inputs": {
                    "value": "*cov_updates",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_99": {
                "*inputs": {
                    "value": "*rescale_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_103": {
                "*inputs": {
                    "value": "*reset_ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "group_128": {
                "*inputs": {
                    "value": "*inv_updates.values()",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "flatten_140": {
                "structure": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Method Argument"
                        ],
                        [
                            "tensors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "flatten_148": {
                "structure": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensors",
                            "Method Argument"
                        ],
                        [
                            "tensors",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "device_28": {
                "device_name": {
                    "value": "next(self._cycle)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/kfac/fisher_blocks.py": {
        "tensorflow": {
            "sqrt_44": {
                "x": {
                    "value": "left_norm / right_norm",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "matmul_140": {
                "variable": {
                    "value": "out_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "inverse",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._factor.get_damped_inverse(self._damping)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "utils.tensors_to_column(vector)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_445": {
                "variable": {
                    "value": "reshaped_out",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "left_factor_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._input_factor.get_damped_inverse(self._input_damping)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "math_ops.matmul(reshaped_vector, right_factor_inv)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "trace_42": {
                "*args": {
                    "value": "left_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "left_cov",
                            "Method Argument"
                        ],
                        [
                            "left_cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "trace_43": {
                "*args": {
                    "value": "right_cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "right_cov",
                            "Method Argument"
                        ],
                        [
                            "right_cov",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_170": {
                "input_tensor": {
                    "value": "self._batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_208": {
                "diagonal": {
                    "value": "array_ops.reshape(self._factor.get_cov(), (-1,))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_226": {
                "input_tensor": {
                    "value": "self._batch_sizes",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_650": {
                "values": {
                    "value": "tensor_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tensor_list",
                            "Method Argument"
                        ]
                    ]
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "matmul_146": {
                "a": {
                    "value": "self._factor.get_cov()",
                    "type": "Call",
                    "possible_values": []
                },
                "b": {
                    "value": "vector_flat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.tensors_to_column(vector)",
                            "Call"
                        ],
                        [
                            "utils.tensors_to_column(vector)",
                            "Call"
                        ],
                        [
                            "utils.tensors_to_column(vector)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_208": {
                "tensor": {
                    "value": "self._factor.get_cov()",
                    "type": "Call",
                    "possible_values": []
                },
                "shape": {
                    "value": "(-1,)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "matmul_446": {
                "a": {
                    "value": "reshaped_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.layer_params_to_mat2d(vector)",
                            "Call"
                        ],
                        [
                            "utils.layer_params_to_mat2d(vector)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "right_factor_inv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_factor.get_damped_inverse(self._output_damping)",
                            "Call"
                        ]
                    ]
                }
            },
            "cast_449": {
                "x": {
                    "value": "self._renorm_coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "reshaped_out.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_458": {
                "a": {
                    "value": "reshaped_vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "utils.layer_params_to_mat2d(vector)",
                            "Call"
                        ],
                        [
                            "utils.layer_params_to_mat2d(vector)",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "right_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._output_factor.get_cov()",
                            "Call"
                        ],
                        [
                            "self._output_factor.get_cov()",
                            "Call"
                        ]
                    ]
                }
            },
            "matmul_461": {
                "a": {
                    "value": "left_factor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._input_factor.get_cov()",
                            "Call"
                        ],
                        [
                            "self._input_factor.get_cov()",
                            "Call"
                        ]
                    ]
                },
                "b": {
                    "value": "reshaped_out",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reshaped_vect / (self._factor.get_cov() + self._damping)",
                            "BinOp"
                        ],
                        [
                            "reshaped_vect * (self._factor.get_cov() + self._damping)",
                            "BinOp"
                        ],
                        [
                            "reshaped_vect / (self._factor.get_cov() + self._damping)",
                            "BinOp"
                        ],
                        [
                            "reshaped_vect * (self._factor.get_cov() + self._damping)",
                            "BinOp"
                        ],
                        [
                            "math_ops.matmul(left_factor_inv, math_ops.matmul(reshaped_vector, right_factor_inv))",
                            "Call"
                        ],
                        [
                            "reshaped_out * math_ops.cast(self._renorm_coeff, dtype=reshaped_out.dtype)",
                            "BinOp"
                        ],
                        [
                            "math_ops.matmul(reshaped_vector, right_factor) + self._output_damping * reshaped_vector",
                            "BinOp"
                        ],
                        [
                            "math_ops.matmul(left_factor, reshaped_out) + self._input_damping * reshaped_out",
                            "BinOp"
                        ]
                    ]
                }
            },
            "cast_464": {
                "x": {
                    "value": "self._renorm_coeff",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "reshaped_out.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_647": {
                "values": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/kfac/fisher_factors.py": {
        "tensorflow": {
            "concat_124": {
                "variable": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[array_ops.shape(tensor)[:-1], [1]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ones_125": {
                "variable": {
                    "value": "ones",
                    "type": "variable",
                    "possible_values": []
                },
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([array_ops.shape(tensor)[:-1], [1]], axis=0)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "diag_75": {
                "diagonal": {
                    "value": "array_ops.ones(shape[0], dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "diag_81": {
                "diagonal": {
                    "value": "array_ops.ones(shape[0], dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_87": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([array_ops.shape(tensor)[:-1], [1]], axis=0)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "concat_126": {
                "values": {
                    "value": "[tensor, ones]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "rank - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "add_n_238": {
                "variable": {
                    "value": "new_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "tuple((self._compute_new_cov(idx) for idx in range(self._num_sources)))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "einsum_670": {
                "variable": {
                    "value": "case_wise_gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "equation": {
                    "value": "bijk,bijl->bkl",
                    "type": "str",
                    "possible_values": []
                },
                "*inputs": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.extract_image_patches(inputs, ksizes=[1, filter_height, filter_width, 1], strides=strides, rates=[1, 1, 1, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "_append_homog(patches)",
                            "Call"
                        ],
                        [
                            "array_ops.extract_image_patches(self._inputs, ksizes=[1, filter_height, filter_width, 1], strides=self._strides, rates=[1, 1, 1, 1], padding=self._padding)",
                            "Call"
                        ],
                        [
                            "patches",
                            "Method Argument"
                        ]
                    ]
                },
                "**kwargs": {
                    "value": "outputs_grad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._outputs_grads[idx]",
                            "Subscript"
                        ],
                        [
                            "outputs_grad",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_75": {
                "shape": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "diag_80": {
                "diagonal": {
                    "value": "array_ops.zeros(shape[0], dtype)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_81": {
                "shape": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_86": {
                "shape": {
                    "value": "shape",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.concat([array_ops.shape(tensor)[:-1], [1]], axis=0)",
                            "Call"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ],
                        [
                            "shape",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_220": {
                "variable": {
                    "value": "self._cov",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "cov",
                    "type": "str",
                    "possible_values": []
                },
                "initializer": {
                    "value": "self._cov_initializer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "self._cov_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "maximum_338": {
                "variable": {
                    "value": "clipped_eigenvalues",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eigenvalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg_ops.self_adjoint_eig(self._cov)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "EIGENVALUE_CLIPPING_THRESHOLD",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0.0",
                            "float"
                        ],
                        [
                            "eigenvalue_clipping_threshold",
                            "variable"
                        ]
                    ]
                }
            },
            "square_541": {
                "variable": {
                    "value": "self._squared_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_append_homog(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_568": {
                "variable": {
                    "value": "new_cov",
                    "type": "variable",
                    "possible_values": []
                },
                "a": {
                    "value": "self._squared_inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "b": {
                    "value": "math_ops.square(self._outputs_grads[idx])",
                    "type": "Call",
                    "possible_values": []
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "extract_image_patches_621": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_append_homog(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "ksizes": {
                    "value": "[1, filter_height, filter_width, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "strides",
                            "Method Argument"
                        ],
                        [
                            "strides",
                            "Method Argument"
                        ]
                    ]
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "padding",
                            "Method Argument"
                        ],
                        [
                            "padding",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_672": {
                "input_tensor": {
                    "value": "math_ops.square(case_wise_gradients)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "extract_image_patches_792": {
                "variable": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": []
                },
                "images": {
                    "value": "self._inputs",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ksizes": {
                    "value": "[1, filter_height, filter_width, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "self._strides",
                    "type": "Attribute",
                    "possible_values": []
                },
                "rates": {
                    "value": "[1, 1, 1, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "self._padding",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_800": {
                "variable": {
                    "value": "patches_flat",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "patches",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.extract_image_patches(inputs, ksizes=[1, filter_height, filter_width, 1], strides=strides, rates=[1, 1, 1, 1], padding=padding)",
                            "Call"
                        ],
                        [
                            "_append_homog(patches)",
                            "Call"
                        ],
                        [
                            "array_ops.extract_image_patches(self._inputs, ksizes=[1, filter_height, filter_width, 1], strides=self._strides, rates=[1, 1, 1, 1], padding=self._padding)",
                            "Call"
                        ],
                        [
                            "patches",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, flatten_size]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_850": {
                "variable": {
                    "value": "reshaped_tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "self._outputs_grads[idx]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "[-1, self._out_channels]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_80": {
                "shape": {
                    "value": "shape[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ],
                        [
                            "dtype",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "shape_104": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._tensors[idx]",
                            "Subscript"
                        ],
                        [
                            "_append_homog(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_107": {
                "a": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._tensors[idx]",
                            "Subscript"
                        ],
                        [
                            "_append_homog(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._tensors[idx]",
                            "Subscript"
                        ],
                        [
                            "_append_homog(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_107": {
                "x": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(tensor)[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_109": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                },
                "dtype": {
                    "value": "cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "matmul_111": {
                "a": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._tensors[idx]",
                            "Subscript"
                        ],
                        [
                            "_append_homog(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "b": {
                    "value": "tensor_right",
                    "type": "variable",
                    "possible_values": [
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "transpose_a": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cast_112": {
                "x": {
                    "value": "normalizer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(tensor)[0]",
                            "Subscript"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_219": {
                "name_or_scope": {
                    "value": "self._var_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "zeros_like_250": {
                "input": {
                    "value": "self._cov",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_296": {
                "variable": {
                    "value": "inv",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'inv_damp{}'.format(damping_string)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "inverse_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inverse_initializer",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self._cov_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "get_variable_317": {
                "variable": {
                    "value": "matpower",
                    "type": "variable",
                    "possible_values": []
                },
                "name": {
                    "value": "'matpower_exp{}_damp{}'.format(exp_string, damping_string)",
                    "type": "Call",
                    "possible_values": []
                },
                "initializer": {
                    "value": "inverse_initializer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inverse_initializer",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "self._cov_shape",
                    "type": "Attribute",
                    "possible_values": []
                },
                "trainable": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_531": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "_append_homog(inputs)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cast_572": {
                "x": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "new_cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_662": {
                "x": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.shape(self._patches)[0]",
                            "Subscript"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ],
                        [
                            "batch_size",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "new_cov.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_672": {
                "x": {
                    "value": "case_wise_gradients",
                    "type": "variable",
                    "possible_values": [
                        [
                            "special_math_ops.einsum('bijk,bijl->bkl', patches, outputs_grad)",
                            "Call"
                        ]
                    ]
                }
            },
            "colocate_with_45": {
                "op": {
                    "value": "op[0]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "colocate_with_48": {
                "op": {
                    "value": "op",
                    "type": "variable",
                    "possible_values": [
                        [
                            "op",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "transpose_109": {
                "a": {
                    "value": "cov",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.matmul(tensor, tensor, transpose_a=True) / math_ops.cast(normalizer, tensor.dtype)",
                            "BinOp"
                        ]
                    ]
                }
            },
            "shape_124": {
                "input": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._tensors[idx]",
                            "Subscript"
                        ],
                        [
                            "_append_homog(tensor)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "variable_scope_295": {
                "name_or_scope": {
                    "value": "self._var_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_316": {
                "name_or_scope": {
                    "value": "self._var_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "group_369": {
                "*inputs": {
                    "value": "*ops",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "cast_440": {
                "x": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._params_grads_flat[idx].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_500": {
                "x": {
                    "value": "self._params_grads[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "cast_500": {
                "x": {
                    "value": "self._batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._params_grads[idx].dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_570": {
                "x": {
                    "value": "self._outputs_grads[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "shape_659": {
                "input": {
                    "value": "self._patches",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "transpose_439": {
                "a": {
                    "value": "self._params_grads_flat[idx]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "matmul_359": {
                "a": {
                    "value": "eigenvectors / (eigenvalues + damping)",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "array_ops.transpose(eigenvectors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_365": {
                "a": {
                    "value": "eigenvectors * (eigenvalues + damping) ** exp",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "array_ops.transpose(eigenvectors)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "transpose_360": {
                "a": {
                    "value": "eigenvectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg_ops.self_adjoint_eig(self._cov)",
                            "Call"
                        ]
                    ]
                }
            },
            "transpose_367": {
                "a": {
                    "value": "eigenvectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg_ops.self_adjoint_eig(self._cov)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/kfac/layer_collection.py": {
        "tensorflow": {
            "add_n_130": {
                "inputs": {
                    "value": "tuple((loss.evaluate() for loss in self.losses))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "add_n_133": {
                "inputs": {
                    "value": "tuple((loss.evaluate_on_sample() for loss in self.losses))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "get_default_graph_43": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_49": {
                "name_or_scope": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "default_name": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "name or self._graph.unique_name('register_categorical_predictive_distribution')",
                            "BoolOp"
                        ],
                        [
                            "name or self._graph.unique_name('register_normal_predictive_distribution')",
                            "BoolOp"
                        ],
                        [
                            "'LayerCollection'",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "get_variable_scope_89": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_216": {
                "name_or_scope": {
                    "value": "self._var_scope",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/kfac/loss_functions.py": {
        "tensorflow": {
            "expand_dims_373": {
                "variable": {
                    "value": "ones_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "array_ops.ones(array_ops.shape(self._mean)[:1], dtype=self._mean.dtype)",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "sqrt_408": {
                "variable": {
                    "value": "self._scale",
                    "type": "Attribute",
                    "possible_values": []
                },
                "x": {
                    "value": "variance",
                    "type": "variable",
                    "possible_values": [
                        [
                            "variance",
                            "Method Argument"
                        ],
                        [
                            "variance",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "expand_dims_605": {
                "variable": {
                    "value": "sqrt_probs_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "sqrt_probs[:, index[0]]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "pad_646": {
                "tensor": {
                    "value": "slice_to_insert",
                    "type": "variable",
                    "possible_values": [
                        [
                            "slice_to_insert",
                            "Method Argument"
                        ]
                    ]
                },
                "paddings": {
                    "value": "list(zip(before, after))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_356": {
                "loc": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "math_ops.sqrt(self._var)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_382": {
                "input": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Normal_418": {
                "loc": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                },
                "scale": {
                    "value": "self._scale",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_425": {
                "values": {
                    "value": "[mean, variance]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "split_428": {
                "value": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Call"
                        ],
                        [
                            "params",
                            "Call"
                        ],
                        [
                            "params",
                            "Call"
                        ],
                        [
                            "params",
                            "Call"
                        ],
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "num_or_size_splits": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "expand_dims_467": {
                "variable": {
                    "value": "mean_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fisher_mean_factor[:, index]",
                            "Subscript"
                        ],
                        [
                            "array_ops.expand_dims(mean_slice, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_470": {
                "variable": {
                    "value": "var_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "insert_slice_in_zeros(mean_slice, 1, int(self._mean.shape[1]), index)",
                            "Call"
                        ],
                        [
                            "array_ops.zeros_like(var_output)",
                            "Call"
                        ]
                    ]
                }
            },
            "expand_dims_475": {
                "variable": {
                    "value": "var_slice",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_slice",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._fisher_var_factor[:, index]",
                            "Subscript"
                        ],
                        [
                            "array_ops.expand_dims(var_slice, axis=-1)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "zeros_like_478": {
                "variable": {
                    "value": "mean_output",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "var_output",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.zeros_like(mean_output)",
                            "Call"
                        ],
                        [
                            "insert_slice_in_zeros(var_slice, 1, int(self._variance.shape[1]), index)",
                            "Call"
                        ]
                    ]
                }
            },
            "concat_484": {
                "values": {
                    "value": "[array_ops.shape(self._mean)[:-1], 2 * array_ops.shape(self._mean)[-1:]]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "TensorShape_494": {
                "dims": {
                    "value": "shape[-1:] + [2 * shape[-1]]",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "concat_556": {
                "values": {
                    "value": "self._logits_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_566": {
                "values": {
                    "value": "self._targets_components",
                    "type": "Attribute",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Categorical_570": {
                "logits": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_578": {
                "x": {
                    "value": "self._probs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_612": {
                "input": {
                    "value": "self._logits",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_281": {
                "input": {
                    "value": "self.sample(seed)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reduce_sum_328": {
                "input_tensor": {
                    "value": "self.dist.log_prob(targets)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_374": {
                "shape": {
                    "value": "array_ops.shape(self._mean)[:1]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self._mean.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stop_gradient_65": {
                "input": {
                    "value": "self.targets",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_356": {
                "x": {
                    "value": "self._var",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "square_440": {
                "x": {
                    "value": "self._variance",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sqrt_444": {
                "x": {
                    "value": "2.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "reduce_sum_586": {
                "input_tensor": {
                    "value": "vector * probs",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_592": {
                "input_tensor": {
                    "value": "sqrt_probs * vector",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_sum_598": {
                "input_tensor": {
                    "value": "probs * vector",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keep_dims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "shape_374": {
                "input": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_486": {
                "input": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "shape_487": {
                "input": {
                    "value": "self._mean",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/kfac/optimizer.py": {
        "tensorflow": {
            "trainable_variables_37": {
                "variable": {
                    "value": "variables",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reduce_sum_133": {
                "input_tensor": {
                    "value": "terms",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[math_ops.reduce_sum(grad * pgrad) for ((grad, _), (pgrad, _)) in zip(grads_and_vars, precon_grads_and_vars)]",
                            "ListComp"
                        ]
                    ]
                }
            },
            "minimum_139": {
                "x": {
                    "value": "1.0",
                    "type": "float",
                    "possible_values": []
                },
                "y": {
                    "value": "math_ops.sqrt(self._norm_constraint / sq_norm_up)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "shape_55": {
                "input": {
                    "value": "layer_collection.losses[0].inputs",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "variable_scope_58": {
                "name_or_scope": {
                    "value": "name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'KFAC'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reduce_sum_130": {
                "input_tensor": {
                    "value": "grad * pgrad",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sqrt_139": {
                "x": {
                    "value": "self._norm_constraint / sq_norm_up",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "colocate_with_148": {
                "op": {
                    "value": "velocity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._zeros_slot(var, 'velocity', self._name)",
                            "Call"
                        ]
                    ]
                }
            },
            "identity_153": {
                "input": {
                    "value": "velocity.assign(new_velocity)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/util/kfac/utils.py": {
        "tensorflow": {
            "reshape_98": {
                "variable": {
                    "value": "mat1_rsh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mat1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat1",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[m1, 1, n1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_100": {
                "variable": {
                    "value": "mat2_rsh",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mat2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat2",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, m2, 1, n2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "eye_143": {
                "variable": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": []
                },
                "num_rows": {
                    "value": "tensor.shape.as_list()[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_144": {
                "variable": {
                    "value": "damping",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "damping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(damping, dtype=tensor.dtype)",
                            "Call"
                        ],
                        [
                            "damping",
                            "Method Argument"
                        ],
                        [
                            "damping",
                            "Method Argument"
                        ],
                        [
                            "damping",
                            "Method Argument"
                        ],
                        [
                            "damping",
                            "Method Argument"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tensor.dtype",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cholesky_155": {
                "variable": {
                    "value": "chol",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "tensor + damping * identity",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "maximum_164": {
                "variable": {
                    "value": "eigenvalues",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "eigenvalues",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg_ops.self_adjoint_eig(tensor + damping * identity)",
                            "Call"
                        ],
                        [
                            "gen_math_ops.maximum(eigenvalues, damping)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "damping",
                    "type": "variable",
                    "possible_values": [
                        [
                            "math_ops.cast(damping, dtype=tensor.dtype)",
                            "Call"
                        ],
                        [
                            "damping",
                            "Method Argument"
                        ],
                        [
                            "damping",
                            "Method Argument"
                        ],
                        [
                            "damping",
                            "Method Argument"
                        ],
                        [
                            "damping",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "svd_183": {
                "variable": {
                    "value": "(evals, evecs, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "tensor": {
                    "value": "mat",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat",
                            "Method Argument"
                        ],
                        [
                            "mat",
                            "Method Argument"
                        ],
                        [
                            "mat",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_191": {
                "variable": {
                    "value": "evals",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "evals",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg_ops.svd(mat)",
                            "Call"
                        ],
                        [
                            "linalg_ops.self_adjoint_eig(mat)",
                            "Call"
                        ],
                        [
                            "math_ops.abs(evals)",
                            "Call"
                        ]
                    ]
                }
            },
            "reshape_90": {
                "variable": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "colvec",
                    "type": "variable",
                    "possible_values": [
                        [
                            "colvec",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "tensors_template.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_101": {
                "tensor": {
                    "value": "mat1_rsh * mat2_rsh",
                    "type": "BinOp",
                    "possible_values": []
                },
                "shape": {
                    "value": "[m1 * m2, n1 * n2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_116": {
                "variable": {
                    "value": "w_part_reshaped",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "w_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat2d[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, w_part.shape.as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "cholesky_solve_156": {
                "chol": {
                    "value": "chol",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg_ops.cholesky(tensor + damping * identity)",
                            "Call"
                        ]
                    ]
                },
                "rhs": {
                    "value": "identity",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg_ops.eye(tensor.shape.as_list()[0], dtype=tensor.dtype)",
                            "Call"
                        ],
                        [
                            "identity",
                            "Method Argument"
                        ],
                        [
                            "identity",
                            "Method Argument"
                        ],
                        [
                            "identity",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "matmul_165": {
                "a": {
                    "value": "eigenvectors / eigenvalues",
                    "type": "BinOp",
                    "possible_values": []
                },
                "b": {
                    "value": "eigenvectors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "linalg_ops.self_adjoint_eig(tensor + damping * identity)",
                            "Call"
                        ]
                    ]
                },
                "transpose_b": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "concat_60": {
                "values": {
                    "value": "tuple((array_ops.reshape(tensor, [-1, 1]) for tensor in tensors))",
                    "type": "Call",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_63": {
                "tensor": {
                    "value": "tensors",
                    "type": "variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "array_ops.reshape(colvec, tensors_template.shape)",
                            "Call"
                        ],
                        [
                            "tuple(tensors)",
                            "Call"
                        ],
                        [
                            "key if isinstance(key, (tuple, list)) else (key,)",
                            "IfExp"
                        ],
                        [
                            "tensors",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "variable": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "colvec[offset:offset + sz]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "shape": {
                    "value": "tensor_template.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_118": {
                "values": {
                    "value": "(w_part_reshaped, array_ops.reshape(b_part, [1, -1]))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "axis": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "reshape_121": {
                "tensor": {
                    "value": "vector",
                    "type": "variable",
                    "possible_values": [
                        [
                            "vector",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, vector.shape.as_list()[-1]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_138": {
                "tensor": {
                    "value": "mat2d",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat2d",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "vector_template.shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reshape_136": {
                "tensor": {
                    "value": "w_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat2d[:-1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "vector_template[0].shape",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cast_205": {
                "x": {
                    "value": "ints",
                    "type": "variable",
                    "possible_values": [
                        [
                            "random_ops.random_uniform(shape, maxval=2, dtype=dtypes.int32)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "dtype",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dtypes.float32",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "reshape_119": {
                "tensor": {
                    "value": "b_part",
                    "type": "variable",
                    "possible_values": [
                        [
                            "mat2d[-1]",
                            "Subscript"
                        ]
                    ]
                },
                "shape": {
                    "value": "[1, -1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "reshape_61": {
                "tensor": {
                    "value": "tensor",
                    "type": "variable",
                    "possible_values": [
                        [
                            "array_ops.reshape(colvec[offset:offset + sz], tensor_template.shape)",
                            "Call"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ],
                        [
                            "tensor",
                            "Method Argument"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, 1]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "mbbl_envs/mbbl/worker/base_worker.py": {
        "tensorflow": {
            "ConfigProto_141": {
                "variable": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": []
                },
                "device_count": {
                    "value": "{'GPU': 0}",
                    "type": "Dict",
                    "possible_values": []
                }
            },
            "Session_142": {
                "variable": {
                    "value": "self._session",
                    "type": "Attribute",
                    "possible_values": []
                },
                "config": {
                    "value": "config",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.ConfigProto(device_count={'GPU': 0})",
                            "Call"
                        ]
                    ]
                }
            },
            "global_variables_initializer_137": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "variable_scope_135": {
                "name_or_scope": {
                    "value": "name_scope",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self._name_scope + '_' + key + '_' + str(i_model)",
                            "BinOp"
                        ],
                        [
                            "'planning_worker'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/core/logging.py": {
        "torch": {
            "save_284": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "'extra_data.pkl'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_288": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "'extra_data.pkl'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_292": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "'extra_data.pkl'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_298": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "'extra_data.pkl'",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "save_296": {
                "obj": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "params",
                            "Method Argument"
                        ]
                    ]
                },
                "f": {
                    "value": "file_name",
                    "type": "variable",
                    "possible_values": [
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, file_name)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'itr_%d.pkl' % itr)",
                            "Call"
                        ],
                        [
                            "osp.join(self._snapshot_dir, 'params.pkl')",
                            "Call"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "file_name",
                            "Method Argument"
                        ],
                        [
                            "'extra_data.pkl'",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/data_management/shared_obs_dict_replay_buffer.py": {
        "torch": {}
    },
    "rlkit/data_management/simple_replay_buffer.py": {
        "torch": {}
    },
    "rlkit/envs/mujoco_image_env.py": {
        "torch": {}
    },
    "rlkit/envs/vae_wrapper.py": {
        "torch": {
            "device_322": {
                "variable": {
                    "value": "ptu.device",
                    "type": "Attribute",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_id) if use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/launchers/skewfit_experiments.py": {
        "torch": {
            "Sigmoid_119": {
                "variable": {
                    "value": "decoder_activation",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/policies/argmax.py": {
        "torch": {}
    },
    "rlkit/samplers/rollout_functions.py": {
        "torch": {}
    },
    "rlkit/torch/conv_networks.py": {
        "torch": {
            "ModuleList_49": {
                "variable": {
                    "value": "self.conv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_50": {
                "variable": {
                    "value": "self.conv_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_51": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_52": {
                "variable": {
                    "value": "self.fc_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "zeros_69": {
                "variable": {
                    "value": "test_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.input_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.input_width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.input_height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Linear_90": {
                "variable": {
                    "value": "self.last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(test_mat.shape))",
                            "Call"
                        ],
                        [
                            "fc_input_size + added_fc_input_size",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "fc_input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ModuleList_176": {
                "variable": {
                    "value": "self.deconv_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_177": {
                "variable": {
                    "value": "self.deconv_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_178": {
                "variable": {
                    "value": "self.fc_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "ModuleList_179": {
                "variable": {
                    "value": "self.fc_norm_layers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_192": {
                "variable": {
                    "value": "self.last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(test_mat.shape))",
                            "Call"
                        ],
                        [
                            "fc_input_size + added_fc_input_size",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "fc_input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "deconv_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.deconv_input_channels * self.deconv_input_height * self.deconv_input_width",
                            "BinOp"
                        ]
                    ]
                }
            },
            "zeros_210": {
                "variable": {
                    "value": "test_mat",
                    "type": "variable",
                    "possible_values": []
                },
                "*size": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out": {
                    "value": "self.deconv_input_channels",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dtype": {
                    "value": "self.deconv_input_width",
                    "type": "Attribute",
                    "possible_values": []
                },
                "layout": {
                    "value": "self.deconv_input_height",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "ConvTranspose2d_217": {
                "variable": {
                    "value": "self.first_deconv_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "deconv_input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "deconv_input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deconv_output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "deconv_output_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_output_kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "deconv_output_strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_output_strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_226": {
                "variable": {
                    "value": "self.second_deconv_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "deconv_input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "deconv_input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "deconv_output_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_output_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "deconv_output_kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_output_kernel_size",
                            "Method Argument"
                        ]
                    ]
                },
                "stride": {
                    "value": "deconv_output_strides",
                    "type": "variable",
                    "possible_values": [
                        [
                            "deconv_output_strides",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ReLU_26": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_56": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ],
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ],
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ],
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ],
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "Linear_80": {
                "variable": {
                    "value": "fc_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(test_mat.shape))",
                            "Call"
                        ],
                        [
                            "fc_input_size + added_fc_input_size",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "fc_input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size in enumerate(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "hidden_size in enumerate(hidden_sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_82": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size in enumerate(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "hidden_size in enumerate(hidden_sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "cat_115": {
                "variable": {
                    "value": "h",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(h, extra_fc_input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ReLU_156": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Linear_182": {
                "variable": {
                    "value": "fc_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "fc_input_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "int(np.prod(test_mat.shape))",
                            "Call"
                        ],
                        [
                            "fc_input_size + added_fc_input_size",
                            "BinOp"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "hidden_size",
                            "variable"
                        ],
                        [
                            "fc_input_size",
                            "Method Argument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size in enumerate(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "hidden_size in enumerate(hidden_sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm1d_184": {
                "variable": {
                    "value": "norm_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "num_features": {
                    "value": "hidden_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "hidden_size in enumerate(hidden_sizes)",
                            "Call"
                        ],
                        [
                            "hidden_size in enumerate(hidden_sizes)",
                            "Call"
                        ]
                    ]
                }
            },
            "ConvTranspose2d_198": {
                "variable": {
                    "value": "deconv",
                    "type": "variable",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "deconv_input_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "out_channels",
                            "variable"
                        ],
                        [
                            "deconv_input_channels",
                            "Method Argument"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "out_channels",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ],
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ],
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ]
                    ]
                },
                "stride": {
                    "value": "stride",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ],
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ]
                    ]
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ],
                        [
                            "zip(n_channels, kernel_sizes, strides, paddings)",
                            "Call"
                        ]
                    ]
                }
            },
            "BatchNorm2d_73": {
                "num_features": {
                    "value": "test_mat.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "BatchNorm2d_215": {
                "num_features": {
                    "value": "test_mat.shape[1]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/core.py": {
        "torch": {}
    },
    "rlkit/torch/data.py": {
        "torch": {
            "from_numpy_56": {
                "variable": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "weights",
                    "type": "variable",
                    "possible_values": [
                        [
                            "weights",
                            "Method Argument"
                        ],
                        [
                            "weights",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randperm_32": {
                "n": {
                    "value": "len(self.data_source)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "multinomial_65": {
                "input": {
                    "value": "self._weights",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_samples": {
                    "value": "len(self._weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "replacement": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "randperm_41": {
                "n": {
                    "value": "len(self.data_source)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/data_management/normalizer.py": {
        "torch": {
            "clamp_23": {
                "input": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_46": {
                "input": {
                    "value": "(v - mean) / std",
                    "type": "BinOp",
                    "possible_values": []
                },
                "min": {
                    "value": "-clip_range",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "clip_range",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "self.default_clip_range",
                            "Attribute"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/ddpg/ddpg.py": {
        "torch": {
            "clamp_116": {
                "variable": {
                    "value": "q_target",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "q_target",
                    "type": "variable",
                    "possible_values": [
                        [
                            "rewards + (1.0 - terminals) * self.discount * target_q_values",
                            "BinOp"
                        ],
                        [
                            "q_target.detach()",
                            "Call"
                        ],
                        [
                            "torch.clamp(q_target, self.min_q_value, self.max_q_value)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "self.min_q_value",
                    "type": "Attribute",
                    "possible_values": []
                },
                "max": {
                    "value": "self.max_q_value",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "MSELoss_42": {
                "variable": {
                    "value": "qf_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "sum_123": {
                "input": {
                    "value": "param ** 2",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/distributions.py": {
        "torch": {
            "Normal_22": {
                "variable": {
                    "value": "self.normal",
                    "type": "Attribute",
                    "possible_values": []
                },
                "loc": {
                    "value": "normal_mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_mean",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "normal_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "normal_std",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tanh_30": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_43": {
                "input": {
                    "value": "1 - value * value + self.epsilon",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_58": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_77": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "tanh_28": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "log_40": {
                "input": {
                    "value": "(1 + value) / (1 - value)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_56": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            },
            "Normal_67": {
                "loc": {
                    "value": "ptu.zeros(self.normal_mean.size())",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "ptu.ones(self.normal_std.size())",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "tanh_75": {
                "input": {
                    "value": "z",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.normal.sample_n(n)",
                            "Call"
                        ],
                        [
                            "self.normal.sample().detach()",
                            "Call"
                        ],
                        [
                            "self.normal_mean + self.normal_std * Normal(ptu.zeros(self.normal_mean.size()), ptu.ones(self.normal_std.size())).sample()",
                            "BinOp"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/dqn/double_dqn.py": {
        "torch": {
            "sum_30": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.qf(obs) * actions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/dqn/dqn.py": {
        "torch": {
            "Adam_32": {
                "variable": {
                    "value": "self.qf_optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.qf.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.learning_rate",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sum_60": {
                "variable": {
                    "value": "y_pred",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.qf(obs) * actions",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MSELoss_38": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/her/her.py": {
        "torch": {
            "cat_15": {
                "variable": {
                    "value": "data[observations]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(obs, goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cat_16": {
                "variable": {
                    "value": "data[next_observations]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(next_obs, goals)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/modules.py": {
        "torch": {
            "SmoothL1Loss_11": {
                "variable": {
                    "value": "self.huber_loss_delta1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_30": {
                "variable": {
                    "value": "self.scale_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_34": {
                "variable": {
                    "value": "self.center_param",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(features)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "ones_30": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_34": {
                "*size": {
                    "value": "features",
                    "type": "variable",
                    "possible_values": [
                        [
                            "features",
                            "Method Argument"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/networks.py": {
        "torch": {
            "Linear_62": {
                "variable": {
                    "value": "self.last_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "next_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "output_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "output_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "cat_87": {
                "variable": {
                    "value": "flat_inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "Linear_50": {
                "variable": {
                    "value": "fc",
                    "type": "variable",
                    "possible_values": []
                },
                "in_features": {
                    "value": "in_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "input_size",
                            "variable"
                        ],
                        [
                            "next_size",
                            "variable"
                        ]
                    ]
                },
                "out_features": {
                    "value": "next_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "next_size in enumerate(hidden_sizes)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/pytorch_util.py": {
        "torch": {
            "device_58": {
                "variable": {
                    "value": "device",
                    "type": "variable",
                    "possible_values": []
                },
                "type": {
                    "value": "cuda: + str(gpu_id) if _use_gpu else cpu",
                    "type": "IfExp",
                    "possible_values": []
                }
            },
            "set_device_66": {
                "device": {
                    "value": "gpu_id",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ],
                        [
                            "gpu_id",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "from_numpy_77": {
                "ndarray": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            },
            "zeros_87": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_93": {
                "*size": {
                    "value": "*sizes",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "ones_like_99": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "randn_105": {
                "*size": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "zeros_like_111": {
                "input": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "tensor_117": {
                "data": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                },
                "device": {
                    "value": "torch_device",
                    "type": "variable",
                    "possible_values": [
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "device",
                            "variable"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ],
                        [
                            "None",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "normal_121": {
                "mean": {
                    "value": "*args",
                    "type": "Starred",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/sac/policies.py": {
        "torch": {
            "Linear_55": {
                "variable": {
                    "value": "self.last_fc_log_std",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "last_hidden_size",
                    "type": "variable",
                    "possible_values": []
                },
                "out_features": {
                    "value": "action_dim",
                    "type": "variable",
                    "possible_values": [
                        [
                            "action_dim",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "clamp_87": {
                "variable": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                },
                "min": {
                    "value": "LOG_SIG_MIN",
                    "type": "variable",
                    "possible_values": [
                        [
                            "-20",
                            "UnaryOp"
                        ]
                    ]
                },
                "max": {
                    "value": "LOG_SIG_MAX",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "int"
                        ]
                    ]
                }
            },
            "exp_88": {
                "variable": {
                    "value": "std",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "log_std",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc_log_std(h)",
                            "Call"
                        ],
                        [
                            "torch.clamp(log_std, LOG_SIG_MIN, LOG_SIG_MAX)",
                            "Call"
                        ],
                        [
                            "self.log_std",
                            "Attribute"
                        ]
                    ]
                }
            },
            "tanh_98": {
                "variable": {
                    "value": "action",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "mean",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.last_fc(h)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/sac/sac.py": {
        "torch": {
            "MSELoss_63": {
                "variable": {
                    "value": "self.qf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MSELoss_64": {
                "variable": {
                    "value": "self.vf_criterion",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "min_108": {
                "variable": {
                    "value": "q_new_actions",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.qf1(obs, new_obs_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "min_123": {
                "input": {
                    "value": "self.target_qf1(next_obs, new_next_actions)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/skewfit/online_vae_algorithm.py": {
        "torch": {
            "Pipe_124": {
                "variable": {
                    "value": "(self._vae_conn_pipe, process_pipe)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/td3/td3.py": {
        "torch": {
            "clamp_88": {
                "variable": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "noise",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptu.randn(next_actions.shape) * self.target_policy_noise",
                            "BinOp"
                        ],
                        [
                            "torch.clamp(noise, -self.target_policy_noise_clip, self.target_policy_noise_clip)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "-self.target_policy_noise_clip",
                    "type": "UnaryOp",
                    "possible_values": []
                },
                "max": {
                    "value": "self.target_policy_noise_clip",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "min_97": {
                "variable": {
                    "value": "target_q_values",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "target_q1_values",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.target_qf1(next_obs, noisy_next_actions)",
                            "Call"
                        ]
                    ]
                }
            },
            "MSELoss_41": {
                "variable": {
                    "value": "qf_criterion",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/torch_rl_algorithm.py": {
        "torch": {}
    },
    "rlkit/torch/vae/conv_vae.py": {
        "torch": {
            "Linear_186": {
                "variable": {
                    "value": "self.fc1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "representation_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Linear_187": {
                "variable": {
                    "value": "self.fc2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.encoder.output_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "representation_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "representation_size",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "abs_213": {
                "input": {
                    "value": "self.fc2(h)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "mse_loss_241": {
                "input": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ],
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "obs_distribution_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "clamp_222": {
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(latents).view(-1, self.imsize * self.imsize * self.input_channels)",
                            "Call"
                        ]
                    ]
                },
                "min": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "max": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_232": {
                "input": {
                    "value": "obs_distribution_params[0]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "target": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ],
                        [
                            "inputs.narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.imlength)",
                            "Call"
                        ],
                        [
                            "inputs",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "ones_like_223": {
                "input": {
                    "value": "decoded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.decoder(latents).view(-1, self.imsize * self.imsize * self.input_channels)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "rlkit/torch/vae/vae_base.py": {
        "torch": {
            "Normal_127": {
                "variable": {
                    "value": "decoder_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "dec_mu",
                    "type": "variable",
                    "possible_values": [
                        [
                            "dec_mu",
                            "Method Argument"
                        ]
                    ]
                },
                "scale": {
                    "value": "dec_var.pow(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "binary_cross_entropy_119": {
                "input": {
                    "value": "reconstruction_of_x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "reconstruction_of_x",
                            "Method Argument"
                        ]
                    ]
                },
                "target": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": [
                        [
                            "x",
                            "Method Argument"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "sum_112": {
                "input": {
                    "value": "1 + logvar - mu.pow(2) - logvar.exp()",
                    "type": "BinOp",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "mean_112": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "rlkit/torch/vae/vae_trainer.py": {
        "torch": {
            "Normal_46": {
                "variable": {
                    "value": "true_prior",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "ptu.zeros((batch_size, representation_size))",
                    "type": "Call",
                    "possible_values": []
                },
                "scale": {
                    "value": "ptu.ones((batch_size, representation_size))",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Normal_60": {
                "variable": {
                    "value": "vae_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "mus",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model.encode(torch_input)",
                            "Call"
                        ],
                        [
                            "ptu.get_numpy(mus)",
                            "Call"
                        ]
                    ]
                },
                "scale": {
                    "value": "stds",
                    "type": "variable",
                    "possible_values": [
                        [
                            "logvars.exp().pow(0.5)",
                            "Call"
                        ]
                    ]
                }
            },
            "Adam_160": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "variable",
                    "possible_values": [
                        [
                            "list(self.model.parameters())",
                            "Call"
                        ]
                    ]
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "weight_decay",
                    "type": "variable",
                    "possible_values": [
                        [
                            "0",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "Adam_281": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "self.model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.lr",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "stack_497": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs + recons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "stack_557": {
                "variable": {
                    "value": "all_imgs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "imgs + recons",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "log_65": {
                "variable": {
                    "value": "log_d_x_given_z",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "imgs * decoded + (1 - imgs) * (1 - decoded) + 1e-08",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sum_65": {
                "variable": {
                    "value": "log_d_x_given_z",
                    "type": "variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "DataLoader_202": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset_pt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteRandomSampler(self.train_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "train_data_workers",
                    "type": "variable",
                    "possible_values": [
                        [
                            "2",
                            "Method Argument"
                        ]
                    ]
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_210": {
                "variable": {
                    "value": "self.test_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.test_dataset_pt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteRandomSampler(self.test_dataset)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "variable",
                    "possible_values": [
                        [
                            "data.shape[0]",
                            "Subscript"
                        ],
                        [
                            "512",
                            "int"
                        ],
                        [
                            "128",
                            "Method Argument"
                        ]
                    ]
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "mse_loss_530": {
                "variable": {
                    "value": "mse",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "torch_img",
                    "type": "variable",
                    "possible_values": [
                        [
                            "ptu.from_numpy(img)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "reconstructions",
                    "type": "variable",
                    "possible_values": [
                        [
                            "self.model(next_obs)",
                            "Call"
                        ],
                        [
                            "self.model(next_obs)",
                            "Call"
                        ],
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "self.model(torch_img)",
                            "Call"
                        ]
                    ]
                },
                "reduction": {
                    "value": "elementwise_mean",
                    "type": "str",
                    "possible_values": []
                }
            },
            "Normal_70": {
                "variable": {
                    "value": "decoder_dist",
                    "type": "variable",
                    "possible_values": []
                },
                "loc": {
                    "value": "dec_mu",
                    "type": "variable",
                    "possible_values": []
                },
                "scale": {
                    "value": "dec_var.pow(0.5)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_245": {
                "variable": {
                    "value": "self.train_dataloader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.train_dataset_pt",
                    "type": "Attribute",
                    "possible_values": []
                },
                "sampler": {
                    "value": "InfiniteWeightedRandomSampler(self.train_dataset, self._train_weights)",
                    "type": "Call",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "self.batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "drop_last": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "self.train_data_workers",
                    "type": "Attribute",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "cat_405": {
                "variable": {
                    "value": "comparison",
                    "type": "variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "[next_obs[:n].narrow(start=0, length=self.imlength, dim=1).contiguous().view(-1, self.input_channels, self.imsize, self.imsize).transpose(2, 3), reconstructions.view(self.batch_size, self.input_channels, self.imsize, self.imsize)[:n].transpose(2, 3)]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    }
}