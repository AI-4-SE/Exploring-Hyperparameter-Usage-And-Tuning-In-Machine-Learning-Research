{
    "models/feature_extractor.py": {
        "sklearn": {},
        "torch": {
            "Conv2d_24": {
                "variable": {
                    "value": "self.conv1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(1, 22)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "padding": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                }
            },
            "BatchNorm2d_25": {
                "variable": {
                    "value": "self.batchnorm1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "16",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "ZeroPad2d_27": {
                "variable": {
                    "value": "self.padding1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(16, 17, 0, 1)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_28": {
                "variable": {
                    "value": "self.conv2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 32)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_29": {
                "variable": {
                    "value": "self.batchnorm2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_30": {
                "variable": {
                    "value": "self.pooling2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                },
                "stride": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                }
            },
            "ZeroPad2d_33": {
                "variable": {
                    "value": "self.padding2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "padding": {
                    "value": "(2, 1, 4, 3)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "Conv2d_34": {
                "variable": {
                    "value": "self.conv3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(8, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "BatchNorm2d_35": {
                "variable": {
                    "value": "self.batchnorm3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "4",
                    "type": "int",
                    "possible_values": []
                },
                "eps": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "MaxPool2d_36": {
                "variable": {
                    "value": "self.pooling3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "(2, 4)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "elu_39": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv1(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_44": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv2(x)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "elu_49": {
                "variable": {
                    "value": "x",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "self.conv3(x)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/meta.py": {
        "sklearn": {
            "LabelBinarizer_242": {
                "variable": {
                    "value": "lb",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "f1_score_296": {
                "variable": {
                    "value": "f1",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "label.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "predicted",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argmax(logits, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "macro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "roc_auc_score_246": {
                "y_true": {
                    "value": "y_test",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lb.transform(y_test)",
                            "Call"
                        ]
                    ]
                },
                "y_score": {
                    "value": "y_pred",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "lb.transform(y_pred)",
                            "Call"
                        ]
                    ]
                },
                "average": {
                    "value": "average",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "'macro'",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        },
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.train_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_55": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.val_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "[{'params': filter(lambda p: p.requires_grad, self.model.encoder.parameters())}, {'params': self.model.base_learner.parameters(), 'lr': self.args.meta_lr2}]",
                    "type": "List",
                    "possible_values": []
                },
                "lr": {
                    "value": "self.args.meta_lr1",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "StepLR_64": {
                "variable": {
                    "value": "self.lr_scheduler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "optimizer": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "step_size": {
                    "value": "self.args.step_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "gamma": {
                    "value": "self.args.gamma",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_114": {
                "variable": {
                    "value": "label_shot",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_249": {
                "variable": {
                    "value": "trlog",
                    "type": "Variable",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.args.save_path, 'trlog')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "DataLoader_254": {
                "variable": {
                    "value": "loader",
                    "type": "Variable",
                    "possible_values": []
                },
                "dataset": {
                    "value": "test_set",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "Dataset('test', self.args)",
                            "Call"
                        ]
                    ]
                },
                "batch_sampler": {
                    "value": "sampler",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "CategoriesSampler(test_set.label, 20, self.args.way, self.args.shot + self.args.val_query)",
                            "Call"
                        ]
                    ]
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "arange_272": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_277": {
                "variable": {
                    "value": "label_shot",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_83": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_92": {
                "obj": {
                    "value": "dict(params=self.model.state_dict())",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.args.save_path, name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_115": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "arange_133": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_182": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_273": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_278": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_134": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_153": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ],
                        [
                            "logits.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(self.args.way).repeat(self.args.train_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_183": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_200": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ],
                        [
                            "logits.data.cpu().numpy()",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(self.args.way).repeat(self.args.train_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_231": {
                "obj": {
                    "value": "trlog",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ],
                        [
                            "torch.load(osp.join(self.args.save_path, 'trlog'))",
                            "Call"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(self.args.save_path, 'trlog')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_286": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_69": {
                "f": {
                    "value": "self.args.init_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_76": {
                "f": {
                    "value": "osp.join(pre_save_path, 'max_acc.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_144": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_193": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "load_262": {
                "f": {
                    "value": "self.args.eval_weights",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "load_264": {
                "f": {
                    "value": "osp.join(self.args.save_path, 'max_acc' + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "trainer/pre.py": {
        "sklearn": {
            "precision_score_242": {
                "variable": {
                    "value": "precision",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(predicted)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "recall_score_243": {
                "variable": {
                    "value": "recall",
                    "type": "Variable",
                    "possible_values": []
                },
                "y_true": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(predicted)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            },
            "accuracy_score_238": {
                "y_true": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(predicted)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "recall_score_240": {
                "y_true": {
                    "value": "Y",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "labels.data.numpy()",
                            "Call"
                        ]
                    ]
                },
                "y_pred": {
                    "value": "np.round(predicted)",
                    "type": "Call",
                    "possible_values": []
                },
                "average": {
                    "value": "micro",
                    "type": "str",
                    "possible_values": []
                }
            }
        },
        "torch": {
            "DataLoader_46": {
                "variable": {
                    "value": "self.train_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.trainset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_size": {
                    "value": "args.pre_batch_size",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shuffle": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "DataLoader_51": {
                "variable": {
                    "value": "self.val_loader",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dataset": {
                    "value": "self.valset",
                    "type": "Attribute",
                    "possible_values": []
                },
                "batch_sampler": {
                    "value": "self.val_sampler",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_workers": {
                    "value": "8",
                    "type": "int",
                    "possible_values": []
                },
                "pin_memory": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "Adam_61": {
                "variable": {
                    "value": "self.optimizer",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(self.model.encoder.parameters()) + list(self.model.pre_fc.parameters())",
                            "BinOp"
                        ]
                    ]
                }
            },
            "from_numpy_215": {
                "variable": {
                    "value": "inputs",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "X_val",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "is_available_64": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_73": {
                "obj": {
                    "value": "dict(params=self.model.encoder.state_dict())",
                    "type": "Call",
                    "possible_values": []
                },
                "f": {
                    "value": "osp.join(self.args.save_path, name + '.pth')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "arange_158": {
                "variable": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "arange_163": {
                "variable": {
                    "value": "label_shot",
                    "type": "Variable",
                    "possible_values": []
                },
                "start": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "is_available_226": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_124": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "is_available_159": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_164": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cross_entropy_179": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.model(data)",
                            "Call"
                        ],
                        [
                            "self.model((data_shot, label_shot, data_query))",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "torch.arange(self.args.way).repeat(self.args.val_query)",
                            "Call"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ],
                        [
                            "batch[1]",
                            "Subscript"
                        ],
                        [
                            "label.type(torch.cuda.LongTensor)",
                            "Call"
                        ],
                        [
                            "label.type(torch.LongTensor)",
                            "Call"
                        ]
                    ]
                }
            },
            "save_207": {
                "obj": {
                    "value": "trlog",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "{}",
                            "Dict"
                        ]
                    ]
                },
                "f": {
                    "value": "osp.join(self.args.save_path, 'trlog')",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "is_available_114": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_119": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "is_available_171": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "dataloader/dataset_loader_BCI_IV_c.py": {
        "torch": {}
    },
    "dataloader/samplers.py": {
        "torch": {
            "from_numpy_22": {
                "variable": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": []
                },
                "ndarray": {
                    "value": "ind",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "np.argwhere(label == i).reshape(-1)",
                            "Call"
                        ],
                        [
                            "torch.from_numpy(ind)",
                            "Call"
                        ]
                    ]
                }
            },
            "stack_34": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "tensors": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "[]",
                            "List"
                        ],
                        [
                            "torch.stack(batch).t().reshape(-1)",
                            "Call"
                        ]
                    ]
                }
            },
            "t_34": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "reshape_34": {
                "variable": {
                    "value": "batch",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "-1",
                    "type": "UnaryOp",
                    "possible_values": []
                }
            },
            "randperm_32": {
                "n": {
                    "value": "len(l)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "main.py": {
        "torch": {
            "manual_seed_93": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "manual_seed_94": {
                "seed": {
                    "value": "args.seed",
                    "type": "Attribute",
                    "possible_values": []
                }
            }
        }
    },
    "models/mtl.py": {
        "torch": {
            "ParameterList_20": {
                "variable": {
                    "value": "self.vars",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Parameter_21": {
                "variable": {
                    "value": "self.fc1_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.ones([self.args.way, self.z_dim])",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_24": {
                "variable": {
                    "value": "self.fc1_b",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.zeros(self.args.way)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_32": {
                "variable": {
                    "value": "net",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "F.linear(input_x, fc1_w, fc1_b)",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_74": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_75": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.base_learner.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "cross_entropy_91": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_92": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "self.base_learner.parameters()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Adam_108": {
                "variable": {
                    "value": "optimizer",
                    "type": "Variable",
                    "possible_values": []
                },
                "params": {
                    "value": "params",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_learner.parameters()",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_110": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "Sequential_53": {
                "variable": {
                    "value": "self.pre_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "nn.Linear(4 * 2 * 25, num_cls)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_68": {
                "input": {
                    "value": "self.pre_fc(self.encoder(inp))",
                    "type": "Call",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "cross_entropy_81": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_82": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fast_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(map(lambda p: p[1] - 0.005 * p[0], zip(grad, self.base_learner.parameters())))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - 0.005 * p[0], zip(grad, fast_weights)))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, self.base_learner.parameters())))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, fast_weights)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_98": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "grad_99": {
                "variable": {
                    "value": "grad",
                    "type": "Variable",
                    "possible_values": []
                },
                "outputs": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ],
                        [
                            "F.cross_entropy(logits, label_shot)",
                            "Call"
                        ]
                    ]
                },
                "inputs": {
                    "value": "fast_weights",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "list(map(lambda p: p[1] - 0.005 * p[0], zip(grad, self.base_learner.parameters())))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - 0.005 * p[0], zip(grad, fast_weights)))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, self.base_learner.parameters())))",
                            "Call"
                        ],
                        [
                            "list(map(lambda p: p[1] - self.update_lr * p[0], zip(grad, fast_weights)))",
                            "Call"
                        ]
                    ]
                }
            },
            "cross_entropy_118": {
                "variable": {
                    "value": "loss",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot, fast_weights)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ],
                        [
                            "self.base_learner(embedding_shot)",
                            "Call"
                        ]
                    ]
                },
                "target": {
                    "value": "label_shot",
                    "type": "Variable",
                    "possible_values": []
                }
            },
            "ones_21": {
                "*size": {
                    "value": "[self.args.way, self.z_dim]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "zeros_24": {
                "*size": {
                    "value": "self.args.way",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "linear_32": {
                "input": {
                    "value": "input_x",
                    "type": "Variable",
                    "possible_values": []
                },
                "weight": {
                    "value": "fc1_w",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "the_vars[0]",
                            "Subscript"
                        ]
                    ]
                },
                "bias": {
                    "value": "fc1_b",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "the_vars[1]",
                            "Subscript"
                        ]
                    ]
                }
            },
            "Linear_53": {
                "in_features": {
                    "value": "4 * 2 * 25",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_cls",
                    "type": "Variable",
                    "possible_values": [
                        [
                            "4",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "utils/gpu_tools.py": {
        "torch": {}
    },
    "utils/misc.py": {
        "torch": {
            "softmax_34": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "input": {
                    "value": "logits",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "argmax_34": {
                "variable": {
                    "value": "pred",
                    "type": "Variable",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "is_available_35": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}