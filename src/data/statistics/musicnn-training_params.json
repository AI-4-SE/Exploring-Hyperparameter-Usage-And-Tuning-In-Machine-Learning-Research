{
    "src/shared.py": {
        "sklearn": {
            "average_precision_score_62": {
                "y_true": {
                    "value": "true[:, count]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "estimated[:, count]",
                    "type": "Subscript",
                    "possible_values": []
                }
            },
            "roc_auc_score_63": {
                "y_true": {
                    "value": "true[:, count]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "y_score": {
                    "value": "estimated[:, count]",
                    "type": "Subscript",
                    "possible_values": []
                }
            }
        }
    },
    "src/evaluate.py": {
        "tensorflow": {
            "Session_70": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_73": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Graph_50": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_initializer_72": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "src/models.py": {
        "tensorflow": {
            "set_verbosity_8": {
                "level": {
                    "value": "tf.compat.v1.logging.ERROR",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "concat_42": {
                "variable": {
                    "value": "frontend_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frontend_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_53": {
                "variable": {
                    "value": "frontend_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frontend_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_56": {
                "variable": {
                    "value": "midend_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "midend_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_64": {
                "variable": {
                    "value": "frontend_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frontend_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_67": {
                "variable": {
                    "value": "midend_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "midend_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_75": {
                "variable": {
                    "value": "frontend_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frontend_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_78": {
                "variable": {
                    "value": "midend_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "midend_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ],
                        [
                            "midend.dense_cnns(frontend_features, is_training, 64)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "concat_86": {
                "variable": {
                    "value": "frontend_features",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "frontend_features_list",
                    "type": "variable",
                    "possible_values": [
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=4.5, type='74timbral')",
                            "Call"
                        ],
                        [
                            "frontend.musically_motivated_cnns(x, is_training, config['audio_rep']['n_mels'], num_filt=1.6, type='7774timbraltemporal')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            }
        }
    },
    "src/models_backend.py": {
        "tensorflow": {
            "flatten_59": {
                "variable": {
                    "value": "flat_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "tmp_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.keras.layers.CuDNNLSTM(512, return_sequences=False, name='lstm2')(rnn)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(weighted, axis=1)",
                            "Call"
                        ],
                        [
                            "tf.reduce_sum(feature_map * weights, axis=1, keepdims=False)",
                            "Call"
                        ],
                        [
                            "tf.concat([max_pool, avg_pool], 1)",
                            "Call"
                        ]
                    ]
                }
            },
            "batch_normalization_60": {
                "variable": {
                    "value": "flat_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flat_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(tmp_pool)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(flat_pool, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_61": {
                "variable": {
                    "value": "flat_pool_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flat_pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(tmp_pool)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(flat_pool, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_62": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_pool_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(flat_pool, rate=0.5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "units": {
                    "value": "num_units_backend",
                    "type": "variable",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_66": {
                "variable": {
                    "value": "bn_dense",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.dense(inputs=flat_pool_dropout, units=num_units_backend, activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dropout_69": {
                "variable": {
                    "value": "dense_dropout",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "bn_dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(dense, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "convert_to_tensor_82": {
                "variable": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": []
                },
                "value": {
                    "value": "position_enc",
                    "type": "variable",
                    "possible_values": [
                        [
                            "np.array([[pos / np.power(freq, 2.0 * i / num_units) for i in range(num_units)] for pos in range(T)])",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "dense_70": {
                "inputs": {
                    "value": "dense_dropout",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.dropout(bn_dense, rate=0.5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "units": {
                    "value": "num_classes_dataset",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "reshape_83": {
                "tensor": {
                    "value": "outputs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.convert_to_tensor(position_enc, dtype=tf.float32)",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, T, num_units]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_26": {
                "variable": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(feature_map, pos_embedding)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [int(context / 2), int(context / 2)], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_27": {
                "variable": {
                    "value": "frames_attention",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "padded",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(feature_map, [[0, 0], [int(context / 2), int(context / 2)], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "padded.shape[2]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "context",
                    "type": "variable",
                    "possible_values": [
                        [
                            "3",
                            "int"
                        ]
                    ]
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "softmax_33": {
                "variable": {
                    "value": "softmax_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "logits": {
                    "value": "frames_attention",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv1d(inputs=padded, filters=padded.shape[2], kernel_size=context, padding='valid', activation=None, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "multiply_36": {
                "variable": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "softmax_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.softmax(frames_attention, axis=1)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(feature_map, pos_embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_sum_39": {
                "variable": {
                    "value": "tmp_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "weighted",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.multiply(softmax_layer, feature_map)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "CuDNNLSTM_11": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm1",
                    "type": "str",
                    "possible_values": []
                }
            },
            "CuDNNLSTM_12": {
                "units": {
                    "value": "512",
                    "type": "int",
                    "possible_values": []
                },
                "return_sequences": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                },
                "name": {
                    "value": "lstm2",
                    "type": "str",
                    "possible_values": []
                }
            },
            "add_22": {
                "variable": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(feature_map, pos_embedding)",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "pos_embedding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "positional_encoding(feature_map.get_shape().as_list())",
                            "Call"
                        ]
                    ]
                }
            },
            "Variable_43": {
                "variable": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": []
                },
                "initial_value": {
                    "value": "tf.constant(0, dtype=tf.float32)",
                    "type": "Call",
                    "possible_values": []
                },
                "name": {
                    "value": "alpha",
                    "type": "str",
                    "possible_values": []
                },
                "trainable": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "scalar_mul_45": {
                "variable": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": []
                },
                "scalar": {
                    "value": "alpha",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.Variable(tf.constant(0, dtype=tf.float32), name='alpha', trainable=True)",
                            "Call"
                        ]
                    ]
                },
                "x": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(feature_map, pos_embedding)",
                            "Call"
                        ]
                    ]
                }
            },
            "reduce_max_46": {
                "variable": {
                    "value": "max_val",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "scaled",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.scalar_mul(alpha, feature_map)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "exp_47": {
                "variable": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "scaled - max_val",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "reduce_sum_49": {
                "variable": {
                    "value": "tmp_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "feature_map * weights",
                    "type": "BinOp",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "False",
                    "type": "bool",
                    "possible_values": []
                }
            },
            "reduce_max_53": {
                "variable": {
                    "value": "max_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "input_tensor": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(feature_map, pos_embedding)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "moments_54": {
                "variable": {
                    "value": "(avg_pool, var_pool)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "x": {
                    "value": "feature_map",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(feature_map, pos_embedding)",
                            "Call"
                        ]
                    ]
                },
                "axes": {
                    "value": "[1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_55": {
                "variable": {
                    "value": "tmp_pool",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[max_pool, avg_pool]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                }
            },
            "constant_43": {
                "value": {
                    "value": "0",
                    "type": "int",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "reduce_sum_48": {
                "input_tensor": {
                    "value": "softmax",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.exp(scaled - max_val)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "1",
                    "type": "int",
                    "possible_values": []
                },
                "keepdims": {
                    "value": "True",
                    "type": "bool",
                    "possible_values": []
                }
            }
        }
    },
    "src/models_baselines.py": {
        "tensorflow": {
            "expand_dims_5": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_6": {
                "variable": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_8": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(input_layer, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(input_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[8, config['yInput']]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "1cnnOut",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_15": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=bn_input, filters=32, kernel_size=[8, config['yInput']], padding='valid', activation=tf.nn.relu, name='1cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=bn_input, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_7, filters=3 * num_filt, kernel_size=[7, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "1-pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_16": {
                "variable": {
                    "value": "pool1_rs",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv1, pool_size=[4, 1], strides=[4, 1], name='1-pool')",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv1, pool_size=[4, 1], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv1, pool_size=[1, bn_conv1.shape[2]], strides=[1, bn_conv1.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(pool1.shape[1]), int(pool1.shape[3]), 1]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_19": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "pool1_rs",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool1, [-1, int(pool1.shape[1]), int(pool1.shape[3]), 1])",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[8, pool1_rs.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "2cnnOut",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_26": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=pool1_rs, filters=32, kernel_size=[8, pool1_rs.shape[2]], padding='valid', activation=tf.nn.relu, name='2cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=do_pool1, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='2CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_5, filters=3 * num_filt, kernel_size=[5, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=out_front_end, filters=32, kernel_size=[8, out_front_end.shape[2]], padding='valid', activation=tf.nn.relu, name='2cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "2-pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_27": {
                "variable": {
                    "value": "flat_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv2, pool_size=[4, 1], strides=[4, 1], name='2-pool')",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv2, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv2, pool_size=[1, bn_conv2.shape[2]], strides=[1, bn_conv2.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv2, pool_size=[4, 1], strides=[4, 1], name='2-pool')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(pool2.shape[1] * pool2.shape[2] * pool2.shape[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_30": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool2, [-1, int(pool2.shape[1] * pool2.shape[2] * pool2.shape[3])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool2, [-1, int(pool2.shape[1] * pool2.shape[2] * pool2.shape[3])])",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_34": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.dense(inputs=flat_pool2, activation=tf.nn.relu, units=100, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=flat_pool2, activation=tf.nn.relu, units=100, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "units": {
                    "value": "config['num_classes_dataset']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_44": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_45": {
                "variable": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_47": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_input",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(input_layer, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(input_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "1CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_54": {
                "variable": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=bn_input, filters=32, kernel_size=[8, config['yInput']], padding='valid', activation=tf.nn.relu, name='1cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=bn_input, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_7, filters=3 * num_filt, kernel_size=[7, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_55": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_58": {
                "variable": {
                    "value": "do_pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv1, pool_size=[4, 1], strides=[4, 1], name='1-pool')",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv1, pool_size=[4, 1], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv1, pool_size=[1, bn_conv1.shape[2]], strides=[1, bn_conv1.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_59": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "do_pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.dropout(pool1, rate=0.25, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "2CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_66": {
                "variable": {
                    "value": "bn_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=pool1_rs, filters=32, kernel_size=[8, pool1_rs.shape[2]], padding='valid', activation=tf.nn.relu, name='2cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=do_pool1, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='2CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_5, filters=3 * num_filt, kernel_size=[5, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=out_front_end, filters=32, kernel_size=[8, out_front_end.shape[2]], padding='valid', activation=tf.nn.relu, name='2cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_67": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_70": {
                "variable": {
                    "value": "do_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv2, pool_size=[4, 1], strides=[4, 1], name='2-pool')",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv2, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv2, pool_size=[1, bn_conv2.shape[2]], strides=[1, bn_conv2.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv2, pool_size=[4, 1], strides=[4, 1], name='2-pool')",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_71": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "do_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.dropout(pool2, rate=0.25, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "3CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_78": {
                "variable": {
                    "value": "bn_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=do_pool2, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='3CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_3, filters=6 * num_filt, kernel_size=[3, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_79": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_82": {
                "variable": {
                    "value": "do_pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv3, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv3, pool_size=[1, bn_conv3.shape[2]], strides=[1, bn_conv3.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_83": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "do_pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.dropout(pool3, rate=0.25, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "4CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_90": {
                "variable": {
                    "value": "bn_conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=do_pool3, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='4CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_layer, filters=10 * num_filt, kernel_size=[1, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_91": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv4, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv4, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[2, 2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dropout_94": {
                "variable": {
                    "value": "do_pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv4, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv4, pool_size=[1, bn_conv4.shape[2]], strides=[1, bn_conv4.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.25",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "conv2d_95": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "do_pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.dropout(pool4, rate=0.25, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filters",
                    "type": "variable",
                    "possible_values": [
                        [
                            "32",
                            "Method Argument"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "[3, 3]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "same",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "5CNN",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_102": {
                "variable": {
                    "value": "bn_conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=do_pool4, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='5CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_7, filters=5 * num_filt, kernel_size=[7, int(0.6 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_103": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv5, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 4]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "flatten_106": {
                "variable": {
                    "value": "flat_pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "structure": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv5, pool_size=[4, 4], strides=[4, 4])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv5, pool_size=[1, bn_conv5.shape[2]], strides=[1, bn_conv5.shape[2]])",
                            "Call"
                        ]
                    ]
                }
            },
            "dropout_107": {
                "variable": {
                    "value": "do_pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "flat_pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.contrib.layers.flatten(pool5)",
                            "Call"
                        ]
                    ]
                },
                "rate": {
                    "value": "0.5",
                    "type": "float",
                    "possible_values": []
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "dense_108": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "do_pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.dropout(flat_pool5, rate=0.5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "units": {
                    "value": "config['num_classes_dataset']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "expand_dims_118": {
                "variable": {
                    "value": "expanded_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_119": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "expanded_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_125": {
                "variable": {
                    "value": "input_pad_7",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [3, 3], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_126": {
                "variable": {
                    "value": "input_pad_5",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [2, 2], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "pad_127": {
                "variable": {
                    "value": "input_pad_3",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [1, 1], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_130": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_pad_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_layer, [[0, 0], [3, 3], [0, 0], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, int(0.8 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_136": {
                "variable": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=bn_input, filters=32, kernel_size=[8, config['yInput']], padding='valid', activation=tf.nn.relu, name='1cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=bn_input, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='1CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_7, filters=3 * num_filt, kernel_size=[7, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_137": {
                "variable": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv1.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv1.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_140": {
                "variable": {
                    "value": "p1",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv1, pool_size=[4, 1], strides=[4, 1], name='1-pool')",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv1, pool_size=[4, 1], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv1, pool_size=[1, bn_conv1.shape[2]], strides=[1, bn_conv1.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_143": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_pad_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_layer, [[0, 0], [2, 2], [0, 0], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "3 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, int(0.8 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_149": {
                "variable": {
                    "value": "bn_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=pool1_rs, filters=32, kernel_size=[8, pool1_rs.shape[2]], padding='valid', activation=tf.nn.relu, name='2cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=do_pool1, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='2CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_5, filters=3 * num_filt, kernel_size=[5, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=out_front_end, filters=32, kernel_size=[8, out_front_end.shape[2]], padding='valid', activation=tf.nn.relu, name='2cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_150": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv2, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv2.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv2.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_153": {
                "variable": {
                    "value": "p2",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv2, pool_size=[4, 1], strides=[4, 1], name='2-pool')",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv2, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv2, pool_size=[1, bn_conv2.shape[2]], strides=[1, bn_conv2.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv2, pool_size=[4, 1], strides=[4, 1], name='2-pool')",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_156": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_pad_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_layer, [[0, 0], [1, 1], [0, 0], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "6 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, int(0.8 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_162": {
                "variable": {
                    "value": "bn_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=do_pool2, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='3CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_3, filters=6 * num_filt, kernel_size=[3, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_163": {
                "variable": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv3, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv3.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv3.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_166": {
                "variable": {
                    "value": "p3",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv3, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv3, pool_size=[1, bn_conv3.shape[2]], strides=[1, bn_conv3.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_169": {
                "variable": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "10 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, int(0.8 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_175": {
                "variable": {
                    "value": "bn_conv4",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.conv2d(inputs=do_pool3, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='4CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_layer, filters=10 * num_filt, kernel_size=[1, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_176": {
                "variable": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv4, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv4, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv4.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv4.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_179": {
                "variable": {
                    "value": "p4",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool4",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv4, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv4, pool_size=[1, bn_conv4.shape[2]], strides=[1, bn_conv4.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_182": {
                "variable": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_pad_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_layer, [[0, 0], [3, 3], [0, 0], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, int(0.6 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_188": {
                "variable": {
                    "value": "bn_conv5",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=do_pool4, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='5CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_7, filters=5 * num_filt, kernel_size=[7, int(0.6 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_189": {
                "variable": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv5, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv5, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv5.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv5.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_192": {
                "variable": {
                    "value": "p5",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.layers.max_pooling2d(inputs=bn_conv5, pool_size=[4, 4], strides=[4, 4])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv5, pool_size=[1, bn_conv5.shape[2]], strides=[1, bn_conv5.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_195": {
                "variable": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_pad_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_layer, [[0, 0], [2, 2], [0, 0], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, int(0.6 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_201": {
                "variable": {
                    "value": "bn_conv6",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_5, filters=5 * num_filt, kernel_size=[5, int(0.6 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_202": {
                "variable": {
                    "value": "pool6",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv6, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv6.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv6.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_205": {
                "variable": {
                    "value": "p6",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool6",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv6, pool_size=[1, bn_conv6.shape[2]], strides=[1, bn_conv6.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_208": {
                "variable": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_pad_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_layer, [[0, 0], [1, 1], [0, 0], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "10 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, int(0.6 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_214": {
                "variable": {
                    "value": "bn_conv7",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_3, filters=10 * num_filt, kernel_size=[3, int(0.6 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_215": {
                "variable": {
                    "value": "pool7",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv7, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv7.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv7.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_218": {
                "variable": {
                    "value": "p7",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv7, pool_size=[1, bn_conv7.shape[2]], strides=[1, bn_conv7.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_221": {
                "variable": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "15 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, int(0.6 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_226": {
                "variable": {
                    "value": "bn_conv8",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_layer, filters=15 * num_filt, kernel_size=[1, int(0.6 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_227": {
                "variable": {
                    "value": "pool8",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv8, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv8.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv8.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_230": {
                "variable": {
                    "value": "p8",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool8",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv8, pool_size=[1, bn_conv8.shape[2]], strides=[1, bn_conv8.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_233": {
                "variable": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_pad_7",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_layer, [[0, 0], [3, 3], [0, 0], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[7, int(0.2 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_239": {
                "variable": {
                    "value": "bn_conv9",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_7, filters=5 * num_filt, kernel_size=[7, int(0.2 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_240": {
                "variable": {
                    "value": "pool9",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv9, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv9.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv9.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_243": {
                "variable": {
                    "value": "p9",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool9",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv9, pool_size=[1, bn_conv9.shape[2]], strides=[1, bn_conv9.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_246": {
                "variable": {
                    "value": "conv10",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_pad_5",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_layer, [[0, 0], [2, 2], [0, 0], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "5 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[5, int(0.2 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_252": {
                "variable": {
                    "value": "bn_conv10",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_5, filters=5 * num_filt, kernel_size=[5, int(0.2 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_253": {
                "variable": {
                    "value": "pool10",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv10, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv10.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv10.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_256": {
                "variable": {
                    "value": "p10",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool10",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv10, pool_size=[1, bn_conv10.shape[2]], strides=[1, bn_conv10.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_259": {
                "variable": {
                    "value": "conv11",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_pad_3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(input_layer, [[0, 0], [1, 1], [0, 0], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "10 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[3, int(0.2 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_265": {
                "variable": {
                    "value": "bn_conv11",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_3, filters=10 * num_filt, kernel_size=[3, int(0.2 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_266": {
                "variable": {
                    "value": "pool11",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv11, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv11.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv11.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_269": {
                "variable": {
                    "value": "p11",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool11",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv11, pool_size=[1, bn_conv11.shape[2]], strides=[1, bn_conv11.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_272": {
                "variable": {
                    "value": "conv12",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "15 * num_filt",
                    "type": "BinOp",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[1, int(0.2 * config['yInput'])]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_277": {
                "variable": {
                    "value": "bn_conv12",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_layer, filters=15 * num_filt, kernel_size=[1, int(0.2 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_278": {
                "variable": {
                    "value": "pool12",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv12, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv12.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv12.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_281": {
                "variable": {
                    "value": "p12",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool12",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv12, pool_size=[1, bn_conv12.shape[2]], strides=[1, bn_conv12.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "concat_284": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "values": {
                    "value": "[p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12]",
                    "type": "List",
                    "possible_values": []
                },
                "axis": {
                    "value": "2",
                    "type": "int",
                    "possible_values": []
                }
            },
            "expand_dims_285": {
                "variable": {
                    "value": "out_front_end",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.concat([p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12], 2)",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "conv2d_288": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "out_front_end",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(pool, 3)",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "32",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "[8, out_front_end.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "name": {
                    "value": "2cnnOut",
                    "type": "str",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "max_pooling2d_296": {
                "variable": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=pool1_rs, filters=32, kernel_size=[8, pool1_rs.shape[2]], padding='valid', activation=tf.nn.relu, name='2cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=do_pool1, filters=num_filters, kernel_size=[3, 3], padding='same', activation=tf.nn.relu, name='2CNN', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=input_pad_5, filters=3 * num_filt, kernel_size=[5, int(0.8 * config['yInput'])], padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=out_front_end, filters=32, kernel_size=[8, out_front_end.shape[2]], padding='valid', activation=tf.nn.relu, name='2cnnOut', kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[4, 1]",
                    "type": "List",
                    "possible_values": []
                },
                "name": {
                    "value": "2-pool",
                    "type": "str",
                    "possible_values": []
                }
            },
            "reshape_301": {
                "variable": {
                    "value": "flat_pool2",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv2, pool_size=[4, 1], strides=[4, 1], name='2-pool')",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv2, pool_size=[2, 2], strides=[2, 2])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv2, pool_size=[1, bn_conv2.shape[2]], strides=[1, bn_conv2.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=conv2, pool_size=[4, 1], strides=[4, 1], name='2-pool')",
                            "Call"
                        ]
                    ]
                },
                "shape": {
                    "value": "[-1, int(pool2.shape[1] * pool2.shape[2] * pool2.shape[3])]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "dense_303": {
                "variable": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "flat_pool2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.reshape(pool2, [-1, int(pool2.shape[1] * pool2.shape[2] * pool2.shape[3])])",
                            "Call"
                        ],
                        [
                            "tf.reshape(pool2, [-1, int(pool2.shape[1] * pool2.shape[2] * pool2.shape[3])])",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "units": {
                    "value": "100",
                    "type": "int",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "dense_307": {
                "variable": {
                    "value": "output",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "dense",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.dense(inputs=flat_pool2, activation=tf.nn.relu, units=100, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.dense(inputs=flat_pool2, activation=tf.nn.relu, units=100, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "activation": {
                    "value": "None",
                    "type": "NoneType",
                    "possible_values": []
                },
                "units": {
                    "value": "config['num_classes_dataset']",
                    "type": "Subscript",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "src/models_frontend.py": {
        "tensorflow": {
            "expand_dims_5": {
                "variable": {
                    "value": "expanded_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "input": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "axis": {
                    "value": "3",
                    "type": "int",
                    "possible_values": []
                }
            },
            "batch_normalization_6": {
                "variable": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "expanded_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.expand_dims(x, 3)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_8": {
                "variable": {
                    "value": "input_pad_7",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [3, 3], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv2d_55": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_60": {
                "variable": {
                    "value": "bn_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=inputs, filters=filters, kernel_size=kernel_size, padding=padding, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=inputs, filters=filters, kernel_size=kernel_size, padding=padding, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_61": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "conv2d_69": {
                "variable": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "inputs",
                    "type": "variable",
                    "possible_values": []
                },
                "filters": {
                    "value": "filters",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "kernel_size",
                    "type": "variable",
                    "possible_values": []
                },
                "padding": {
                    "value": "padding",
                    "type": "variable",
                    "possible_values": [
                        [
                            "'valid'",
                            "Method Argument"
                        ],
                        [
                            "'same'",
                            "Method Argument"
                        ]
                    ]
                },
                "activation": {
                    "value": "activation",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ],
                        [
                            "tf.nn.relu",
                            "Method Argument"
                        ]
                    ]
                }
            },
            "batch_normalization_74": {
                "variable": {
                    "value": "bn_conv",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv2d(inputs=inputs, filters=filters, kernel_size=kernel_size, padding=padding, activation=activation)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.conv2d(inputs=inputs, filters=filters, kernel_size=kernel_size, padding=padding, activation=activation)",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "max_pooling2d_75": {
                "variable": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv, training=is_training)",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.batch_normalization(conv, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "pool_size": {
                    "value": "[1, bn_conv.shape[2]]",
                    "type": "List",
                    "possible_values": []
                },
                "strides": {
                    "value": "[1, bn_conv.shape[2]]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "pad_14": {
                "variable": {
                    "value": "input_pad_7",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "input_layer",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(expanded_layer, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [3, 3], [0, 0], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "squeeze_64": {
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv, pool_size=[1, bn_conv.shape[2]], strides=[1, bn_conv.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv, pool_size=[1, bn_conv.shape[2]], strides=[1, bn_conv.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "squeeze_78": {
                "input": {
                    "value": "pool",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv, pool_size=[1, bn_conv.shape[2]], strides=[1, bn_conv.shape[2]])",
                            "Call"
                        ],
                        [
                            "tf.compat.v1.layers.max_pooling2d(inputs=bn_conv, pool_size=[1, bn_conv.shape[2]], strides=[1, bn_conv.shape[2]])",
                            "Call"
                        ]
                    ]
                },
                "axis": {
                    "value": "[2]",
                    "type": "List",
                    "possible_values": []
                }
            }
        }
    },
    "src/models_midend.py": {
        "tensorflow": {
            "pad_7": {
                "variable": {
                    "value": "front_end_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "front_end_output",
                    "type": "variable",
                    "possible_values": []
                },
                "paddings": {
                    "value": "[[0, 0], [3, 3], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_8": {
                "variable": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "front_end_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(front_end_output, [[0, 0], [3, 3], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_14": {
                "variable": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv1d(inputs=front_end_pad, filters=num_filt, kernel_size=7, padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "pad_17": {
                "variable": {
                    "value": "bn_conv1_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [3, 3], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_18": {
                "variable": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv1_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(bn_conv1, [[0, 0], [3, 3], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_24": {
                "variable": {
                    "value": "bn_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv1d(inputs=bn_conv1_pad, filters=num_filt, kernel_size=7, padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_25": {
                "variable": {
                    "value": "res_conv2",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv1d(inputs=bn_conv1_pad, filters=num_filt, kernel_size=7, padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "bn_conv1",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.batch_normalization(conv1, training=is_training)",
                            "Call"
                        ]
                    ]
                }
            },
            "pad_28": {
                "variable": {
                    "value": "bn_conv2_pad",
                    "type": "variable",
                    "possible_values": []
                },
                "tensor": {
                    "value": "res_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(conv2, bn_conv1)",
                            "Call"
                        ]
                    ]
                },
                "paddings": {
                    "value": "[[0, 0], [3, 3], [0, 0]]",
                    "type": "List",
                    "possible_values": []
                },
                "mode": {
                    "value": "CONSTANT",
                    "type": "str",
                    "possible_values": []
                }
            },
            "conv1d_29": {
                "variable": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "bn_conv2_pad",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.pad(res_conv2, [[0, 0], [3, 3], [0, 0]], 'CONSTANT')",
                            "Call"
                        ]
                    ]
                },
                "filters": {
                    "value": "num_filt",
                    "type": "variable",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "int",
                    "possible_values": []
                },
                "padding": {
                    "value": "valid",
                    "type": "str",
                    "possible_values": []
                },
                "activation": {
                    "value": "tf.nn.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "kernel_initializer": {
                    "value": "tf.contrib.layers.variance_scaling_initializer()",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "batch_normalization_35": {
                "variable": {
                    "value": "bn_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv1d(inputs=bn_conv2_pad, filters=num_filt, kernel_size=7, padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "training": {
                    "value": "is_training",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "add_36": {
                "variable": {
                    "value": "res_conv3",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "conv3",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.layers.conv1d(inputs=bn_conv2_pad, filters=num_filt, kernel_size=7, padding='valid', activation=tf.nn.relu, kernel_initializer=tf.contrib.layers.variance_scaling_initializer())",
                            "Call"
                        ]
                    ]
                },
                "y": {
                    "value": "res_conv2",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.add(conv2, bn_conv1)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "src/train.py": {
        "tensorflow": {
            "get_collection_121": {
                "variable": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": []
                },
                "key": {
                    "value": "tf.GraphKeys.UPDATE_OPS",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "InteractiveSession_136": {
                "variable": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Saver_158": {
                "variable": {
                    "value": "saver",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "placeholder_18": {
                "variable": {
                    "value": "x",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['xInput'], config['yInput']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_19": {
                "variable": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                },
                "shape": {
                    "value": "[None, config['num_classes_dataset']]",
                    "type": "List",
                    "possible_values": []
                }
            },
            "placeholder_20": {
                "variable": {
                    "value": "is_train",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.bool",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "sigmoid_22": {
                "variable": {
                    "value": "normalized_y",
                    "type": "variable",
                    "possible_values": []
                },
                "x": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.model_number(x, is_train, config)",
                            "Call"
                        ]
                    ]
                }
            },
            "sigmoid_cross_entropy_29": {
                "variable": {
                    "value": "cost",
                    "type": "variable",
                    "possible_values": []
                },
                "multi_class_labels": {
                    "value": "y_",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.compat.v1.placeholder(tf.float32, [None, config['num_classes_dataset']])",
                            "Call"
                        ]
                    ]
                },
                "logits": {
                    "value": "y",
                    "type": "variable",
                    "possible_values": [
                        [
                            "models.model_number(x, is_train, config)",
                            "Call"
                        ]
                    ]
                }
            },
            "placeholder_123": {
                "variable": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": []
                },
                "dtype": {
                    "value": "tf.float32",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "set_session_137": {
                "session": {
                    "value": "sess",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.InteractiveSession()",
                            "Call"
                        ]
                    ]
                }
            },
            "name_scope_17": {
                "name": {
                    "value": "model",
                    "type": "str",
                    "possible_values": []
                }
            },
            "name_scope_27": {
                "name": {
                    "value": "metrics",
                    "type": "str",
                    "possible_values": []
                }
            },
            "trainable_variables_31": {
                "variable": {
                    "value": "vars",
                    "type": "variable",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "add_n_32": {
                "variable": {
                    "value": "lossL2",
                    "type": "variable",
                    "possible_values": []
                },
                "inputs": {
                    "value": "[tf.nn.l2_loss(v) for v in vars if 'kernel' in v.name]",
                    "type": "ListComp",
                    "possible_values": []
                }
            },
            "control_dependencies_122": {
                "control_inputs": {
                    "value": "update_ops",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.get_collection(tf.GraphKeys.UPDATE_OPS)",
                            "Call"
                        ]
                    ]
                }
            },
            "GradientDescentOptimizer_125": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "clip_by_global_norm_127": {
                "variable": {
                    "value": "(gradients, _)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "t_list": {
                    "value": "gradients",
                    "type": "variable",
                    "possible_values": []
                },
                "clip_norm": {
                    "value": "5.0",
                    "type": "float",
                    "possible_values": []
                }
            },
            "global_variables_initializer_157": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "global_variables_37": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "GradientDescentOptimizer_130": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "AdamOptimizer_133": {
                "variable": {
                    "value": "optimizer",
                    "type": "variable",
                    "possible_values": []
                },
                "learning_rate": {
                    "value": "lr",
                    "type": "variable",
                    "possible_values": [
                        [
                            "tf.placeholder(tf.float32)",
                            "Call"
                        ]
                    ]
                }
            },
            "l2_loss_32": {
                "t": {
                    "value": "v",
                    "type": "variable",
                    "possible_values": []
                }
            },
            "trainable_variables_24": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}