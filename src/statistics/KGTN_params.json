{
    "FeatureExtractor/ResNetBasic.py": {
        "torch": {
            "Conv2d_33": {
                "variable": {
                    "value": "self.C1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_34": {
                "variable": {
                    "value": "self.relu1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_35": {
                "variable": {
                    "value": "self.relu2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "inplace": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_36": {
                "variable": {
                    "value": "self.BN1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_37": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_38": {
                "variable": {
                    "value": "self.BN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_77": {
                "variable": {
                    "value": "self.C1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_78": {
                "variable": {
                    "value": "self.relu",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "BatchNorm2d_79": {
                "variable": {
                    "value": "self.BN1",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_80": {
                "variable": {
                    "value": "self.C2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_81": {
                "variable": {
                    "value": "self.BN2",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                }
            },
            "Conv2d_82": {
                "variable": {
                    "value": "self.C3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "bottleneckdim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "int(outdim / 4)",
                            "Call"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_83": {
                "variable": {
                    "value": "self.BN3",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_126": {
                "variable": {
                    "value": "conv1",
                    "type": "Name",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "out_channels": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_128": {
                "variable": {
                    "value": "bn1",
                    "type": "Name",
                    "possible_values": []
                },
                "num_features": {
                    "value": "64",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "ReLU_129": {
                "variable": {
                    "value": "relu",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "MaxPool2d_130": {
                "variable": {
                    "value": "pool1",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "3",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "padding": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Sequential_153": {
                "variable": {
                    "value": "self.trunk",
                    "type": "Attribute",
                    "possible_values": []
                },
                "*args": {
                    "value": "*trunk",
                    "type": null,
                    "possible_values": []
                }
            },
            "Conv2d_46": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "BatchNorm2d_48": {
                "variable": {
                    "value": "self.BNshortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "num_features": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "Conv2d_91": {
                "variable": {
                    "value": "self.shortcut",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_channels": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_channels": {
                    "value": "outdim",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "stride": {
                    "value": "2 if half_res else 1",
                    "type": "IfExp",
                    "possible_values": []
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "AvgPool2d_150": {
                "variable": {
                    "value": "avgpool",
                    "type": "Name",
                    "possible_values": []
                },
                "kernel_size": {
                    "value": "7",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_156": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "indim",
                    "type": "Name",
                    "possible_values": [
                        [
                            "64",
                            "Constant"
                        ],
                        [
                            "list_of_out_dims[i]",
                            "Subscript"
                        ]
                    ]
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "FeatureExtractor/ResNetFeat.py": {
        "torch": {
            "Linear_18": {
                "variable": {
                    "value": "self.classifier",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "self.final_feat_dim",
                    "type": "Attribute",
                    "possible_values": []
                },
                "out_features": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ],
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "classifier_has_bias",
                    "type": "Name",
                    "possible_values": [
                        [
                            "True",
                            "MethodArgument"
                        ]
                    ]
                }
            }
        }
    },
    "FeatureExtractor/additional_transforms.py": {
        "torch": {
            "rand_22": {
                "variable": {
                    "value": "randtensor",
                    "type": "Name",
                    "possible_values": []
                },
                "*size": {
                    "value": "len(self.transforms)",
                    "type": "Call",
                    "possible_values": []
                }
            }
        }
    },
    "FeatureExtractor/data.py": {
        "torch": {
            "DataLoader_50": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "dataset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "dataset_dict[dataset_type](transform=transform, **dataset_params)",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FeatureExtractor/losses.py": {
        "torch": {
            "unsqueeze_18": {
                "variable": {
                    "value": "one_hot",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Softmax_31": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "Softmax_48": {
                "variable": {
                    "value": "self.softmax",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_67": {
                "variable": {
                    "value": "self.cross_entropy_loss",
                    "type": "Attribute",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "range_18": {
                "start": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "end": {
                    "value": "num_classes - 1",
                    "type": "BinOp",
                    "possible_values": []
                }
            }
        }
    },
    "FeatureExtractor/main.py": {
        "torch": {
            "SGD_48": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "model.parameters()",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params.weight_decay",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dampening": {
                    "value": "params.dampening",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "DataParallel_194": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_model(params.model, params.num_classes)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ],
                        [
                            "main_training_loop(train_loader, val_loader, model, loss_fn, start_epoch, stop_epoch, params)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_206": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "resume_file",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_resume_file(params.resume_file)",
                            "Call"
                        ],
                        [
                            "os.path.join(params.checkpoint_dir, '{:d}.tar'.format(max_epoch))",
                            "Call"
                        ]
                    ]
                }
            },
            "no_grad_92": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "save_115": {
                "obj": {
                    "value": "{'epoch': epoch, 'state': model.state_dict()}",
                    "type": "Dict",
                    "possible_values": []
                },
                "f": {
                    "value": "outfile",
                    "type": "Name",
                    "possible_values": [
                        [
                            "os.path.join(params.checkpoint_dir, '{:d}.tar'.format(epoch))",
                            "Call"
                        ]
                    ]
                }
            }
        }
    },
    "FeatureExtractor/myMetaDataset.py": {
        "torch": {}
    },
    "FeatureExtractor/save_features.py": {
        "torch": {
            "DataParallel_70": {
                "variable": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": []
                },
                "module": {
                    "value": "model",
                    "type": "Name",
                    "possible_values": [
                        [
                            "get_model(params.model, params.num_classes)",
                            "Call"
                        ],
                        [
                            "model.cuda()",
                            "Call"
                        ],
                        [
                            "torch.nn.DataParallel(model)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_71": {
                "variable": {
                    "value": "tmp",
                    "type": "Name",
                    "possible_values": []
                },
                "f": {
                    "value": "params.modelfile",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "no_grad_81": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    },
    "KGTN/KGTN.py": {
        "torch": {
            "Parameter_27": {
                "variable": {
                    "value": "self.last_fc_weight",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.rand(feature_dim, num_classes)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "Parameter_112": {
                "variable": {
                    "value": "self._in_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(self._in_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "graph_learnable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Parameter_113": {
                "variable": {
                    "value": "self._out_matrix",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.from_numpy(self._out_matrix)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "graph_learnable",
                    "type": "Name",
                    "possible_values": [
                        [
                            "False",
                            "MethodArgument"
                        ],
                        [
                            "False",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "Linear_115": {
                "variable": {
                    "value": "self.fc_eq3_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_state_channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_116": {
                "variable": {
                    "value": "self.fc_eq3_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_117": {
                "variable": {
                    "value": "self.fc_eq4_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_state_channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_118": {
                "variable": {
                    "value": "self.fc_eq4_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_119": {
                "variable": {
                    "value": "self.fc_eq5_w",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_state_channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_120": {
                "variable": {
                    "value": "self.fc_eq5_u",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_122": {
                "variable": {
                    "value": "self.transform_fc",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "out_features": {
                    "value": "hidden_state_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                },
                "bias": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "Linear_124": {
                "variable": {
                    "value": "self.fc_output",
                    "type": "Attribute",
                    "possible_values": []
                },
                "in_features": {
                    "value": "2 * hidden_state_channel",
                    "type": "BinOp",
                    "possible_values": []
                },
                "out_features": {
                    "value": "output_channel",
                    "type": "Name",
                    "possible_values": [
                        [
                            "20",
                            "MethodArgument"
                        ]
                    ]
                }
            },
            "eye_189": {
                "variable": {
                    "value": "self.transform_fc.weight.data",
                    "type": "Attribute",
                    "possible_values": []
                },
                "n": {
                    "value": "self.hidden_state_channel",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "Parameter_47": {
                "variable": {
                    "value": "self.scale_cls",
                    "type": "Attribute",
                    "possible_values": []
                },
                "data": {
                    "value": "torch.FloatTensor(1).fill_(init_scale_cls)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_72": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input - torch.mean(input, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.hidden_state_channel)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "self.last_fc_weight",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "cat_142": {
                "variable": {
                    "value": "av",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(torch.bmm(batch_in_matrix, batch_aog_nodes), torch.bmm(batch_out_matrix, batch_aog_nodes))",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "sigmoid_146": {
                "variable": {
                    "value": "zv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_eq3_w(av) + self.fc_eq3_u(flatten_aog_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "sigmoid_148": {
                "variable": {
                    "value": "rv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_eq4_w(av) + self.fc_eq4_u(flatten_aog_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "tanh_150": {
                "variable": {
                    "value": "hv",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "self.fc_eq5_w(av) + self.fc_eq5_u(rv * flatten_aog_nodes)",
                    "type": "BinOp",
                    "possible_values": []
                }
            },
            "cat_158": {
                "variable": {
                    "value": "step_output",
                    "type": "Name",
                    "possible_values": []
                },
                "tensors": {
                    "value": "(flatten_aog_nodes, input)",
                    "type": "Tuple",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "rand_27": {
                "*size": {
                    "value": "feature_dim",
                    "type": "Name",
                    "possible_values": []
                },
                "out": {
                    "value": "num_classes",
                    "type": "Name",
                    "possible_values": []
                }
            },
            "normalize_58": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input - torch.mean(input, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.hidden_state_channel)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_59": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "step_fc_weight[-1]",
                            "Subscript"
                        ],
                        [
                            "weight.squeeze().transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight - torch.tensor(torch.mean(weight, 0, keepdim=True), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "from_numpy_112": {
                "ndarray": {
                    "value": "self._in_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "from_numpy_113": {
                "ndarray": {
                    "value": "self._out_matrix",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "normalize_65": {
                "variable": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input - torch.mean(input, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.hidden_state_channel)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "normalize_66": {
                "variable": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "step_fc_weight[-1]",
                            "Subscript"
                        ],
                        [
                            "weight.squeeze().transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight - torch.tensor(torch.mean(weight, 0, keepdim=True), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "p": {
                    "value": "2",
                    "type": "Constant",
                    "possible_values": []
                },
                "dim": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "eps": {
                    "value": "1e-12",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_69": {
                "variable": {
                    "value": "output",
                    "type": "Name",
                    "possible_values": []
                },
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input - torch.mean(input, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.hidden_state_channel)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "step_fc_weight[-1]",
                            "Subscript"
                        ],
                        [
                            "weight.squeeze().transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight - torch.tensor(torch.mean(weight, 0, keepdim=True), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "load_81": {
                "f": {
                    "value": "'checkpoints/{}'.format(pretrain_model)",
                    "type": "Call",
                    "possible_values": []
                }
            },
            "matmul_60": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input - torch.mean(input, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.hidden_state_channel)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "step_fc_weight[-1]",
                            "Subscript"
                        ],
                        [
                            "weight.squeeze().transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight - torch.tensor(torch.mean(weight, 0, keepdim=True), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "bmm_142": {
                "input": {
                    "value": "batch_out_matrix",
                    "type": "Name",
                    "possible_values": [
                        [
                            "self._out_matrix.repeat(batch_size, 1).view(batch_size, self.num_nodes, -1)",
                            "Call"
                        ]
                    ]
                },
                "mat2": {
                    "value": "batch_aog_nodes",
                    "type": "Name",
                    "possible_values": [
                        [
                            "input.view(-1, self.num_nodes, self.hidden_state_channel)",
                            "Call"
                        ],
                        [
                            "flatten_aog_nodes.view(batch_size, self.num_nodes, -1)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_63": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input - torch.mean(input, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.hidden_state_channel)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "tensor_64": {
                "data": {
                    "value": "torch.mean(weight, 0, keepdim=True)",
                    "type": "Call",
                    "possible_values": []
                },
                "requires_grad": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "matmul_67": {
                "input": {
                    "value": "input",
                    "type": "Name",
                    "possible_values": [
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input - torch.mean(input, 1, keepdim=True)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(input, p=2, dim=1, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "input.view(-1, self.hidden_state_channel)",
                            "Call"
                        ]
                    ]
                },
                "other": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "step_fc_weight[-1]",
                            "Subscript"
                        ],
                        [
                            "weight.squeeze().transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight - torch.tensor(torch.mean(weight, 0, keepdim=True), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ]
                    ]
                }
            },
            "mean_64": {
                "input": {
                    "value": "weight",
                    "type": "Name",
                    "possible_values": [
                        [
                            "step_fc_weight[-1]",
                            "Subscript"
                        ],
                        [
                            "weight.squeeze().transpose(0, 1)",
                            "Call"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ],
                        [
                            "weight - torch.tensor(torch.mean(weight, 0, keepdim=True), requires_grad=False)",
                            "BinOp"
                        ],
                        [
                            "F.normalize(weight, p=2, dim=0, eps=1e-12)",
                            "Call"
                        ]
                    ]
                },
                "dtype": {
                    "value": "0",
                    "type": "Constant",
                    "possible_values": []
                },
                "keepdim": {
                    "value": "True",
                    "type": "Constant",
                    "possible_values": []
                }
            }
        }
    },
    "KGTN/main_KGTN.py": {
        "torch": {
            "manual_seed_21": {
                "seed": {
                    "value": "seed",
                    "type": "Name",
                    "possible_values": [
                        [
                            "192",
                            "Constant"
                        ]
                    ]
                }
            },
            "DataLoader_87": {
                "variable": {
                    "value": "data_loader",
                    "type": "Name",
                    "possible_values": []
                },
                "dataset": {
                    "value": "testset",
                    "type": "Name",
                    "possible_values": [
                        [
                            "SimpleHDF5Dataset(file_handle)",
                            "Call"
                        ]
                    ]
                },
                "batch_size": {
                    "value": "batch_size",
                    "type": "Name",
                    "possible_values": [
                        [
                            "1000",
                            "MethodArgument"
                        ]
                    ]
                },
                "shuffle": {
                    "value": "False",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "SGD_92": {
                "variable": {
                    "value": "optimizer",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "filter(lambda p: p.requires_grad == True, model.parameters())",
                    "type": "Call",
                    "possible_values": []
                },
                "lr": {
                    "value": "params.lr",
                    "type": "Attribute",
                    "possible_values": []
                },
                "momentum": {
                    "value": "params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "dampening": {
                    "value": "params.momentum",
                    "type": "Attribute",
                    "possible_values": []
                },
                "weight_decay": {
                    "value": "params.wd",
                    "type": "Attribute",
                    "possible_values": []
                }
            },
            "CrossEntropyLoss_94": {
                "variable": {
                    "value": "loss_function",
                    "type": "Name",
                    "possible_values": []
                },
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "cat_79": {
                "tensors": {
                    "value": "(base_labels, novel_labels)",
                    "type": "Tuple",
                    "possible_values": []
                }
            },
            "softmax_160": {
                "input": {
                    "value": "output[:, novel_classes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "softmax_161": {
                "input": {
                    "value": "output[:, base_classes]",
                    "type": "Subscript",
                    "possible_values": []
                },
                "dim": {
                    "value": "1",
                    "type": "Constant",
                    "possible_values": []
                }
            },
            "no_grad_265": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            },
            "no_grad_116": {
                "params": {
                    "value": "default",
                    "type": null,
                    "possible_values": []
                }
            }
        }
    }
}